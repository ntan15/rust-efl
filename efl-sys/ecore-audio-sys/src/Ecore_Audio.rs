/* automatically generated by rust-bindgen */

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreAudioType {
    EcoreAudioTypePulse = 0,
    EcoreAudioTypeAlsa = 1,
    EcoreAudioTypeSndfile = 2,
    EcoreAudioTypeTone = 3,
    EcoreAudioTypeCoreAudio = 4,
    EcoreAudioTypeCustom = 5,
    EcoreAudioModuleLast = 6,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreAudioFormat {
    EcoreAudioFormatAuto = 0,
    EcoreAudioFormatRaw = 1,
    EcoreAudioFormatWav = 2,
    EcoreAudioFormatOgg = 3,
    EcoreAudioFormatFlac = 4,
    EcoreAudioFormatMp3 = 5,
    EcoreAudioFormatLast = 6,
}
pub enum Ecore_Audio_Module { }
pub enum Ecore_Audio_Object { }
#[repr(C)]
pub struct Ecore_Audio_Vio {
    pub get_length: Option<unsafe extern "C" fn(data: *mut c_void,
                                                eo_obj: *mut Eo)
                                              -> c_int>,
    pub seek: Option<unsafe extern "C" fn(data: *mut c_void,
                                          eo_obj: *mut Eo,
                                          offset: c_int,
                                          whence: c_int)
                                        -> c_int>,
    pub tell: Option<unsafe extern "C" fn(data: *mut c_void,
                                          eo_obj: *mut Eo)
                                        -> c_int>,
    pub read: Option<unsafe extern "C" fn(data: *mut c_void,
                                          eo_obj: *mut Eo,
                                          buffer: *mut c_void,
                                          length: c_int)
                                        -> c_int>,
    pub write: Option<unsafe extern "C" fn(data: *mut c_void,
                                           eo_obj: *mut Eo,
                                           buffer: *const c_void,
                                           length: c_int)
                                         -> c_int>,
}
pub type Ecore_Audio = Eo;
pub type Ecore_Audio_In = Eo;
pub type Ecore_Audio_Out = Eo;
pub type Ecore_Audio_In_SndFile = Eo;
pub type Ecore_Audio_Out_Sndfile = Eo;
pub type Ecore_Audio_In_Tone = Eo;
pub type Ecore_Audio_Out_Pulse = Eo;

#[link(name = "ecore-audio")]
extern "C" {
    pub static _ECORE_AUDIO_IN_EVENT_IN_LOOPED: EoEventDescription;
    pub static _ECORE_AUDIO_IN_EVENT_IN_STOPPED: EoEventDescription;
    pub static _ECORE_AUDIO_IN_EVENT_IN_SAMPLERATE_CHANGED:
               EoEventDescription;
    pub static _ECORE_AUDIO_OUT_PULSE_EVENT_CONTEXT_READY:
               EoEventDescription;
    pub static _ECORE_AUDIO_OUT_PULSE_EVENT_CONTEXT_FAIL:
               EoEventDescription;
}
#[link(name = "ecore-audio")]
extern "C" {
    pub fn ecore_audio_init() -> c_int;
    pub fn ecore_audio_shutdown() -> c_int;
    pub fn ecore_audio_class_get() -> *const EoClass;
    pub fn ecore_audio_obj_source_get() -> *const c_char;
    pub fn ecore_audio_obj_source_set(source: *const c_char)
     -> EinaBool;
    pub fn ecore_audio_obj_format_get() -> EcoreAudioFormat;
    pub fn ecore_audio_obj_format_set(format: EcoreAudioFormat)
     -> EinaBool;
    pub fn ecore_audio_obj_vio_set(vio: *mut Ecore_Audio_Vio,
                                   data: *mut c_void,
                                   free_func: eo_key_data_free_func);
    pub fn ecore_audio_obj_name_set(name: *const c_char);
    pub fn ecore_audio_obj_name_get() -> *const c_char;
    pub fn ecore_audio_obj_paused_set(paused: EinaBool);
    pub fn ecore_audio_obj_paused_get() -> EinaBool;
    pub fn ecore_audio_obj_volume_set(volume: c_double);
    pub fn ecore_audio_obj_volume_get() -> c_double;
    pub fn ecore_audio_in_class_get() -> *const EoClass;
    pub fn ecore_audio_obj_in_preloaded_get() -> EinaBool;
    pub fn ecore_audio_obj_in_preloaded_set(preloaded: EinaBool);
    pub fn ecore_audio_obj_in_seek(offs: c_double, mode: c_int)
     -> c_double;
    pub fn ecore_audio_obj_in_length_set(length: c_double);
    pub fn ecore_audio_obj_in_speed_set(speed: c_double);
    pub fn ecore_audio_obj_in_speed_get() -> c_double;
    pub fn ecore_audio_obj_in_samplerate_set(samplerate:
                                                 c_int);
    pub fn ecore_audio_obj_in_samplerate_get() -> c_int;
    pub fn ecore_audio_obj_in_channels_set(channels: c_int);
    pub fn ecore_audio_obj_in_channels_get() -> c_int;
    pub fn ecore_audio_obj_in_looped_set(looped: EinaBool);
    pub fn ecore_audio_obj_in_looped_get() -> EinaBool;
    pub fn ecore_audio_obj_in_length_get() -> c_double;
    pub fn ecore_audio_obj_in_output_get() -> *mut Ecore_Audio;
    pub fn ecore_audio_obj_in_remaining_get() -> c_double;
    pub fn ecore_audio_obj_in_read(buf: *mut c_void,
                                   len: size_t) -> ssize_t;
    pub fn ecore_audio_obj_in_read_internal(buf: *mut c_void,
                                            len: size_t) -> ssize_t;
    pub fn ecore_audio_out_class_get() -> *const EoClass;
    pub fn ecore_audio_obj_out_input_attach(input: *mut Ecore_Audio_In)
     -> EinaBool;
    pub fn ecore_audio_obj_out_input_detach(input: *mut Ecore_Audio_In)
     -> EinaBool;
    pub fn ecore_audio_obj_out_inputs_get() -> *mut EinaList;
    pub fn ecore_audio_in_sndfile_class_get() -> *const EoClass;
    pub fn ecore_audio_out_sndfile_class_get() -> *const EoClass;
    pub fn ecore_audio_in_tone_class_get() -> *const EoClass;
    pub fn ecore_audio_out_pulse_class_get() -> *const EoClass;
}
