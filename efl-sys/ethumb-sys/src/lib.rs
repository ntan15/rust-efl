#![allow(non_camel_case_types)]
extern crate libc;
extern crate eina_sys;

use libc::*;
use eina_sys::*;

/* automatically generated by rust-bindgen */

#[repr(C)]
pub struct Ethumb_Version {
    pub major: c_int,
    pub minor: c_int,
    pub micro: c_int,
    pub revision: c_int,
}

pub enum Ethumb { }
pub type EthumbGenerateCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                        e: *mut Ethumb,
                                                        success: EinaBool)>;
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EthumbThumbFdoSize {
    EthumbThumbNormal = 0,
    EthumbThumbLarge = 1,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EthumbThumbFormat {
    EthumbThumbFdo = 0,
    EthumbThumbJpeg = 1,
    EthumbThumbEet = 2,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EthumbThumbAspect {
    EthumbThumbKeepAspect = 0,
    EthumbThumbIgnoreAspect = 1,
    EthumbThumbCrop = 2,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EthumbThumbOrientation {
    EthumbThumbOrientNone = 0,
    EthumbThumbRotate90Cw = 1,
    EthumbThumbRotate180 = 2,
    EthumbThumbRotate90Ccw = 3,
    EthumbThumbFlipHorizontal = 4,
    EthumbThumbFlipVertical = 5,
    EthumbThumbFlipTranspose = 6,
    EthumbThumbFlipTransverse = 7,
    EthumbThumbOrientOriginal = 8,
}

#[link(name = "ethumb")]
extern "C" {
    pub static mut ethumb_version: *mut Ethumb_Version;
}
#[link(name = "ethumb")]
extern "C" {
    pub fn ethumb_init() -> c_int;
    pub fn ethumb_shutdown() -> c_int;
    pub fn ethumb_new() -> *mut Ethumb;
    pub fn ethumb_free(e: *mut Ethumb);
    pub fn ethumb_frame_set(e: *mut Ethumb,
                            theme_file: *const c_char,
                            group: *const c_char,
                            swallow: *const c_char)
     -> EinaBool;
    pub fn ethumb_frame_get(e: *const Ethumb,
                            theme_file: *mut *const c_char,
                            group: *mut *const c_char,
                            swallow: *mut *const c_char);
    pub fn ethumb_thumb_dir_path_set(e: *mut Ethumb,
                                     path: *const c_char);
    pub fn ethumb_thumb_dir_path_get(e: *const Ethumb)
     -> *const c_char;
    pub fn ethumb_thumb_category_set(e: *mut Ethumb,
                                     category: *const c_char);
    pub fn ethumb_thumb_category_get(e: *const Ethumb)
     -> *const c_char;
    pub fn ethumb_thumb_path_set(e: *mut Ethumb,
                                 path: *const c_char,
                                 key: *const c_char);
    pub fn ethumb_thumb_path_get(e: *mut Ethumb,
                                 path: *mut *const c_char,
                                 key: *mut *const c_char);
    pub fn ethumb_thumb_hash(e: *mut Ethumb);
    pub fn ethumb_thumb_hash_copy(dst: *mut Ethumb, src: *const Ethumb);
    pub fn ethumb_thumb_fdo_set(e: *mut Ethumb, s: EthumbThumbFdoSize);
    pub fn ethumb_thumb_size_set(e: *mut Ethumb, tw: c_int,
                                 th: c_int);
    pub fn ethumb_thumb_size_get(e: *const Ethumb,
                                 tw: *mut c_int,
                                 th: *mut c_int);
    pub fn ethumb_thumb_format_set(e: *mut Ethumb, f: EthumbThumbFormat);
    pub fn ethumb_thumb_format_get(e: *const Ethumb) -> EthumbThumbFormat;
    pub fn ethumb_thumb_aspect_set(e: *mut Ethumb,
                                   aspect: EthumbThumbAspect);
    pub fn ethumb_thumb_aspect_get(e: *const Ethumb) -> EthumbThumbAspect;
    pub fn ethumb_thumb_orientation_set(e: *mut Ethumb,
                                        orientation:
                                            EthumbThumbOrientation);
    pub fn ethumb_thumb_orientation_get(e: *const Ethumb)
     -> EthumbThumbOrientation;
    pub fn ethumb_thumb_crop_align_set(e: *mut Ethumb,
                                       x: c_float,
                                       y: c_float);
    pub fn ethumb_thumb_crop_align_get(e: *const Ethumb,
                                       x: *mut c_float,
                                       y: *mut c_float);
    pub fn ethumb_thumb_quality_set(e: *mut Ethumb,
                                    quality: c_int);
    pub fn ethumb_thumb_quality_get(e: *const Ethumb)
     -> c_int;
    pub fn ethumb_thumb_compress_set(e: *mut Ethumb,
                                     compress: c_int);
    pub fn ethumb_thumb_compress_get(e: *const Ethumb)
     -> c_int;
    pub fn ethumb_video_start_set(e: *mut Ethumb,
                                  start: c_float);
    pub fn ethumb_video_start_get(e: *const Ethumb)
     -> c_float;
    pub fn ethumb_video_time_set(e: *mut Ethumb,
                                 time: c_float);
    pub fn ethumb_video_time_get(e: *const Ethumb) -> c_float;
    pub fn ethumb_video_interval_set(e: *mut Ethumb,
                                     interval: c_float);
    pub fn ethumb_video_interval_get(e: *const Ethumb)
     -> c_float;
    pub fn ethumb_video_ntimes_set(e: *mut Ethumb,
                                   ntimes: c_uint);
    pub fn ethumb_video_ntimes_get(e: *const Ethumb)
     -> c_uint;
    pub fn ethumb_video_fps_set(e: *mut Ethumb, fps: c_uint);
    pub fn ethumb_video_fps_get(e: *const Ethumb) -> c_uint;
    pub fn ethumb_document_page_set(e: *mut Ethumb,
                                    page: c_uint);
    pub fn ethumb_document_page_get(e: *const Ethumb)
     -> c_uint;
    pub fn ethumb_file_set(e: *mut Ethumb,
                           path: *const c_char,
                           key: *const c_char) -> EinaBool;
    pub fn ethumb_file_get(e: *const Ethumb,
                           path: *mut *const c_char,
                           key: *mut *const c_char);
    pub fn ethumb_file_free(e: *mut Ethumb);
    pub fn ethumb_generate(e: *mut Ethumb, finished_cb: EthumbGenerateCb,
                           data: *const c_void,
                           free_data: EinaFreeCb) -> EinaBool;
    pub fn ethumb_exists(e: *mut Ethumb) -> EinaBool;
    pub fn ethumb_dup(e: *const Ethumb) -> *mut Ethumb;
    pub fn ethumb_cmp(e1: *const Ethumb, e2: *const Ethumb) -> EinaBool;
    pub fn ethumb_hash(key: *const c_void,
                       key_length: c_int)
     -> c_int;
    pub fn ethumb_key_cmp(key1: *const c_void,
                          key1_length: c_int,
                          key2: *const c_void,
                          key2_length: c_int)
     -> c_int;
    pub fn ethumb_length(key: *const c_void)
     -> c_uint;
}
