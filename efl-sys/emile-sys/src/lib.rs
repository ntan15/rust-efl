#![allow(dead_code)]
extern crate libc;
extern crate eina_sys;

use libc::*;
use eina_sys::*;

/* automatically generated by rust-bindgen */

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EmileCipherBackend {
    EmileNone = 0,
    EmileOpenssl = 1,
    EmileGnutls = 2,
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EmileCipherAlgorithm { 
    EmileAes256Cbc = 0, 
    Dummy,
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EmileCompressorType { 
    EmileZlib = 0, 
    EmileLz4 = 1, 
    EmileLz4hc = 2, 
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EmileCompressorLevel {
    EmileCompressorDefault = -1,
    EmileCompressorNone = 0,
    EmileCompressorFast = 1,
    EmileCompressorBest = 9,
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EmileColorspace {
    EmileColorspaceArgb8888 = 0,
    EmileColorspaceYcbcr422p601Pl = 1,
    EmileColorspaceYcbcr422p709Pl = 2,
    EmileColorspaceRgb565A5p = 3,
    EmileColorspaceAry8 = 4,
    EmileColorspaceYcbcr422601Pl = 5,
    EmileColorspaceYcbcr420nv12601Pl = 6,
    EmileColorspaceYcbcr420tm12601Pl = 7,
    EmileColorspaceAgry88 = 8,
    EmileColorspaceEtc1 = 9,
    EmileColorspaceRgb8Etc2 = 10,
    EmileColorspaceRgba8Etc2Eac = 11,
    EmileColorspaceEtc1Alpha = 12,
    EmileColorspaceRgbS3tcDxt1 = 13,
    EmileColorspaceRgbaS3tcDxt1 = 14,
    EmileColorspaceRgbaS3tcDxt2 = 15,
    EmileColorspaceRgbaS3tcDxt3 = 16,
    EmileColorspaceRgbaS3tcDxt4 = 17,
    EmileColorspaceRgbaS3tcDxt5 = 18,
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EmileImageEncoding {
    EmileImageLossless = 0,
    EmileImageJpeg = 1,
    EmileImageEtc1 = 2,
    EmileImageEtc2_rgb = 3,
    EmileImageEtc2_rgba = 4,
    EmileImageEtc1_alpha = 5,
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EmileImageScaleHint {
    EmileImageScaleHintNone = 0,
    EmileImageScaleHintDynamic = 1,
    EmileImageScaleHintStatic = 2,
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EmileImageAnimatedLoopHint {
    EmileImageAnimatedHintNone = 0,
    EmileImageAnimatedHintLoop = 1,
    EmileImageAnimatedHintPingpong = 2,
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EmileImageLoadError {
    EmileImageLoadErrorNone = 0,
    EmileImageLoadErrorGeneric = 1,
    EmileImageLoadErrorDoesNotExist = 2,
    EmileImageLoadErrorPermissionDenied = 3,
    EmileImageLoadErrorResourceAllocationFailed = 4,
    EmileImageLoadErrorCorruptFile = 5,
    EmileImageLoadErrorUnknownFormat = 6,
}

pub enum EmileImage { }

#[repr(C)]
pub struct EmileImageProperty {
    pub borders: Struct_Unnamed3,
    pub cspaces: *const EmileColorspace,
    pub cspace: EmileColorspace,
    pub encoding: EmileImageEncoding,
    pub w: c_uint,
    pub h: c_uint,
    pub row_stride: c_uint,
    pub scale: c_uchar,
    pub rotated: EinaBool,
    pub alpha: EinaBool,
    pub premul: EinaBool,
    pub alpha_sparse: EinaBool,
    pub flipped: EinaBool,
    pub comp: EinaBool,
}

#[repr(C)]
pub struct Struct_Unnamed3 {
    pub l: c_uchar,
    pub r: c_uchar,
    pub t: c_uchar,
    pub b: c_uchar,
}

#[repr(C)]
pub struct EmileImageAnimated {
    pub frames: *mut EinaList,
    pub loop_hint: EmileImageAnimatedLoopHint,
    pub frame_count: c_int,
    pub loop_count: c_int,
    pub cur_frame: c_int,
    pub animated: EinaBool,
}

#[repr(C)]
pub struct EmileImageLoadOpts {
    pub region: EinaRectangle,
    pub scale_load: Struct_Unnamed4,
    pub dpi: c_double,
    pub w: c_uint,
    pub h: c_uint,
    pub degree: c_uint,
    pub scale_down_by: c_int,
    pub orientation: EinaBool,
}

#[repr(C)]
pub struct Struct_Unnamed4 {
    pub src_x: c_int,
    pub src_y: c_int,
    pub src_w: c_int,
    pub src_h: c_int,
    pub dst_w: c_int,
    pub dst_h: c_int,
    pub smooth: c_int,
    pub scale_hint: EmileImageScaleHint,
}

#[link(name = "emile")]
extern "C" {
    pub fn emile_cipher_init() -> EinaBool;
    pub fn emile_cipher_module_get() -> EmileCipherBackend;
    pub fn emile_binbuf_cipher(algo: EmileCipherAlgorithm,
                               _in: *const EinaBinbuf,
                               key: *const c_char,
                               length: c_uint)
     -> *mut EinaBinbuf;
    pub fn emile_binbuf_decipher(algo: EmileCipherAlgorithm,
                                 _in: *const EinaBinbuf,
                                 key: *const c_char,
                                 length: c_uint)
     -> *mut EinaBinbuf;
    pub fn emile_compress(_in: *const EinaBinbuf, t: EmileCompressorType,
                          level: EmileCompressorLevel) -> *mut EinaBinbuf;
    pub fn emile_decompress(_in: *const EinaBinbuf, t: EmileCompressorType,
                            dest_length: c_uint)
     -> *mut EinaBinbuf;
    pub fn emile_expand(_in: *const EinaBinbuf, out: *mut EinaBinbuf,
                        t: EmileCompressorType) -> EinaBool;
    pub fn emile_image_tgv_memory_open(source: *mut EinaBinbuf,
                                       opts: *mut EmileImageLoadOpts,
                                       animated: *mut EmileImageAnimated,
                                       error: *mut EmileImageLoadError)
     -> *mut EmileImage;
    pub fn emile_image_tgv_file_open(source: *mut EinaFile,
                                     opts: *mut EmileImageLoadOpts,
                                     animated: *mut EmileImageAnimated,
                                     error: *mut EmileImageLoadError)
     -> *mut EmileImage;
    pub fn emile_image_jpeg_memory_open(source: *mut EinaBinbuf,
                                        opts: *mut EmileImageLoadOpts,
                                        animated: *mut EmileImageAnimated,
                                        error: *mut EmileImageLoadError)
     -> *mut EmileImage;
    pub fn emile_image_jpeg_file_open(source: *mut EinaFile,
                                      opts: *mut EmileImageLoadOpts,
                                      animated: *mut EmileImageAnimated,
                                      error: *mut EmileImageLoadError)
     -> *mut EmileImage;
    pub fn emile_image_head(image: *mut EmileImage,
                            prop: *mut EmileImageProperty,
                            property_size: c_uint,
                            error: *mut EmileImageLoadError) -> EinaBool;
    pub fn emile_image_data(image: *mut EmileImage,
                            prop: *mut EmileImageProperty,
                            property_size: c_uint,
                            pixels: *mut c_void,
                            error: *mut EmileImageLoadError) -> EinaBool;
    pub fn emile_image_close(source: *mut EmileImage);
    pub fn emile_load_error_str(source: *mut EmileImage,
                                error: EmileImageLoadError)
     -> *const c_char;
}
