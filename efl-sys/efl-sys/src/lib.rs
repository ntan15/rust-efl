#![allow(non_camel_case_types)]
extern crate libc;
extern crate eo_sys;
extern crate eina_sys;

use libc::*;
use eo_sys::*;
use eina_sys::*;

/* automatically generated by rust-bindgen */

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EflGfxPathCommand {
    EflGfxPathCommandTypeEnd = 0,
    EflGfxPathCommandTypeMoveTo = 1,
    EflGfxPathCommandTypeLineTo = 2,
    EflGfxPathCommandTypeCubicTo = 3,
    EflGfxPathCommandTypeClose = 4,
    EflGfxPathCommandTypeLast = 5,
}

#[repr(C)]
pub struct Efl_Gfx_Dash {
    pub length: c_double,
    pub gap: c_double,
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EflGfxCap {
    EflGfxCapButt = 0,
    EflGfxCapRound = 1,
    EflGfxCapSquare = 2,
    EflGfxCapLast = 3,
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EflGfxJoin {
    EflGfxJoinMiter = 0,
    EflGfxJoinRound = 1,
    EflGfxJoinBevel = 2,
    EflGfxJoinLast = 3,
}

#[repr(C)]
pub struct Efl_Gfx_Gradient_Stop {
    pub offset: c_double,
    pub r: c_int,
    pub g: c_int,
    pub b: c_int,
    pub a: c_int,
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EflGfxGradientSpread {
    EflGfxGradientSpreadPad = 0,
    EflGfxGradientSpreadReflect = 1,
    EflGfxGradientSpreadRepeat = 2,
    EflGfxGradientSpreadLast = 3,
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EflGfxFillSpread {
    EflGfxFillReflect = 0,
    EflGfxFillRepeat = 1,
    EflGfxFillRestrict = 2,
    EflGfxFillRestrictReflect = 3,
    EflGfxFillRestrictRepeat = 4,
    EflGfxFillPad = 5,
}

#[repr(C)]
pub struct Efl_Model_Children_Event {
    pub child: *mut Eo,
    pub index: c_uint,
}

pub type Efl_Control = Eo;
pub type Efl_File = Eo;
pub type Efl_Image = Eo;
pub type Efl_Player = Eo;
pub type Efl_Text = Eo;
pub type Efl_Text_Properties = Eo;
pub type Efl_Font_Size = c_int;
pub type Efl_Model_Base = Eo;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EflModelLoadStatus {
    EflModelLoadStatusError = 0,
    EflModelLoadStatusLoadingProperties = 1,
    EflModelLoadStatusLoadingChildren = 2,
    EflModelLoadStatusLoading = 3,
    EflModelLoadStatusLoadedProperties = 4,
    EflModelLoadStatusLoadedChildren = 8,
    EflModelLoadStatusLoaded = 12,
    EflModelLoadStatusUnloading = 16,
    EflModelLoadStatusUnloaded = 32,
}

#[repr(C)]
pub struct Efl_Model_Property_Event {
    pub changed_properties: *mut Eina_Array,
    pub invalidated_properties: *mut Eina_Array,
}

#[repr(C)]
pub struct Efl_Model_Load {
    pub status: EflModelLoadStatus,
}

pub type Efl_Gfx_Base = Eo;
pub type Efl_Gfx_Stack = Eo;
pub type Efl_Gfx_Fill = Eo;
pub type Efl_Gfx_View = Eo;
pub type Efl_Gfx_Shape = Eo;
pub type Efl_Gfx_Gradient_Base = Eo;
pub type Efl_Gfx_Gradient_Linear = Eo;
pub type Efl_Gfx_Gradient_Radial = Eo;
pub type Efl_Gfx_Filter = Eo;

#[link(name = "efl")]
extern "C" {
    pub static _EFL_FILE_EVENT_ASYNC_OPENED: Eo_Event_Description;
    pub static _EFL_FILE_EVENT_ASYNC_ERROR: Eo_Event_Description;
    pub static _EFL_MODEL_BASE_EVENT_LOAD_STATUS: Eo_Event_Description;
    pub static _EFL_MODEL_BASE_EVENT_PROPERTIES_CHANGED: Eo_Event_Description;
    pub static _EFL_MODEL_BASE_EVENT_CHILD_ADDED: Eo_Event_Description;
    pub static _EFL_MODEL_BASE_EVENT_CHILD_REMOVED: Eo_Event_Description;
    pub static _EFL_MODEL_BASE_EVENT_CHILDREN_COUNT_CHANGED:
               Eo_Event_Description;
    pub static _EFL_GFX_CHANGED: Eo_Event_Description;
    pub static _EFL_GFX_PATH_CHANGED: Eo_Event_Description;
}
#[link(name = "efl")]
extern "C" {
    pub fn efl_control_interface_get() -> *const Eo_Class;
    pub fn efl_control_priority_set(priority: c_int);
    pub fn efl_control_priority_get() -> c_int;
    pub fn efl_control_suspend_set(suspend: EinaBool);
    pub fn efl_control_suspend_get() -> EinaBool;
    pub fn efl_file_interface_get() -> *const Eo_Class;
    pub fn efl_file_mmap_set(f: *const Eina_File,
                             key: *const c_char) -> EinaBool;
    pub fn efl_file_mmap_get(f: *mut *const Eina_File,
                             key: *mut *const c_char);
    pub fn efl_file_set(file: *const c_char,
                        key: *const c_char) -> EinaBool;
    pub fn efl_file_get(file: *mut *const c_char,
                        key: *mut *const c_char);
    pub fn efl_file_async_set(async: EinaBool);
    pub fn efl_file_async_get() -> EinaBool;
    pub fn efl_file_save(file: *const c_char,
                         key: *const c_char,
                         flags: *const c_char) -> EinaBool;
    pub fn efl_file_eject();
    pub fn efl_file_async_wait() -> EinaBool;
    pub fn efl_image_interface_get() -> *const Eo_Class;
    pub fn efl_image_animated_get() -> EinaBool;
    pub fn efl_image_load_size_set(w: c_int,
                                   h: c_int);
    pub fn efl_image_load_size_get(w: *mut c_int,
                                   h: *mut c_int);
    pub fn efl_image_smooth_scale_set(smooth_scale: EinaBool);
    pub fn efl_image_smooth_scale_get() -> EinaBool;
    pub fn efl_image_ratio_get() -> c_double;
    pub fn efl_player_interface_get() -> *const Eo_Class;
    pub fn efl_player_playable_get() -> EinaBool;
    pub fn efl_player_play_set(play: EinaBool);
    pub fn efl_player_play_get() -> EinaBool;
    pub fn efl_player_position_set(sec: c_double);
    pub fn efl_player_position_get() -> c_double;
    pub fn efl_player_progress_get() -> c_double;
    pub fn efl_player_play_speed_set(speed: c_double);
    pub fn efl_player_play_speed_get() -> c_double;
    pub fn efl_player_audio_volume_set(volume: c_double);
    pub fn efl_player_audio_volume_get() -> c_double;
    pub fn efl_player_audio_mute_set(mute: EinaBool);
    pub fn efl_player_audio_mute_get() -> EinaBool;
    pub fn efl_player_length_get() -> c_double;
    pub fn efl_player_seekable_get() -> EinaBool;
    pub fn efl_text_interface_get() -> *const Eo_Class;
    pub fn efl_text_set(text: *const c_char);
    pub fn efl_text_get() -> *const c_char;
    pub fn efl_text_properties_interface_get() -> *const Eo_Class;
    pub fn efl_text_properties_font_set(font: *const c_char,
                                        size: Efl_Font_Size);
    pub fn efl_text_properties_font_get(font: *mut *const c_char,
                                        size: *mut Efl_Font_Size);
    pub fn efl_text_properties_font_source_set(font_source: *const c_char);
    pub fn efl_text_properties_font_source_get() -> *const c_char;
    pub fn efl_model_base_interface_get() -> *const Eo_Class;
    pub fn efl_model_load_status_get() -> EflModelLoadStatus;
    pub fn efl_model_properties_get(properties: *const *mut Eina_Array)
     -> EflModelLoadStatus;
    pub fn efl_model_property_set(property: *const c_char,
                                  value: *const Eina_Value)
     -> EflModelLoadStatus;
    pub fn efl_model_property_get(property: *const c_char,
                                  value: *mut *const Eina_Value)
     -> EflModelLoadStatus;
    pub fn efl_model_children_slice_get(start: c_uint,
                                        count: c_uint,
                                        children_accessor:
                                            *mut *mut Eina_Accessor)
     -> EflModelLoadStatus;
    pub fn efl_model_children_count_get(children_count: *mut c_uint)
     -> EflModelLoadStatus;
    pub fn efl_model_load();
    pub fn efl_model_unload();
    pub fn efl_model_properties_load();
    pub fn efl_model_children_load();
    pub fn efl_model_child_add() -> *mut Eo_Base;
    pub fn efl_model_child_del(child: *mut Eo_Base) -> EflModelLoadStatus;
    pub fn efl_gfx_base_interface_get() -> *const Eo_Class;
    pub fn efl_gfx_position_set(x: c_int,
                                y: c_int);
    pub fn efl_gfx_position_get(x: *mut c_int,
                                y: *mut c_int);
    pub fn efl_gfx_size_set(w: c_int,
                            h: c_int);
    pub fn efl_gfx_size_get(w: *mut c_int,
                            h: *mut c_int);
    pub fn efl_gfx_color_set(r: c_int,
                             g: c_int,
                             b: c_int,
                             a: c_int);
    pub fn efl_gfx_color_get(r: *mut c_int,
                             g: *mut c_int,
                             b: *mut c_int,
                             a: *mut c_int);
    pub fn efl_gfx_color_part_set(part: *const c_char,
                                  r: c_int,
                                  g: c_int,
                                  b: c_int,
                                  a: c_int) -> EinaBool;
    pub fn efl_gfx_color_part_get(part: *const c_char,
                                  r: *mut c_int,
                                  g: *mut c_int,
                                  b: *mut c_int,
                                  a: *mut c_int) -> EinaBool;
    pub fn efl_gfx_visible_set(v: EinaBool);
    pub fn efl_gfx_visible_get() -> EinaBool;
    pub fn efl_gfx_stack_interface_get() -> *const Eo_Class;
    pub fn efl_gfx_stack_layer_set(l: c_short);
    pub fn efl_gfx_stack_layer_get() -> c_short;
    pub fn efl_gfx_stack_below_get() -> *mut Efl_Gfx_Stack;
    pub fn efl_gfx_stack_above_get() -> *mut Efl_Gfx_Stack;
    pub fn efl_gfx_stack_below(below: *mut Efl_Gfx_Stack);
    pub fn efl_gfx_stack_raise();
    pub fn efl_gfx_stack_above(above: *mut Efl_Gfx_Stack);
    pub fn efl_gfx_stack_lower();
    pub fn efl_gfx_fill_interface_get() -> *const Eo_Class;
    pub fn efl_gfx_fill_spread_set(spread: EflGfxFillSpread);
    pub fn efl_gfx_fill_spread_get() -> EflGfxFillSpread;
    pub fn efl_gfx_fill_set(x: c_int,
                            y: c_int,
                            w: c_int,
                            h: c_int);
    pub fn efl_gfx_fill_get(x: *mut c_int,
                            y: *mut c_int,
                            w: *mut c_int,
                            h: *mut c_int);
    pub fn efl_gfx_view_interface_get() -> *const Eo_Class;
    pub fn efl_gfx_view_size_set(w: c_int,
                                 h: c_int);
    pub fn efl_gfx_view_size_get(w: *mut c_int,
                                 h: *mut c_int);
    pub fn efl_gfx_shape_mixin_get() -> *const Eo_Class;
    pub fn efl_gfx_shape_stroke_scale_get() -> c_double;
    pub fn efl_gfx_shape_stroke_scale_set(s: c_double);
    pub fn efl_gfx_shape_stroke_color_get(r: *mut c_int,
                                          g: *mut c_int,
                                          b: *mut c_int,
                                          a: *mut c_int);
    pub fn efl_gfx_shape_stroke_color_set(r: c_int,
                                          g: c_int,
                                          b: c_int,
                                          a: c_int);
    pub fn efl_gfx_shape_stroke_width_get() -> c_double;
    pub fn efl_gfx_shape_stroke_width_set(w: c_double);
    pub fn efl_gfx_shape_stroke_location_get() -> c_double;
    pub fn efl_gfx_shape_stroke_location_set(centered: c_double);
    pub fn efl_gfx_shape_stroke_dash_get(dash: *mut *const Efl_Gfx_Dash,
                                         length: *mut c_uint);
    pub fn efl_gfx_shape_stroke_dash_set(dash: *const Efl_Gfx_Dash,
                                         length: c_uint);
    pub fn efl_gfx_shape_stroke_cap_get() -> EflGfxCap;
    pub fn efl_gfx_shape_stroke_cap_set(c: EflGfxCap);
    pub fn efl_gfx_shape_stroke_join_get() -> EflGfxJoin;
    pub fn efl_gfx_shape_stroke_join_set(j: EflGfxJoin);
    pub fn efl_gfx_shape_path_set(op: *const EflGfxPathCommand,
                                  points: *const c_double);
    pub fn efl_gfx_shape_path_get(op: *mut *const EflGfxPathCommand,
                                  points: *mut *const c_double);
    pub fn efl_gfx_shape_path_length_get(commands: *mut c_uint,
                                         points: *mut c_uint);
    pub fn efl_gfx_shape_current_get(x: *mut c_double,
                                     y: *mut c_double);
    pub fn efl_gfx_shape_current_ctrl_get(x: *mut c_double,
                                          y: *mut c_double);
    pub fn efl_gfx_shape_dup(dup_from: *const Eo_Base);
    pub fn efl_gfx_shape_bounds_get(r: *mut Eina_Rectangle);
    pub fn efl_gfx_shape_reset();
    pub fn efl_gfx_shape_append_move_to(x: c_double,
                                        y: c_double);
    pub fn efl_gfx_shape_append_line_to(x: c_double,
                                        y: c_double);
    pub fn efl_gfx_shape_append_quadratic_to(x: c_double,
                                             y: c_double,
                                             ctrl_x: c_double,
                                             ctrl_y: c_double);
    pub fn efl_gfx_shape_append_squadratic_to(x: c_double,
                                              y: c_double);
    pub fn efl_gfx_shape_append_cubic_to(x: c_double,
                                         y: c_double,
                                         ctrl_x0: c_double,
                                         ctrl_y0: c_double,
                                         ctrl_x1: c_double,
                                         ctrl_y1: c_double);
    pub fn efl_gfx_shape_append_scubic_to(x: c_double,
                                          y: c_double,
                                          ctrl_x: c_double,
                                          ctrl_y: c_double);
    pub fn efl_gfx_shape_append_arc_to(x: c_double,
                                       y: c_double,
                                       rx: c_double,
                                       ry: c_double,
                                       angle: c_double,
                                       large_arc: EinaBool,
                                       sweep: EinaBool);
    pub fn efl_gfx_shape_append_close();
    pub fn efl_gfx_shape_append_circle(x: c_double,
                                       y: c_double,
                                       radius: c_double);
    pub fn efl_gfx_shape_append_rect(x: c_double,
                                     y: c_double,
                                     w: c_double,
                                     h: c_double,
                                     rx: c_double,
                                     ry: c_double);
    pub fn efl_gfx_shape_append_svg_path(svg_path_data: *const c_char);
    pub fn efl_gfx_shape_interpolate(from: *const Eo_Base, to: *const Eo_Base,
                                     pos_map: c_double)
     -> EinaBool;
    pub fn efl_gfx_shape_equal_commands(with: *const Eo_Base) -> EinaBool;
    pub fn efl_gfx_gradient_base_interface_get() -> *const Eo_Class;
    pub fn efl_gfx_gradient_stop_set(colors: *const Efl_Gfx_Gradient_Stop,
                                     length: c_uint);
    pub fn efl_gfx_gradient_stop_get(colors: *mut *const Efl_Gfx_Gradient_Stop,
                                     length: *mut c_uint);
    pub fn efl_gfx_gradient_spread_set(s: EflGfxGradientSpread);
    pub fn efl_gfx_gradient_spread_get() -> EflGfxGradientSpread;
    pub fn efl_gfx_gradient_linear_interface_get() -> *const Eo_Class;
    pub fn efl_gfx_gradient_linear_start_set(x: c_double,
                                             y: c_double);
    pub fn efl_gfx_gradient_linear_start_get(x: *mut c_double,
                                             y: *mut c_double);
    pub fn efl_gfx_gradient_linear_end_set(x: c_double,
                                           y: c_double);
    pub fn efl_gfx_gradient_linear_end_get(x: *mut c_double,
                                           y: *mut c_double);
    pub fn efl_gfx_gradient_radial_interface_get() -> *const Eo_Class;
    pub fn efl_gfx_gradient_radial_center_set(x: c_double,
                                              y: c_double);
    pub fn efl_gfx_gradient_radial_center_get(x: *mut c_double,
                                              y: *mut c_double);
    pub fn efl_gfx_gradient_radial_radius_set(r: c_double);
    pub fn efl_gfx_gradient_radial_radius_get() -> c_double;
    pub fn efl_gfx_gradient_radial_focal_set(x: c_double,
                                             y: c_double);
    pub fn efl_gfx_gradient_radial_focal_get(x: *mut c_double,
                                             y: *mut c_double);
    pub fn efl_gfx_filter_interface_get() -> *const Eo_Class;
}
