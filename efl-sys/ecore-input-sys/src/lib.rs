#![allow(non_camel_case_types)]
extern crate libc;
extern crate eina_sys;

use libc::*;
use eina_sys::*;

/* automatically generated by rust-bindgen */

pub type Ecore_Window = uintptr_t;
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreEventModifier {
    EcoreNone = 0,
    EcoreShift = 1,
    EcoreCtrl = 2,
    EcoreAlt = 3,
    EcoreWin = 4,
    EcoreScroll = 5,
    EcoreCaps = 6,
    EcoreMode = 7,
    EcoreLast = 8,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreEventPress {
    EcoreDown = 0,
    EcoreUp = 1,
    EcoreCancel = 2,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreEventIo { 
    EcoreIn = 0, 
    EcoreOut = 1, 
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreComposeState {
    EcoreComposeNone = 0,
    EcoreComposeMiddle = 1,
    EcoreComposeDone = 2,
}
#[repr(C)]
pub struct Ecore_Event_Key {
    pub keyname: *const c_char,
    pub key: *const c_char,
    pub string: *const c_char,
    pub compose: *const c_char,
    pub window: Ecore_Window,
    pub root_window: Ecore_Window,
    pub event_window: Ecore_Window,
    pub timestamp: c_uint,
    pub modifiers: c_uint,
    pub same_screen: c_int,
    pub keycode: c_uint,
    pub data: *mut c_void,
}
#[repr(C)]
pub struct Ecore_Event_Mouse_Button {
    pub window: Ecore_Window,
    pub root_window: Ecore_Window,
    pub event_window: Ecore_Window,
    pub timestamp: c_uint,
    pub modifiers: c_uint,
    pub buttons: c_uint,
    pub double_click: c_uint,
    pub triple_click: c_uint,
    pub same_screen: c_int,
    pub x: c_int,
    pub y: c_int,
    pub root: EcoreInputStructUnnamed1,
    pub multi: EcoreInputStructUnnamed2,
}
#[repr(C)]
pub struct EcoreInputStructUnnamed1 {
    pub x: c_int,
    pub y: c_int,
}

#[repr(C)]
pub struct EcoreInputStructUnnamed2 {
    pub device: c_int,
    pub radius: c_double,
    pub radius_x: c_double,
    pub radius_y: c_double,
    pub pressure: c_double,
    pub angle: c_double,
    pub x: c_double,
    pub y: c_double,
    pub root: EcoreInputStructUnnamed3,
}
#[repr(C)]
pub struct EcoreInputStructUnnamed3 {
    pub x: c_double,
    pub y: c_double,
}
#[repr(C)]
pub struct Ecore_Event_Mouse_Wheel {
    pub window: Ecore_Window,
    pub root_window: Ecore_Window,
    pub event_window: Ecore_Window,
    pub timestamp: c_uint,
    pub modifiers: c_uint,
    pub same_screen: c_int,
    pub direction: c_int,
    pub z: c_int,
    pub x: c_int,
    pub y: c_int,
    pub root: EcoreInputStructUnnamed4,
}
#[repr(C)]
pub struct EcoreInputStructUnnamed4 {
    pub x: c_int,
    pub y: c_int,
}
#[repr(C)]
pub struct Ecore_Event_Mouse_Move {
    pub window: Ecore_Window,
    pub root_window: Ecore_Window,
    pub event_window: Ecore_Window,
    pub timestamp: c_uint,
    pub modifiers: c_uint,
    pub same_screen: c_int,
    pub x: c_int,
    pub y: c_int,
    pub root: EcoreInputStructUnnamed5,
    pub multi: EcoreInputStructUnnamed6,
}
#[repr(C)]
pub struct EcoreInputStructUnnamed5 {
    pub x: c_int,
    pub y: c_int,
}
#[repr(C)]
pub struct EcoreInputStructUnnamed6 {
    pub device: c_int,
    pub radius: c_double,
    pub radius_x: c_double,
    pub radius_y: c_double,
    pub pressure: c_double,
    pub angle: c_double,
    pub x: c_double,
    pub y: c_double,
    pub root: EcoreInputStructUnnamed7,
}
#[repr(C)]
pub struct EcoreInputStructUnnamed7 {
    pub x: c_double,
    pub y: c_double,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreAxisLabel {
    EcoreAxisLabelUnknown = 0,
    EcoreAxisLabelX = 1,
    EcoreAxisLabelY = 2,
    EcoreAxisLabelPressure = 3,
    EcoreAxisLabelDistance = 4,
    EcoreAxisLabelAzimuth = 5,
    EcoreAxisLabelTilt = 6,
    EcoreAxisLabelTwist = 7,
    EcoreAxisLabelTouchWidthMajor = 8,
    EcoreAxisLabelTouchWidthMinor = 9,
    EcoreAxisLabelToolwidthMajor = 10,
    EcoreAxisLabelToolWidthMinor = 11,
}
#[repr(C)]
pub struct Ecore_Axis {
    pub label: EcoreAxisLabel,
    pub value: c_double,
}
#[repr(C)]
pub struct Ecore_Event_Axis_Update {
    pub window: Ecore_Window,
    pub root_window: Ecore_Window,
    pub event_window: Ecore_Window,
    pub timestamp: c_uint,
    pub device: c_int,
    pub toolid: c_int,
    pub naxis: c_int,
    pub axis: *mut Ecore_Axis,
}
#[repr(C)]
pub struct Ecore_Event_Mouse_Io {
    pub window: Ecore_Window,
    pub event_window: Ecore_Window,
    pub timestamp: c_uint,
    pub modifiers: c_uint,
    pub x: c_int,
    pub y: c_int,
}
#[repr(C)]
pub struct Ecore_Event_Modifiers {
    pub size: c_uint,
    pub array: [c_uint; 8usize],
}

#[link(name = "ecore_input")]
extern "C" {
    pub static mut ECORE_EVENT_KEY_DOWN: c_int;
    pub static mut ECORE_EVENT_KEY_UP: c_int;
    pub static mut ECORE_EVENT_MOUSE_BUTTON_DOWN: c_int;
    pub static mut ECORE_EVENT_MOUSE_BUTTON_UP: c_int;
    pub static mut ECORE_EVENT_MOUSE_MOVE: c_int;
    pub static mut ECORE_EVENT_MOUSE_WHEEL: c_int;
    pub static mut ECORE_EVENT_MOUSE_IN: c_int;
    pub static mut ECORE_EVENT_MOUSE_OUT: c_int;
    pub static mut ECORE_EVENT_AXIS_UPDATE: c_int;
    pub static mut ECORE_EVENT_MOUSE_BUTTON_CANCEL: c_int;
}
#[link(name = "ecore_input")]
extern "C" {
    pub fn ecore_event_init() -> c_int;
    pub fn ecore_event_shutdown() -> c_int;
    pub fn ecore_event_modifier_mask(modifier: EcoreEventModifier)
     -> c_uint;
    pub fn ecore_event_update_modifier(key: *const c_char,
                                       modifiers: *mut Ecore_Event_Modifiers,
                                       inc: c_int)
     -> EcoreEventModifier;
    pub fn ecore_compose_get(seq: *const Eina_List, seqstr_ret: *mut *mut c_char)
     -> EcoreComposeState;
}
