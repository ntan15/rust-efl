#![allow(non_camel_case_types)]
extern crate libc;
extern crate evas_sys;
extern crate eina_sys;

use libc::*;
use evas_sys::*;
use eina_sys::*;
/* automatically generated by rust-bindgen */

#[repr(C)]
pub struct EPhysics_Quaternion {
    pub w: c_double,
    pub x: c_double,
    pub y: c_double,
    pub z: c_double,
}
pub enum EPhysics_Shape { }
pub enum EPhysics_Body { }
pub enum EPhysics_Camera { }
pub enum EPhysics_World { }
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EPhysicsCallbackWorldType {
    EphysicsCallbackWorldDel = 0,
    EphysicsCallbackWorldStopped = 1,
    EphysicsCallbackWorldCameraMoved = 2,
    EphysicsCallbackWorldUpdate = 3,
    EphysicsCallbackWorldLast = 4,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EPhysicsWorldSolverMode {
    EphysicsWorldSolverRandmizeOrder = 1,
    EphysicsWorldSolverUseWarmstarting = 4,
    EphysicsWorldSolverUse_2FrictionDirections = 16,
    EphysicsWorldSolverSimd = 256,
}
pub type EPhysicsWorldEventCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                            world: *mut EPhysics_World,
                                                            event_info: *mut c_void)>;
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EPhysicsBodyClothAnchorSide {
    EphysicsBodyClothAnchorSideLeft = 0,
    EphysicsBodyClothAnchorSideRight = 1,
    EphysicsBodyClothAnchorSideTop = 2,
    EphysicsBodyClothAnchorSideBottom = 3,
    EphysicsBodyClothAnchorSideLast = 4,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EPhysicsBodyFace {
    EphysicsBodyBoxFaceMiddleFront = 0,
    EphysicsBodyBoxFaceMiddleBack = 1,
    EphysicsBodyBoxFaceFront = 2,
    EphysicsBodyBoxFaceBack = 3,
    EphysicsBodyBoxFaceLeft = 4,
    EphysicsBodyBoxFaceRight = 5,
    EphysicsBodyBoxFaceTop = 6,
    EphysicsBodyBoxFaceBottom = 7,
    EphysicsBodyClothFaceFront = 8,
    EphysicsBodyClothFaceBack = 9,
    EphysicsBodyCylinderFaceMiddleFront = 10,
    EphysicsBodyCylinderFaceMiddleBack = 11,
    EphysicsBodyCylinderFaceFront = 12,
    EphysicsBodyCylinderFaceBack = 13,
    EphysicsBodyCylinderFaceCurved = 14,
    EphysicsBodySphereFaceFront = 15,
    EphysicsBodySphereFaceBack = 16,
    EphysicsBodyFaceLast = 17,
}
pub enum EPhysics_Body_Collision { }
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EPhysicsCallbackBodyType {
    EphysicsCallbackBodyUpdate = 0,
    EphysicsCallbackBodyCollision = 1,
    EphysicsCallbackBodyDel = 2,
    EphysicsCallbackBodyStopped = 3,
    EphysicsCallbackBodyLast = 4,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EPhysicsBodyMaterial {
    EphysicsBodyMaterialCustom = 0,
    EphysicsBodyMaterialConcrete = 1,
    EphysicsBodyMaterialIron = 2,
    EphysicsBodyMaterialPlastic = 3,
    EphysicsBodyMaterialPolystyrene = 4,
    EphysicsBodyMaterialRubber = 5,
    EphysicsBodyMaterialWood = 6,
    EphysicsBodyMaterialLast = 7,
}
pub type EPhysicsBodyEventCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                           body: *mut EPhysics_Body,
                                                           event_info: *mut c_void)>;
pub enum EPhysics_Constraint { }

#[link(name = "ephysics")]
extern "C" {
    pub fn ephysics_init() -> c_int;
    pub fn ephysics_shutdown() -> c_int;
    pub fn ephysics_quaternion_new() -> *mut EPhysics_Quaternion;
    pub fn ephysics_quaternion_get(quat: *const EPhysics_Quaternion,
                                   x: *mut c_double,
                                   y: *mut c_double,
                                   z: *mut c_double,
                                   w: *mut c_double);
    pub fn ephysics_quaternion_axis_angle_get(quat: *const EPhysics_Quaternion,
                                              nx: *mut c_double,
                                              ny: *mut c_double,
                                              nz: *mut c_double,
                                              a: *mut c_double);
    pub fn ephysics_quaternion_set(quat: *mut EPhysics_Quaternion,
                                   x: c_double,
                                   y: c_double,
                                   z: c_double,
                                   w: c_double);
    pub fn ephysics_quaternion_axis_angle_set(quat: *mut EPhysics_Quaternion,
                                              nx: c_double,
                                              ny: c_double,
                                              nz: c_double,
                                              a: c_double);
    pub fn ephysics_quaternion_euler_set(quat: *mut EPhysics_Quaternion,
                                         yaw: c_double,
                                         pitch: c_double,
                                         roll: c_double);
    pub fn ephysics_quaternion_normalize(quat: *mut EPhysics_Quaternion);
    pub fn ephysics_quaternion_invert(quat: *mut EPhysics_Quaternion);
    pub fn ephysics_quaternion_scale(quat: *mut EPhysics_Quaternion,
                                     scale: c_double);
    pub fn ephysics_quaternion_inverse_scale(quat: *mut EPhysics_Quaternion,
                                             scale: c_double);
    pub fn ephysics_quaternion_sum(quat1: *const EPhysics_Quaternion,
                                   quat2: *const EPhysics_Quaternion,
                                   result: *mut EPhysics_Quaternion)
     -> *mut EPhysics_Quaternion;
    pub fn ephysics_quaternion_diff(quat1: *const EPhysics_Quaternion,
                                    quat2: *const EPhysics_Quaternion,
                                    result: *mut EPhysics_Quaternion)
     -> *mut EPhysics_Quaternion;
    pub fn ephysics_quaternion_multiply(quat1: *const EPhysics_Quaternion,
                                        quat2: *const EPhysics_Quaternion,
                                        result: *mut EPhysics_Quaternion)
     -> *mut EPhysics_Quaternion;
    pub fn ephysics_quaternion_slerp(quat1: *const EPhysics_Quaternion,
                                     quat2: *const EPhysics_Quaternion,
                                     ratio: c_double,
                                     result: *mut EPhysics_Quaternion)
     -> *mut EPhysics_Quaternion;
    pub fn ephysics_quaternion_dot(quat1: *const EPhysics_Quaternion,
                                   quat2: *const EPhysics_Quaternion)
     -> c_double;
    pub fn ephysics_quaternion_angle_get(quat1: *const EPhysics_Quaternion,
                                         quat2: *const EPhysics_Quaternion)
     -> c_double;
    pub fn ephysics_quaternion_length_get(quat: *const EPhysics_Quaternion)
     -> c_double;
    pub fn ephysics_quaternion_length2_get(quat: *const EPhysics_Quaternion)
     -> c_double;
    pub fn ephysics_shape_new() -> *mut EPhysics_Shape;
    pub fn ephysics_shape_del(shape: *mut EPhysics_Shape);
    pub fn ephysics_shape_point_add(shape: *mut EPhysics_Shape,
                                    x: c_double,
                                    y: c_double,
                                    z: c_double) -> EinaBool;
    pub fn ephysics_shape_load(filename: *const c_char)
     -> *mut EPhysics_Shape;
    pub fn ephysics_shape_save(shape: *const EPhysics_Shape,
                               filename: *const c_char)
     -> EinaBool;
    pub fn ephysics_camera_position_set(camera: *mut EPhysics_Camera,
                                        x: EvasCoord, y: EvasCoord);
    pub fn ephysics_camera_position_get(camera: *const EPhysics_Camera,
                                        x: *mut EvasCoord,
                                        y: *mut EvasCoord);
    pub fn ephysics_camera_body_track(camera: *mut EPhysics_Camera,
                                      body: *mut EPhysics_Body,
                                      horizontal: EinaBool,
                                      vertical: EinaBool);
    pub fn ephysics_camera_tracked_body_get(camera: *mut EPhysics_Camera,
                                            body: *mut *mut EPhysics_Body,
                                            horizontal: *mut EinaBool,
                                            vertical: *mut EinaBool);
    pub fn ephysics_camera_perspective_set(camera: *mut EPhysics_Camera,
                                           px: EvasCoord, py: EvasCoord,
                                           z0: EvasCoord, foc: EvasCoord);
    pub fn ephysics_camera_perspective_get(camera: *const EPhysics_Camera,
                                           px: *mut EvasCoord,
                                           py: *mut EvasCoord,
                                           z0: *mut EvasCoord,
                                           foc: *mut EvasCoord);
    pub fn ephysics_camera_perspective_enabled_set(camera: *mut EPhysics_Camera,
                                                   enabled: EinaBool);
    pub fn ephysics_camera_perspective_enabled_get(camera: *const EPhysics_Camera)
     -> EinaBool;
    pub fn ephysics_world_new() -> *mut EPhysics_World;
    pub fn ephysics_world_render_geometry_set(world: *mut EPhysics_World,
                                              x: EvasCoord, y: EvasCoord,
                                              z: EvasCoord, w: EvasCoord,
                                              h: EvasCoord, d: EvasCoord);
    pub fn ephysics_world_render_geometry_get(world: *const EPhysics_World,
                                              x: *mut EvasCoord,
                                              y: *mut EvasCoord,
                                              z: *mut EvasCoord,
                                              w: *mut EvasCoord,
                                              h: *mut EvasCoord,
                                              d: *mut EvasCoord);
    pub fn ephysics_world_serialize(world: *mut EPhysics_World,
                                    path: *const c_char)
     -> EinaBool;
    pub fn ephysics_world_del(world: *mut EPhysics_World);
    pub fn ephysics_world_running_set(world: *mut EPhysics_World,
                                      running: EinaBool);
    pub fn ephysics_world_running_get(world: *const EPhysics_World)
     -> EinaBool;
    pub fn ephysics_world_max_sleeping_time_set(world: *mut EPhysics_World,
                                                sleeping_time: c_double);
    pub fn ephysics_world_max_sleeping_time_get(world: *const EPhysics_World)
     -> c_double;
    pub fn ephysics_world_gravity_set(world: *mut EPhysics_World,
                                      gx: c_double,
                                      gy: c_double,
                                      gz: c_double);
    pub fn ephysics_world_constraint_solver_iterations_set(world: *mut EPhysics_World,
                                                           iterations: c_int);
    pub fn ephysics_world_constraint_solver_iterations_get(world: *const EPhysics_World)
     -> c_int;
    pub fn ephysics_world_constraint_solver_mode_enable_set(world: *mut EPhysics_World,
                                                            solver_mode: EPhysicsWorldSolverMode,
                                                            enable: EinaBool);
    pub fn ephysics_world_constraint_solver_mode_enable_get(world: *const EPhysics_World,
                                                            solver_mode: EPhysicsWorldSolverMode)
     -> EinaBool;
    pub fn ephysics_world_gravity_get(world: *const EPhysics_World,
                                      gx: *mut c_double,
                                      gy: *mut c_double,
                                      gz: *mut c_double);
    pub fn ephysics_world_rate_set(world: *mut EPhysics_World,
                                   rate: c_double);
    pub fn ephysics_world_rate_get(world: *const EPhysics_World)
     -> c_double;
    pub fn ephysics_world_bodies_get(world: *const EPhysics_World)
     -> *mut Eina_List;
    pub fn ephysics_world_camera_get(world: *const EPhysics_World)
     -> *mut EPhysics_Camera;
    pub fn ephysics_world_event_callback_add(world: *mut EPhysics_World,
                                             _type: EPhysicsCallbackWorldType,
                                             func: EPhysicsWorldEventCb,
                                             data: *const c_void);
    pub fn ephysics_world_event_callback_del(world: *mut EPhysics_World,
                                             _type: EPhysicsCallbackWorldType,
                                             func: EPhysicsWorldEventCb)
     -> *mut c_void;
    pub fn ephysics_world_event_callback_del_full(world: *mut EPhysics_World,
                                                  _type: EPhysicsCallbackWorldType,
                                                  func: EPhysicsWorldEventCb,
                                                  data: *mut c_void)
     -> *mut c_void;
    pub fn ephysics_world_linear_slop_set(world: *mut EPhysics_World,
                                          linear_slop: c_double);
    pub fn ephysics_world_linear_slop_get(world: *const EPhysics_World)
     -> c_double;
    pub fn ephysics_world_bodies_outside_top_autodel_set(world: *mut EPhysics_World,
                                                         autodel: EinaBool);
    pub fn ephysics_world_bodies_outside_top_autodel_get(world: *const EPhysics_World)
     -> EinaBool;
    pub fn ephysics_world_bodies_outside_bottom_autodel_set(world: *mut EPhysics_World,
                                                            autodel: EinaBool);
    pub fn ephysics_world_bodies_outside_bottom_autodel_get(world: *const EPhysics_World)
     -> EinaBool;
    pub fn ephysics_world_bodies_outside_right_autodel_set(world: *mut EPhysics_World,
                                                           autodel: EinaBool);
    pub fn ephysics_world_bodies_outside_right_autodel_get(world: *const EPhysics_World)
     -> EinaBool;
    pub fn ephysics_world_bodies_outside_left_autodel_set(world: *mut EPhysics_World,
                                                          autodel: EinaBool);
    pub fn ephysics_world_bodies_outside_left_autodel_get(world: *const EPhysics_World)
     -> EinaBool;
    pub fn ephysics_world_bodies_outside_front_autodel_set(world: *mut EPhysics_World,
                                                           autodel: EinaBool);
    pub fn ephysics_world_bodies_outside_front_autodel_get(world: *const EPhysics_World)
     -> EinaBool;
    pub fn ephysics_world_bodies_outside_back_autodel_set(world: *mut EPhysics_World,
                                                          autodel: EinaBool);
    pub fn ephysics_world_bodies_outside_back_autodel_get(world: *const EPhysics_World)
     -> EinaBool;
    pub fn ephysics_world_simulation_set(world: *mut EPhysics_World,
                                         fixed_time_step: c_double,
                                         max_sub_steps: c_int);
    pub fn ephysics_world_simulation_get(world: *const EPhysics_World,
                                         fixed_time_step: *mut c_double,
                                         max_sub_steps: *mut c_int);
    pub fn ephysics_world_point_light_position_set(world: *mut EPhysics_World,
                                                   lx: EvasCoord,
                                                   ly: EvasCoord,
                                                   lz: EvasCoord);
    pub fn ephysics_world_point_light_color_set(world: *mut EPhysics_World,
                                                lr: c_int,
                                                lg: c_int,
                                                lb: c_int);
    pub fn ephysics_world_ambient_light_color_set(world: *mut EPhysics_World,
                                                  ar: c_int,
                                                  ag: c_int,
                                                  ab: c_int);
    pub fn ephysics_world_point_light_position_get(world: *const EPhysics_World,
                                                   lx: *mut EvasCoord,
                                                   ly: *mut EvasCoord,
                                                   lz: *mut EvasCoord);
    pub fn ephysics_world_point_light_color_get(world: *const EPhysics_World,
                                                lr: *mut c_int,
                                                lg: *mut c_int,
                                                lb: *mut c_int);
    pub fn ephysics_world_ambient_light_color_get(world: *const EPhysics_World,
                                                  ar: *mut c_int,
                                                  ag: *mut c_int,
                                                  ab: *mut c_int);
    pub fn ephysics_world_light_all_bodies_set(world: *mut EPhysics_World,
                                               enable: EinaBool);
    pub fn ephysics_world_light_all_bodies_get(world: *const EPhysics_World)
     -> EinaBool;
    pub fn ephysics_world_stack_enable_set(world: *mut EPhysics_World,
                                           enabled: EinaBool);
    pub fn ephysics_world_stack_enable_get(world: *const EPhysics_World)
     -> EinaBool;
    pub fn ephysics_body_soft_body_hardness_set(body: *mut EPhysics_Body,
                                                hardness: c_double);
    pub fn ephysics_body_soft_body_hardness_get(body: *const EPhysics_Body)
     -> c_double;
    pub fn ephysics_body_soft_body_anchor_hardness_set(body: *mut EPhysics_Body,
                                                       hardness: c_double);
    pub fn ephysics_body_soft_body_anchor_hardness_get(body: *mut EPhysics_Body)
     -> c_double;
    pub fn ephysics_body_soft_body_drag_coefficient_set(body: *mut EPhysics_Body,
                                                        coefficient: c_double);
    pub fn ephysics_body_soft_body_drag_coefficient_get(body: *const EPhysics_Body)
     -> c_double;
    pub fn ephysics_body_soft_body_dragging_set(body: *mut EPhysics_Body,
                                                triangle:
                                                    c_int);
    pub fn ephysics_body_soft_body_dragging_unset(body: *mut EPhysics_Body);
    pub fn ephysics_body_soft_body_triangle_index_get(body: *mut EPhysics_Body,
                                                      x: EvasCoord,
                                                      y: EvasCoord)
     -> c_int;
    pub fn ephysics_body_soft_body_slice_index_get(body: *mut EPhysics_Body,
                                                   slice: *mut Evas_Object)
     -> c_int;
    pub fn ephysics_body_soft_sphere_add(world: *mut EPhysics_World,
                                         granularity: c_int)
     -> *mut EPhysics_Body;
    pub fn ephysics_body_soft_body_triangles_inside_get(body:
                                                            *const EPhysics_Body,
                                                        x: EvasCoord,
                                                        y: EvasCoord,
                                                        z: EvasCoord,
                                                        w: EvasCoord,
                                                        h: EvasCoord,
                                                        d: EvasCoord)
     -> *mut Eina_List;
    pub fn ephysics_body_soft_body_triangle_impulse_apply(body: *mut EPhysics_Body,
                                                          idx: c_int,
                                                          x: c_double,
                                                          y: c_double,
                                                          z: c_double);
    pub fn ephysics_body_soft_body_triangle_list_impulse_apply(body: *mut EPhysics_Body,
                                                               triangles: *mut Eina_List,
                                                               x: c_double,
                                                               y: c_double,
                                                               z: c_double);
    pub fn ephysics_body_soft_body_position_iterations_set(body: *mut EPhysics_Body,
                                                           iterations: c_int);
    pub fn ephysics_body_soft_body_position_iterations_get(body: *mut EPhysics_Body)
     -> c_int;
    pub fn ephysics_body_soft_body_triangle_move(body: *mut EPhysics_Body,
                                                 idx: c_int,
                                                 x: EvasCoord, y: EvasCoord,
                                                 z: EvasCoord);
    pub fn ephysics_body_soft_body_bending_constraints_add(body: *mut EPhysics_Body,
                                                           number: c_int);
    pub fn ephysics_body_sphere_add(world: *mut EPhysics_World)
     -> *mut EPhysics_Body;
    pub fn ephysics_body_cylinder_add(world: *mut EPhysics_World)
     -> *mut EPhysics_Body;
    pub fn ephysics_body_soft_cylinder_add(world: *mut EPhysics_World)
     -> *mut EPhysics_Body;
    pub fn ephysics_body_box_add(world: *mut EPhysics_World)
     -> *mut EPhysics_Body;
    pub fn ephysics_body_soft_box_add(world: *mut EPhysics_World)
     -> *mut EPhysics_Body;
    pub fn ephysics_body_cloth_add(world: *mut EPhysics_World,
                                   rows: c_ushort,
                                   columns: c_ushort)
     -> *mut EPhysics_Body;
    pub fn ephysics_body_cloth_anchor_full_add(body1: *mut EPhysics_Body,
                                               body2: *mut EPhysics_Body,
                                               side: EPhysicsBodyClothAnchorSide);
    pub fn ephysics_body_cloth_anchor_add(body1: *mut EPhysics_Body,
                                          body2: *mut EPhysics_Body,
                                          node: c_int);
    pub fn ephysics_body_cloth_anchor_del(body: *mut EPhysics_Body);
    pub fn ephysics_body_shape_add(world: *mut EPhysics_World,
                                   shape: *mut EPhysics_Shape)
     -> *mut EPhysics_Body;
    pub fn ephysics_body_top_boundary_add(world: *mut EPhysics_World)
     -> *mut EPhysics_Body;
    pub fn ephysics_body_bottom_boundary_add(world: *mut EPhysics_World)
     -> *mut EPhysics_Body;
    pub fn ephysics_body_left_boundary_add(world: *mut EPhysics_World)
     -> *mut EPhysics_Body;
    pub fn ephysics_body_right_boundary_add(world: *mut EPhysics_World)
     -> *mut EPhysics_Body;
    pub fn ephysics_body_front_boundary_add(world: *mut EPhysics_World)
     -> *mut EPhysics_Body;
    pub fn ephysics_body_back_boundary_add(world: *mut EPhysics_World)
     -> *mut EPhysics_Body;
    pub fn ephysics_body_del(body: *mut EPhysics_Body);
    pub fn ephysics_body_world_get(body: *const EPhysics_Body)
     -> *mut EPhysics_World;
    pub fn ephysics_body_evas_object_set(body: *mut EPhysics_Body,
                                         evas_obj: *mut Evas_Object,
                                         use_obj_pos: EinaBool);
    pub fn ephysics_body_evas_object_unset(body: *mut EPhysics_Body)
     -> *mut Evas_Object;
    pub fn ephysics_body_evas_object_get(body: *const EPhysics_Body)
     -> *mut Evas_Object;
    pub fn ephysics_body_face_evas_object_set(body: *mut EPhysics_Body,
                                              face: EPhysicsBodyFace,
                                              evas_obj: *mut Evas_Object,
                                              use_obj_pos: EinaBool);
    pub fn ephysics_body_face_evas_object_get(body: *const EPhysics_Body,
                                              face: EPhysicsBodyFace)
     -> *mut Evas_Object;
    pub fn ephysics_body_face_evas_object_unset(body: *mut EPhysics_Body,
                                                face: EPhysicsBodyFace)
     -> *mut Evas_Object;
    pub fn ephysics_body_resize(body: *mut EPhysics_Body, w: EvasCoord,
                                h: EvasCoord, d: EvasCoord);
    pub fn ephysics_body_move(body: *mut EPhysics_Body, x: EvasCoord,
                              y: EvasCoord, z: EvasCoord);
    pub fn ephysics_body_geometry_set(body: *mut EPhysics_Body, x: EvasCoord,
                                      y: EvasCoord, z: EvasCoord,
                                      w: EvasCoord, h: EvasCoord,
                                      d: EvasCoord);
    pub fn ephysics_body_geometry_get(body: *const EPhysics_Body,
                                      x: *mut EvasCoord, y: *mut EvasCoord,
                                      z: *mut EvasCoord, w: *mut EvasCoord,
                                      h: *mut EvasCoord, d: *mut EvasCoord);
    pub fn ephysics_body_mass_set(body: *mut EPhysics_Body,
                                  mass: c_double);
    pub fn ephysics_body_mass_get(body: *const EPhysics_Body)
     -> c_double;
    pub fn ephysics_body_linear_velocity_set(body: *mut EPhysics_Body,
                                             x: c_double,
                                             y: c_double,
                                             z: c_double);
    pub fn ephysics_body_linear_velocity_get(body: *const EPhysics_Body,
                                             x: *mut c_double,
                                             y: *mut c_double,
                                             z: *mut c_double);
    pub fn ephysics_body_angular_velocity_set(body: *mut EPhysics_Body,
                                              x: c_double,
                                              y: c_double,
                                              z: c_double);
    pub fn ephysics_body_angular_velocity_get(body: *const EPhysics_Body,
                                              x: *mut c_double,
                                              y: *mut c_double,
                                              z: *mut c_double);
    pub fn ephysics_body_sleeping_threshold_set(body: *mut EPhysics_Body,
                                                linear_threshold: c_double,
                                                angular_threshold: c_double);
    pub fn ephysics_body_sleeping_threshold_get(body: *const EPhysics_Body,
                                                linear_threshold: *mut c_double,
                                                angular_threshold: *mut c_double);
    pub fn ephysics_body_stop(body: *mut EPhysics_Body);
    pub fn ephysics_body_damping_set(body: *mut EPhysics_Body,
                                     linear_damping: c_double,
                                     angular_damping: c_double);
    pub fn ephysics_body_damping_get(body: *const EPhysics_Body,
                                     linear_damping: *mut c_double,
                                     angular_damping: *mut c_double);
    pub fn ephysics_body_collision_group_add(body: *mut EPhysics_Body,
                                             group: *const c_char)
     -> EinaBool;
    pub fn ephysics_body_collision_group_del(body: *mut EPhysics_Body,
                                             group: *const c_char)
     -> EinaBool;
    pub fn ephysics_body_collision_group_list_get(body: *const EPhysics_Body)
     -> *const Eina_List;
    pub fn ephysics_body_evas_object_update(body: *mut EPhysics_Body);
    pub fn ephysics_body_event_callback_add(body: *mut EPhysics_Body,
                                            _type: EPhysicsCallbackBodyType,
                                            func: EPhysicsBodyEventCb,
                                            data: *const c_void);
    pub fn ephysics_body_event_callback_del(body: *mut EPhysics_Body,
                                            _type: EPhysicsCallbackBodyType,
                                            func: EPhysicsBodyEventCb)
     -> *mut c_void;
    pub fn ephysics_body_event_callback_del_full(body: *mut EPhysics_Body,
                                                 _type: EPhysicsCallbackBodyType,
                                                 func: EPhysicsBodyEventCb,
                                                 data: *mut c_void)
     -> *mut c_void;
    pub fn ephysics_body_collision_position_get(collision: *const EPhysics_Body_Collision,
                                                x: *mut EvasCoord,
                                                y: *mut EvasCoord,
                                                z: *mut EvasCoord);
    pub fn ephysics_body_collision_contact_body_get(collision: *const EPhysics_Body_Collision)
     -> *mut EPhysics_Body;
    pub fn ephysics_body_restitution_set(body: *mut EPhysics_Body,
                                         restitution: c_double);
    pub fn ephysics_body_restitution_get(body: *const EPhysics_Body)
     -> c_double;
    pub fn ephysics_body_friction_set(body: *mut EPhysics_Body,
                                      friction: c_double);
    pub fn ephysics_body_friction_get(body: *const EPhysics_Body)
     -> c_double;
    pub fn ephysics_body_central_impulse_apply(body: *mut EPhysics_Body,
                                               x: c_double,
                                               y: c_double,
                                               z: c_double);
    pub fn ephysics_body_torque_impulse_apply(body: *mut EPhysics_Body,
                                              pitch: c_double,
                                              yaw: c_double,
                                              roll: c_double);
    pub fn ephysics_body_impulse_apply(body: *mut EPhysics_Body,
                                       x: c_double,
                                       y: c_double,
                                       z: c_double,
                                       pos_x: EvasCoord, pos_y: EvasCoord,
                                       pos_z: EvasCoord);
    pub fn ephysics_body_angular_movement_enable_set(body: *mut EPhysics_Body,
                                                     enable_x: EinaBool,
                                                     enable_y: EinaBool,
                                                     enable_z: EinaBool);
    pub fn ephysics_body_angular_movement_enable_get(body: *const EPhysics_Body,
                                                     enable_x: *mut EinaBool,
                                                     enable_y: *mut EinaBool,
                                                     enable_z: *mut EinaBool);
    pub fn ephysics_body_linear_movement_enable_set(body: *mut EPhysics_Body,
                                                    enable_x: EinaBool,
                                                    enable_y: EinaBool,
                                                    enable_z: EinaBool);
    pub fn ephysics_body_linear_movement_enable_get(body: *const EPhysics_Body,
                                                    enable_x: *mut EinaBool,
                                                    enable_y: *mut EinaBool,
                                                    enable_z: *mut EinaBool);
    pub fn ephysics_body_rotation_get(body: *const EPhysics_Body,
                                      rotation: *mut EPhysics_Quaternion)
     -> *mut EPhysics_Quaternion;
    pub fn ephysics_body_rotation_set(body: *mut EPhysics_Body,
                                      quat: *mut EPhysics_Quaternion);
    pub fn ephysics_body_data_set(body: *mut EPhysics_Body,
                                  data: *mut c_void);
    pub fn ephysics_body_data_get(body: *const EPhysics_Body)
     -> *mut c_void;
    pub fn ephysics_body_central_force_apply(body: *mut EPhysics_Body,
                                             x: c_double,
                                             y: c_double,
                                             z: c_double);
    pub fn ephysics_body_torque_apply(body: *mut EPhysics_Body,
                                      torque_x: c_double,
                                      torque_y: c_double,
                                      torque_z: c_double);
    pub fn ephysics_body_force_apply(body: *mut EPhysics_Body,
                                     x: c_double,
                                     y: c_double,
                                     z: c_double,
                                     pos_x: EvasCoord, pos_y: EvasCoord,
                                     pos_z: EvasCoord);
    pub fn ephysics_body_forces_get(body: *const EPhysics_Body,
                                    x: *mut c_double,
                                    y: *mut c_double,
                                    z: *mut c_double);
    pub fn ephysics_body_torques_get(body: *const EPhysics_Body,
                                     x: *mut c_double,
                                     y: *mut c_double,
                                     z: *mut c_double);
    pub fn ephysics_body_forces_clear(body: *mut EPhysics_Body);
    pub fn ephysics_body_center_mass_get(body: *const EPhysics_Body,
                                         x: *mut c_double,
                                         y: *mut c_double,
                                         z: *mut c_double);
    pub fn ephysics_body_density_set(body: *mut EPhysics_Body,
                                     density: c_double);
    pub fn ephysics_body_density_get(body: *const EPhysics_Body)
     -> c_double;
    pub fn ephysics_body_volume_get(body: *const EPhysics_Body)
     -> c_double;
    pub fn ephysics_body_material_set(body: *mut EPhysics_Body,
                                      material: EPhysicsBodyMaterial);
    pub fn ephysics_body_material_get(body: *const EPhysics_Body)
     -> EPhysicsBodyMaterial;
    pub fn ephysics_body_light_set(body: *mut EPhysics_Body,
                                   enable: EinaBool);
    pub fn ephysics_body_light_get(body: *const EPhysics_Body) -> EinaBool;
    pub fn ephysics_body_back_face_culling_set(body: *mut EPhysics_Body,
                                               enable: EinaBool);
    pub fn ephysics_body_back_face_culling_get(body: *const EPhysics_Body)
     -> EinaBool;
    pub fn ephysics_body_clockwise_get(body: *const EPhysics_Body)
     -> EinaBool;
    pub fn ephysics_constraint_linked_add(body1: *mut EPhysics_Body,
                                          body2: *mut EPhysics_Body)
     -> *mut EPhysics_Constraint;
    pub fn ephysics_constraint_anchor_set(constraint: *mut EPhysics_Constraint,
                                          anchor_b1_x: EvasCoord,
                                          anchor_b1_y: EvasCoord,
                                          anchor_b1_z: EvasCoord,
                                          anchor_b2_x: EvasCoord,
                                          anchor_b2_y: EvasCoord,
                                          anchor_b2_z: EvasCoord);
    pub fn ephysics_constraint_anchor_get(constraint: *const EPhysics_Constraint,
                                          anchor_b1_x: *mut EvasCoord,
                                          anchor_b1_y: *mut EvasCoord,
                                          anchor_b1_z: *mut EvasCoord,
                                          anchor_b2_x: *mut EvasCoord,
                                          anchor_b2_y: *mut EvasCoord,
                                          anchor_b2_z: *mut EvasCoord);
    pub fn ephysics_constraint_add(body: *mut EPhysics_Body)
     -> *mut EPhysics_Constraint;
    pub fn ephysics_constraint_linear_limit_set(constraint: *mut EPhysics_Constraint,
                                                lower_x: EvasCoord,
                                                upper_x: EvasCoord,
                                                lower_y: EvasCoord,
                                                upper_y: EvasCoord,
                                                lower_z: EvasCoord,
                                                upper_z: EvasCoord);
    pub fn ephysics_constraint_linear_limit_get(constraint: *const EPhysics_Constraint,
                                                lower_x: *mut EvasCoord,
                                                upper_x: *mut EvasCoord,
                                                lower_y: *mut EvasCoord,
                                                upper_y: *mut EvasCoord,
                                                lower_z: *mut EvasCoord,
                                                upper_z: *mut EvasCoord);
    pub fn ephysics_constraint_angular_limit_set(constraint: *mut EPhysics_Constraint,
                                                 counter_clock_x: c_double,
                                                 clock_wise_x: c_double,
                                                 counter_clock_y: c_double,
                                                 clock_wise_y: c_double,
                                                 counter_clock_z: c_double,
                                                 clock_wise_z: c_double);
    pub fn ephysics_constraint_angular_limit_get(constraint: *const EPhysics_Constraint,
                                                 counter_clock_x: *mut c_double,
                                                 clock_wise_x: *mut c_double,
                                                 counter_clock_y: *mut c_double,
                                                 clock_wise_y: *mut c_double,
                                                 counter_clock_z: *mut c_double,
                                                 clock_wise_z: *mut c_double);
    pub fn ephysics_constraint_del(constraint: *mut EPhysics_Constraint);
}
