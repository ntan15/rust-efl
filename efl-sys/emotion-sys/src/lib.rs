extern crate libc;
extern crate eina_sys;
extern crate evas_sys;
extern crate eo_sys;

use libc::*;
use eina_sys::*;
use evas_sys::*;
use eo_sys::*;

/* automatically generated by rust-bindgen */

pub type EmotionObject = Eo;
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EmotionModule {
    EMOTION_MODULE_XINE = 0,
    EMOTION_MODULE_GSTREAMER = 1,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EmotionEvent {
    EMOTION_EVENT_MENU1 = 0,
    EMOTION_EVENT_MENU2 = 1,
    EMOTION_EVENT_MENU3 = 2,
    EMOTION_EVENT_MENU4 = 3,
    EMOTION_EVENT_MENU5 = 4,
    EMOTION_EVENT_MENU6 = 5,
    EMOTION_EVENT_MENU7 = 6,
    EMOTION_EVENT_UP = 7,
    EMOTION_EVENT_DOWN = 8,
    EMOTION_EVENT_LEFT = 9,
    EMOTION_EVENT_RIGHT = 10,
    EMOTION_EVENT_SELECT = 11,
    EMOTION_EVENT_NEXT = 12,
    EMOTION_EVENT_PREV = 13,
    EMOTION_EVENT_ANGLE_NEXT = 14,
    EMOTION_EVENT_ANGLE_PREV = 15,
    EMOTION_EVENT_FORCE = 16,
    EMOTION_EVENT_0 = 17,
    EMOTION_EVENT_1 = 18,
    EMOTION_EVENT_2 = 19,
    EMOTION_EVENT_3 = 20,
    EMOTION_EVENT_4 = 21,
    EMOTION_EVENT_5 = 22,
    EMOTION_EVENT_6 = 23,
    EMOTION_EVENT_7 = 24,
    EMOTION_EVENT_8 = 25,
    EMOTION_EVENT_9 = 26,
    EMOTION_EVENT_10 = 27,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EmotionMetaInfo {
    EMOTION_META_INFO_TRACK_TITLE = 0,
    EMOTION_META_INFO_TRACK_ARTIST = 1,
    EMOTION_META_INFO_TRACK_ALBUM = 2,
    EMOTION_META_INFO_TRACK_YEAR = 3,
    EMOTION_META_INFO_TRACK_GENRE = 4,
    EMOTION_META_INFO_TRACK_COMMENT = 5,
    EMOTION_META_INFO_TRACK_DISC_ID = 6,
    EMOTION_META_INFO_TRACK_COUNT = 7,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EmotionVis {
    EMOTION_VIS_NONE = 0,
    EMOTION_VIS_GOOM = 1,
    EMOTION_VIS_LIBVISUAL_BUMPSCOPE = 2,
    EMOTION_VIS_LIBVISUAL_CORONA = 3,
    EMOTION_VIS_LIBVISUAL_DANCING_PARTICLES = 4,
    EMOTION_VIS_LIBVISUAL_GDKPIXBUF = 5,
    EMOTION_VIS_LIBVISUAL_G_FORCE = 6,
    EMOTION_VIS_LIBVISUAL_GOOM = 7,
    EMOTION_VIS_LIBVISUAL_INFINITE = 8,
    EMOTION_VIS_LIBVISUAL_JAKDAW = 9,
    EMOTION_VIS_LIBVISUAL_JESS = 10,
    EMOTION_VIS_LIBVISUAL_LV_ANALYSER = 11,
    EMOTION_VIS_LIBVISUAL_LV_FLOWER = 12,
    EMOTION_VIS_LIBVISUAL_LV_GLTEST = 13,
    EMOTION_VIS_LIBVISUAL_LV_SCOPE = 14,
    EMOTION_VIS_LIBVISUAL_MADSPIN = 15,
    EMOTION_VIS_LIBVISUAL_NEBULUS = 16,
    EMOTION_VIS_LIBVISUAL_OINKSIE = 17,
    EMOTION_VIS_LIBVISUAL_PLASMA = 18,
    EMOTION_VIS_LAST = 19,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EmotionSuspend {
    EMOTION_WAKEUP = 0,
    EMOTION_SLEEP = 1,
    EMOTION_DEEP_SLEEP = 2,
    EMOTION_HIBERNATE = 3,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EmotionAspect {
    EMOTION_ASPECT_KEEP_NONE = 0,
    EMOTION_ASPECT_KEEP_WIDTH = 1,
    EMOTION_ASPECT_KEEP_HEIGHT = 2,
    EMOTION_ASPECT_KEEP_BOTH = 3,
    EMOTION_ASPECT_CROP = 4,
    EMOTION_ASPECT_CUSTOM = 5,
}
#[repr(C)]
pub struct EmotionVersion {
    pub major: c_int,
    pub minor: c_int,
    pub micro: c_int,
    pub revision: c_int,
}
pub enum EmotionWebcam { }

#[link(name = "emotion")]
extern "C" {
    pub static _EMOTION_OBJECT_EVENT_FRAME_DECODE: EoEventDescription;
    pub static _EMOTION_OBJECT_EVENT_POSITION_UPDATE: EoEventDescription;
    pub static _EMOTION_OBJECT_EVENT_LENGTH_CHANGE: EoEventDescription;
    pub static _EMOTION_OBJECT_EVENT_FRAME_RESIZE: EoEventDescription;
    pub static _EMOTION_OBJECT_EVENT_DECODE_STOP: EoEventDescription;
    pub static _EMOTION_OBJECT_EVENT_PLAYBACK_STARTED: EoEventDescription;
    pub static _EMOTION_OBJECT_EVENT_PLAYBACK_FINISHED: EoEventDescription;
    pub static _EMOTION_OBJECT_EVENT_AUDIO_LEVEL_CHANGE: EoEventDescription;
    pub static _EMOTION_OBJECT_EVENT_CHANNELS_CHANGE: EoEventDescription;
    pub static _EMOTION_OBJECT_EVENT_TITLE_CHANGE: EoEventDescription;
    pub static _EMOTION_OBJECT_EVENT_PROGRESS_CHANGE: EoEventDescription;
    pub static _EMOTION_OBJECT_EVENT_REF_CHANGE: EoEventDescription;
    pub static _EMOTION_OBJECT_EVENT_BUTTON_NUM_CHANGE: EoEventDescription;
    pub static _EMOTION_OBJECT_EVENT_BUTTON_CHANGE: EoEventDescription;
    pub static _EMOTION_OBJECT_EVENT_OPEN_DONE: EoEventDescription;
    pub static _EMOTION_OBJECT_EVENT_POSITION_SAVE_SUCCEED:
               EoEventDescription;
    pub static _EMOTION_OBJECT_EVENT_POSITION_SAVE_FAILED:
               EoEventDescription;
    pub static _EMOTION_OBJECT_EVENT_POSITION_LOAD_SUCCEED:
               EoEventDescription;
    pub static _EMOTION_OBJECT_EVENT_POSITION_LOAD_FAILED:
               EoEventDescription;
    pub static mut emotion_version: *mut EmotionVersion;
    pub static mut EMOTION_WEBCAM_UPDATE: c_int;
    pub static mut EMOTION_WEBCAM_ADD: c_int;
    pub static mut EMOTION_WEBCAM_DEL: c_int;
}
#[link(name = "emotion")]
extern "C" {
    pub fn emotion_object_module_option_set(obj: *mut EmotionObject,
                                            opt: *const c_char,
                                            val: *const c_char);
    pub fn emotion_object_init(obj: *mut EmotionObject,
                               module_filename: *const c_char)
     -> EinaBool;
    pub fn emotion_object_class_get() -> *const EoClass;
    pub fn emotion_obj_option_set(opt: *const c_char,
                                  val: *const c_char);
    pub fn emotion_obj_engine_set(module_filename:
                                      *const c_char)
     -> EinaBool;
    pub fn emotion_init() -> EinaBool;
    pub fn emotion_shutdown() -> EinaBool;
    pub fn emotion_object_add(evas: *mut Evas) -> *mut EvasObject;
    pub fn emotion_object_border_set(obj: *mut EvasObject,
                                     l: c_int,
                                     r: c_int,
                                     t: c_int,
                                     b: c_int);
    pub fn emotion_object_border_get(obj: *const EvasObject,
                                     l: *mut c_int,
                                     r: *mut c_int,
                                     t: *mut c_int,
                                     b: *mut c_int);
    pub fn emotion_object_bg_color_set(obj: *mut EvasObject,
                                       r: c_int,
                                       g: c_int,
                                       b: c_int,
                                       a: c_int);
    pub fn emotion_object_bg_color_get(obj: *const EvasObject,
                                       r: *mut c_int,
                                       g: *mut c_int,
                                       b: *mut c_int,
                                       a: *mut c_int);
    pub fn emotion_object_keep_aspect_set(obj: *mut EvasObject,
                                          a: EmotionAspect);
    pub fn emotion_object_keep_aspect_get(obj: *const EvasObject)
     -> EmotionAspect;
    pub fn emotion_object_file_set(obj: *mut EvasObject,
                                   filename: *const c_char)
     -> EinaBool;
    pub fn emotion_object_file_get(obj: *const EvasObject)
     -> *const c_char;
    pub fn emotion_object_play_set(obj: *mut EvasObject, play: EinaBool);
    pub fn emotion_object_play_get(obj: *const EvasObject) -> EinaBool;
    pub fn emotion_object_position_set(obj: *mut EvasObject,
                                       sec: c_double);
    pub fn emotion_object_position_get(obj: *const EvasObject)
     -> c_double;
    pub fn emotion_object_buffer_size_get(obj: *const EvasObject)
     -> c_double;
    pub fn emotion_object_seekable_get(obj: *const EvasObject) -> EinaBool;
    pub fn emotion_object_play_length_get(obj: *const EvasObject)
     -> c_double;
    pub fn emotion_object_play_speed_set(obj: *mut EvasObject,
                                         speed: c_double);
    pub fn emotion_object_play_speed_get(obj: *const EvasObject)
     -> c_double;
    pub fn emotion_object_progress_info_get(obj: *const EvasObject)
     -> *const c_char;
    pub fn emotion_object_progress_status_get(obj: *const EvasObject)
     -> c_double;
    pub fn emotion_object_video_handled_get(obj: *const EvasObject)
     -> EinaBool;
    pub fn emotion_object_audio_handled_get(obj: *const EvasObject)
     -> EinaBool;
    pub fn emotion_object_ratio_get(obj: *const EvasObject)
     -> c_double;
    pub fn emotion_object_size_get(obj: *const EvasObject,
                                   iw: *mut c_int,
                                   ih: *mut c_int);
    pub fn emotion_object_smooth_scale_set(obj: *mut EvasObject,
                                           smooth: EinaBool);
    pub fn emotion_object_smooth_scale_get(obj: *const EvasObject)
     -> EinaBool;
    pub fn emotion_object_event_simple_send(obj: *mut EvasObject,
                                            ev: EmotionEvent);
    pub fn emotion_object_audio_volume_set(obj: *mut EvasObject,
                                           vol: c_double);
    pub fn emotion_object_audio_volume_get(obj: *const EvasObject)
     -> c_double;
    pub fn emotion_object_audio_mute_set(obj: *mut EvasObject,
                                         mute: EinaBool);
    pub fn emotion_object_audio_mute_get(obj: *const EvasObject)
     -> EinaBool;
    pub fn emotion_object_audio_channel_count(obj: *const EvasObject)
     -> c_int;
    pub fn emotion_object_audio_channel_name_get(obj: *const EvasObject,
                                                 channel:
                                                     c_int)
     -> *const c_char;
    pub fn emotion_object_audio_channel_set(obj: *mut EvasObject,
                                            channel: c_int);
    pub fn emotion_object_audio_channel_get(obj: *const EvasObject)
     -> c_int;
    pub fn emotion_object_video_mute_set(obj: *mut EvasObject,
                                         mute: EinaBool);
    pub fn emotion_object_video_mute_get(obj: *const EvasObject)
     -> EinaBool;
    pub fn emotion_object_video_subtitle_file_set(obj: *mut EvasObject,
                                                  filepath: *const c_char);
    pub fn emotion_object_video_subtitle_file_get(obj: *const EvasObject)
     -> *const c_char;
    pub fn emotion_object_video_channel_count(obj: *const EvasObject)
     -> c_int;
    pub fn emotion_object_video_channel_name_get(obj: *const EvasObject,
                                                 channel: c_int)
     -> *const c_char;
    pub fn emotion_object_video_channel_set(obj: *mut EvasObject,
                                            channel: c_int);
    pub fn emotion_object_video_channel_get(obj: *const EvasObject)
     -> c_int;
    pub fn emotion_object_spu_mute_set(obj: *mut EvasObject,
                                       mute: EinaBool);
    pub fn emotion_object_spu_mute_get(obj: *const EvasObject) -> EinaBool;
    pub fn emotion_object_spu_channel_count(obj: *const EvasObject)
     -> c_int;
    pub fn emotion_object_spu_channel_name_get(obj: *const EvasObject,
                                               channel: c_int)
     -> *const c_char;
    pub fn emotion_object_spu_channel_set(obj: *mut EvasObject,
                                          channel: c_int);
    pub fn emotion_object_spu_channel_get(obj: *const EvasObject)
     -> c_int;
    pub fn emotion_object_chapter_count(obj: *const EvasObject)
     -> c_int;
    pub fn emotion_object_chapter_set(obj: *mut EvasObject,
                                      chapter: c_int);
    pub fn emotion_object_chapter_get(obj: *const EvasObject)
     -> c_int;
    pub fn emotion_object_chapter_name_get(obj: *const EvasObject,
                                           chapter: c_int)
     -> *const c_char;
    pub fn emotion_object_eject(obj: *mut EvasObject);
    pub fn emotion_object_title_get(obj: *const EvasObject)
     -> *const c_char;
    pub fn emotion_object_ref_file_get(obj: *const EvasObject)
     -> *const c_char;
    pub fn emotion_object_ref_num_get(obj: *const EvasObject)
     -> c_int;
    pub fn emotion_object_spu_button_count_get(obj: *const EvasObject)
     -> c_int;
    pub fn emotion_object_spu_button_get(obj: *const EvasObject)
     -> c_int;
    pub fn emotion_object_meta_info_get(obj: *const EvasObject,
                                        meta: EmotionMetaInfo)
     -> *const c_char;
    pub fn emotion_object_vis_set(obj: *mut EvasObject,
                                  visualization: EmotionVis);
    pub fn emotion_object_vis_get(obj: *const EvasObject) -> EmotionVis;
    pub fn emotion_object_vis_supported(obj: *const EvasObject,
                                        visualization: EmotionVis)
     -> EinaBool;
    pub fn emotion_object_priority_set(obj: *mut EvasObject,
                                       priority: EinaBool);
    pub fn emotion_object_priority_get(obj: *const EvasObject) -> EinaBool;
    pub fn emotion_object_suspend_set(obj: *mut EvasObject,
                                      state: EmotionSuspend);
    pub fn emotion_object_suspend_get(obj: *mut EvasObject)
     -> EmotionSuspend;
    pub fn emotion_object_last_position_load(obj: *mut EvasObject);
    pub fn emotion_object_last_position_save(obj: *mut EvasObject);
    pub fn emotion_object_extension_may_play_fast_get(file: *const c_char)
     -> EinaBool;
    pub fn emotion_object_extension_may_play_get(file: *const c_char)
     -> EinaBool;
    pub fn emotion_object_image_get(obj: *const EvasObject)
     -> *mut EvasObject;
    pub fn emotion_webcams_get() -> *const EinaList;
    pub fn emotion_webcam_name_get(ew: *const EmotionWebcam)
     -> *const c_char;
    pub fn emotion_webcam_device_get(ew: *const EmotionWebcam)
     -> *const c_char;
}
