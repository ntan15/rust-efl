#![allow(non_camel_case_types)]
extern crate libc;
extern crate eina_sys;
extern crate evas_sys;
extern crate eo_sys;

use libc::*;
use eina_sys::*;
use evas_sys::*;
use eo_sys::*;

/* automatically generated by rust-bindgen */

pub type Emotion_Object = Eo;
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EmotionModule {
    EmotionModuleXine = 0,
    EmotionModuleGstreamer = 1,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EmotionEvent {
    EmotionEventMenu1 = 0,
    EmotionEventMenu2 = 1,
    EmotionEventMenu3 = 2,
    EmotionEventMenu4 = 3,
    EmotionEventMenu5 = 4,
    EmotionEventMenu6 = 5,
    EmotionEventMenu7 = 6,
    EmotionEventUp = 7,
    EmotionEventDown = 8,
    EmotionEventLeft = 9,
    EmotionEventRight = 10,
    EmotionEventSelect = 11,
    EmotionEventNext = 12,
    EmotionEventPrev = 13,
    EmotionEventAngleNext = 14,
    EmotionEventAnglePrev = 15,
    EmotionEventForce = 16,
    EmotionEvent_0 = 17,
    EmotionEvent_1 = 18,
    EmotionEvent_2 = 19,
    EmotionEvent_3 = 20,
    EmotionEvent_4 = 21,
    EmotionEvent_5 = 22,
    EmotionEvent_6 = 23,
    EmotionEvent_7 = 24,
    EmotionEvent_8 = 25,
    EmotionEvent_9 = 26,
    EmotionEvent_10 = 27,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EmotionMetaInfo {
    EmotionMetaInfoTrackTitle = 0,
    EmotionMetaInfoTrackArtist = 1,
    EmotionMetaInfoTrackAlbum = 2,
    EmotionMetaInfoTrackYear = 3,
    EmotionMetaInfoTrackGenre = 4,
    EmotionMetaInfoTrackComment = 5,
    EmotionMetaInfoTrackDiscId = 6,
    EmotionMetaInfoTrackCount = 7,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EmotionVis {
    EmotionVisNone = 0,
    EmotionVisGoom = 1,
    EmotionVisLibvisualBumpscope = 2,
    EmotionVisLibvisualCorona = 3,
    EmotionVisLibvisualDancingParticles = 4,
    EmotionVisLibvisualGdkpixbuf = 5,
    EmotionVisLibvisualGForce = 6,
    EmotionVisLibvisualGoom = 7,
    EmotionVisLibvisualInfinite = 8,
    EmotionVisLibvisualJakdaw = 9,
    EmotionVisLibvisualJess = 10,
    EmotionVisLibvisualLvAnalyser = 11,
    EmotionVisLibvisualLvFlower = 12,
    EmotionVisLibvisualLvGltest = 13,
    EmotionVisLibvisualLvScope = 14,
    EmotionVisLibvisualMadspin = 15,
    EmotionVisLibvisualNebulus = 16,
    EmotionVisLibvisualOinksie = 17,
    EmotionVisLibvisualPlasma = 18,
    EmotionVisLast = 19,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EmotionSuspend {
    EmotionWakeup = 0,
    EmotionSleep = 1,
    EmotionDeepSleep = 2,
    EmotionHibernate = 3,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EmotionAspect {
    EmotionAspectKeepNone = 0,
    EmotionAspectKeepWidth = 1,
    EmotionAspectKeepHeight = 2,
    EmotionAspectKeepBoth = 3,
    EmotionAspectCrop = 4,
    EmotionAspectCustom = 5,
}
#[repr(C)]
pub struct Emotion_Version {
    pub major: c_int,
    pub minor: c_int,
    pub micro: c_int,
    pub revision: c_int,
}
pub enum Emotion_Webcam { }

#[link(name = "emotion")]
extern "C" {
    pub static _EMOTION_OBJECT_EVENT_FRAME_DECODE: Eo_Event_Description;
    pub static _EMOTION_OBJECT_EVENT_POSITION_UPDATE: Eo_Event_Description;
    pub static _EMOTION_OBJECT_EVENT_LENGTH_CHANGE: Eo_Event_Description;
    pub static _EMOTION_OBJECT_EVENT_FRAME_RESIZE: Eo_Event_Description;
    pub static _EMOTION_OBJECT_EVENT_DECODE_STOP: Eo_Event_Description;
    pub static _EMOTION_OBJECT_EVENT_PLAYBACK_STARTED: Eo_Event_Description;
    pub static _EMOTION_OBJECT_EVENT_PLAYBACK_FINISHED: Eo_Event_Description;
    pub static _EMOTION_OBJECT_EVENT_AUDIO_LEVEL_CHANGE: Eo_Event_Description;
    pub static _EMOTION_OBJECT_EVENT_CHANNELS_CHANGE: Eo_Event_Description;
    pub static _EMOTION_OBJECT_EVENT_TITLE_CHANGE: Eo_Event_Description;
    pub static _EMOTION_OBJECT_EVENT_PROGRESS_CHANGE: Eo_Event_Description;
    pub static _EMOTION_OBJECT_EVENT_REF_CHANGE: Eo_Event_Description;
    pub static _EMOTION_OBJECT_EVENT_BUTTON_NUM_CHANGE: Eo_Event_Description;
    pub static _EMOTION_OBJECT_EVENT_BUTTON_CHANGE: Eo_Event_Description;
    pub static _EMOTION_OBJECT_EVENT_OPEN_DONE: Eo_Event_Description;
    pub static _EMOTION_OBJECT_EVENT_POSITION_SAVE_SUCCEED:
               Eo_Event_Description;
    pub static _EMOTION_OBJECT_EVENT_POSITION_SAVE_FAILED:
               Eo_Event_Description;
    pub static _EMOTION_OBJECT_EVENT_POSITION_LOAD_SUCCEED:
               Eo_Event_Description;
    pub static _EMOTION_OBJECT_EVENT_POSITION_LOAD_FAILED:
               Eo_Event_Description;
    pub static mut emotion_version: *mut Emotion_Version;
    pub static mut EMOTION_WEBCAM_UPDATE: c_int;
    pub static mut EMOTION_WEBCAM_ADD: c_int;
    pub static mut EMOTION_WEBCAM_DEL: c_int;
}
#[link(name = "emotion")]
extern "C" {
    pub fn emotion_object_module_option_set(obj: *mut Emotion_Object,
                                            opt: *const c_char,
                                            val: *const c_char);
    pub fn emotion_object_init(obj: *mut Emotion_Object,
                               module_filename: *const c_char)
     -> EinaBool;
    pub fn emotion_object_class_get() -> *const Eo_Class;
    pub fn emotion_obj_option_set(opt: *const c_char,
                                  val: *const c_char);
    pub fn emotion_obj_engine_set(module_filename:
                                      *const c_char)
     -> EinaBool;
    pub fn emotion_init() -> EinaBool;
    pub fn emotion_shutdown() -> EinaBool;
    pub fn emotion_object_add(evas: *mut Evas) -> *mut Evas_Object;
    pub fn emotion_object_border_set(obj: *mut Evas_Object,
                                     l: c_int,
                                     r: c_int,
                                     t: c_int,
                                     b: c_int);
    pub fn emotion_object_border_get(obj: *const Evas_Object,
                                     l: *mut c_int,
                                     r: *mut c_int,
                                     t: *mut c_int,
                                     b: *mut c_int);
    pub fn emotion_object_bg_color_set(obj: *mut Evas_Object,
                                       r: c_int,
                                       g: c_int,
                                       b: c_int,
                                       a: c_int);
    pub fn emotion_object_bg_color_get(obj: *const Evas_Object,
                                       r: *mut c_int,
                                       g: *mut c_int,
                                       b: *mut c_int,
                                       a: *mut c_int);
    pub fn emotion_object_keep_aspect_set(obj: *mut Evas_Object,
                                          a: EmotionAspect);
    pub fn emotion_object_keep_aspect_get(obj: *const Evas_Object)
     -> EmotionAspect;
    pub fn emotion_object_file_set(obj: *mut Evas_Object,
                                   filename: *const c_char)
     -> EinaBool;
    pub fn emotion_object_file_get(obj: *const Evas_Object)
     -> *const c_char;
    pub fn emotion_object_play_set(obj: *mut Evas_Object, play: EinaBool);
    pub fn emotion_object_play_get(obj: *const Evas_Object) -> EinaBool;
    pub fn emotion_object_position_set(obj: *mut Evas_Object,
                                       sec: c_double);
    pub fn emotion_object_position_get(obj: *const Evas_Object)
     -> c_double;
    pub fn emotion_object_buffer_size_get(obj: *const Evas_Object)
     -> c_double;
    pub fn emotion_object_seekable_get(obj: *const Evas_Object) -> EinaBool;
    pub fn emotion_object_play_length_get(obj: *const Evas_Object)
     -> c_double;
    pub fn emotion_object_play_speed_set(obj: *mut Evas_Object,
                                         speed: c_double);
    pub fn emotion_object_play_speed_get(obj: *const Evas_Object)
     -> c_double;
    pub fn emotion_object_progress_info_get(obj: *const Evas_Object)
     -> *const c_char;
    pub fn emotion_object_progress_status_get(obj: *const Evas_Object)
     -> c_double;
    pub fn emotion_object_video_handled_get(obj: *const Evas_Object)
     -> EinaBool;
    pub fn emotion_object_audio_handled_get(obj: *const Evas_Object)
     -> EinaBool;
    pub fn emotion_object_ratio_get(obj: *const Evas_Object)
     -> c_double;
    pub fn emotion_object_size_get(obj: *const Evas_Object,
                                   iw: *mut c_int,
                                   ih: *mut c_int);
    pub fn emotion_object_smooth_scale_set(obj: *mut Evas_Object,
                                           smooth: EinaBool);
    pub fn emotion_object_smooth_scale_get(obj: *const Evas_Object)
     -> EinaBool;
    pub fn emotion_object_event_simple_send(obj: *mut Evas_Object,
                                            ev: EmotionEvent);
    pub fn emotion_object_audio_volume_set(obj: *mut Evas_Object,
                                           vol: c_double);
    pub fn emotion_object_audio_volume_get(obj: *const Evas_Object)
     -> c_double;
    pub fn emotion_object_audio_mute_set(obj: *mut Evas_Object,
                                         mute: EinaBool);
    pub fn emotion_object_audio_mute_get(obj: *const Evas_Object)
     -> EinaBool;
    pub fn emotion_object_audio_channel_count(obj: *const Evas_Object)
     -> c_int;
    pub fn emotion_object_audio_channel_name_get(obj: *const Evas_Object,
                                                 channel:
                                                     c_int)
     -> *const c_char;
    pub fn emotion_object_audio_channel_set(obj: *mut Evas_Object,
                                            channel: c_int);
    pub fn emotion_object_audio_channel_get(obj: *const Evas_Object)
     -> c_int;
    pub fn emotion_object_video_mute_set(obj: *mut Evas_Object,
                                         mute: EinaBool);
    pub fn emotion_object_video_mute_get(obj: *const Evas_Object)
     -> EinaBool;
    pub fn emotion_object_video_subtitle_file_set(obj: *mut Evas_Object,
                                                  filepath: *const c_char);
    pub fn emotion_object_video_subtitle_file_get(obj: *const Evas_Object)
     -> *const c_char;
    pub fn emotion_object_video_channel_count(obj: *const Evas_Object)
     -> c_int;
    pub fn emotion_object_video_channel_name_get(obj: *const Evas_Object,
                                                 channel: c_int)
     -> *const c_char;
    pub fn emotion_object_video_channel_set(obj: *mut Evas_Object,
                                            channel: c_int);
    pub fn emotion_object_video_channel_get(obj: *const Evas_Object)
     -> c_int;
    pub fn emotion_object_spu_mute_set(obj: *mut Evas_Object,
                                       mute: EinaBool);
    pub fn emotion_object_spu_mute_get(obj: *const Evas_Object) -> EinaBool;
    pub fn emotion_object_spu_channel_count(obj: *const Evas_Object)
     -> c_int;
    pub fn emotion_object_spu_channel_name_get(obj: *const Evas_Object,
                                               channel: c_int)
     -> *const c_char;
    pub fn emotion_object_spu_channel_set(obj: *mut Evas_Object,
                                          channel: c_int);
    pub fn emotion_object_spu_channel_get(obj: *const Evas_Object)
     -> c_int;
    pub fn emotion_object_chapter_count(obj: *const Evas_Object)
     -> c_int;
    pub fn emotion_object_chapter_set(obj: *mut Evas_Object,
                                      chapter: c_int);
    pub fn emotion_object_chapter_get(obj: *const Evas_Object)
     -> c_int;
    pub fn emotion_object_chapter_name_get(obj: *const Evas_Object,
                                           chapter: c_int)
     -> *const c_char;
    pub fn emotion_object_eject(obj: *mut Evas_Object);
    pub fn emotion_object_title_get(obj: *const Evas_Object)
     -> *const c_char;
    pub fn emotion_object_ref_file_get(obj: *const Evas_Object)
     -> *const c_char;
    pub fn emotion_object_ref_num_get(obj: *const Evas_Object)
     -> c_int;
    pub fn emotion_object_spu_button_count_get(obj: *const Evas_Object)
     -> c_int;
    pub fn emotion_object_spu_button_get(obj: *const Evas_Object)
     -> c_int;
    pub fn emotion_object_meta_info_get(obj: *const Evas_Object,
                                        meta: EmotionMetaInfo)
     -> *const c_char;
    pub fn emotion_object_vis_set(obj: *mut Evas_Object,
                                  visualization: EmotionVis);
    pub fn emotion_object_vis_get(obj: *const Evas_Object) -> EmotionVis;
    pub fn emotion_object_vis_supported(obj: *const Evas_Object,
                                        visualization: EmotionVis)
     -> EinaBool;
    pub fn emotion_object_priority_set(obj: *mut Evas_Object,
                                       priority: EinaBool);
    pub fn emotion_object_priority_get(obj: *const Evas_Object) -> EinaBool;
    pub fn emotion_object_suspend_set(obj: *mut Evas_Object,
                                      state: EmotionSuspend);
    pub fn emotion_object_suspend_get(obj: *mut Evas_Object)
     -> EmotionSuspend;
    pub fn emotion_object_last_position_load(obj: *mut Evas_Object);
    pub fn emotion_object_last_position_save(obj: *mut Evas_Object);
    pub fn emotion_object_extension_may_play_fast_get(file: *const c_char)
     -> EinaBool;
    pub fn emotion_object_extension_may_play_get(file: *const c_char)
     -> EinaBool;
    pub fn emotion_object_image_get(obj: *const Evas_Object)
     -> *mut Evas_Object;
    pub fn emotion_webcams_get() -> *const Eina_List;
    pub fn emotion_webcam_name_get(ew: *const Emotion_Webcam)
     -> *const c_char;
    pub fn emotion_webcam_device_get(ew: *const Emotion_Webcam)
     -> *const c_char;
}
