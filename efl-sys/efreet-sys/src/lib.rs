extern crate libc;
extern crate eina_sys;

use libc::*;
use eina_sys::*;

/* automatically generated by rust-bindgen */

#[repr(C)]
pub struct EfreetVersion {
    pub major: c_int,
    pub minor: c_int,
    pub micro: c_int,
    pub revision: c_int,
}

#[repr(C)]
pub struct EfreetEventCacheUpdate {
    pub error: c_int,
}

#[repr(C)]
pub struct EfreetIni {
    pub data: *mut EinaHash,
    pub section: *mut EinaHash,
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EfreetIconThemeContext {
    EFREET_ICON_THEME_CONTEXT_NONE = 0,
    EFREET_ICON_THEME_CONTEXT_ACTIONS = 1,
    EFREET_ICON_THEME_CONTEXT_DEVICES = 2,
    EFREET_ICON_THEME_CONTEXT_FILESYSTEMS = 3,
    EFREET_ICON_THEME_CONTEXT_MIMETYPES = 4,
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EfreetIconSizeType {
    EFREET_ICON_SIZE_TYPE_NONE = 0,
    EFREET_ICON_SIZE_TYPE_FIXED = 1,
    EFREET_ICON_SIZE_TYPE_SCALABLE = 2,
    EFREET_ICON_SIZE_TYPE_THRESHOLD = 3,
}

#[repr(C)]
pub struct EfreetIconTheme {
    pub name: EfreetStructUnnamed1,
    pub comment: *const c_char,
    pub example_icon: *const c_char,
    pub paths: *mut EinaList,
    pub inherits: *mut EinaList,
    pub directories: *mut EinaList,
}

#[repr(C)]
pub struct EfreetStructUnnamed1 {
    pub internal: *const c_char,
    pub name: *const c_char,
}

#[repr(C)]
pub struct EfreetIcontThemeDirectory {
    pub name: *const c_char,
    pub context: EfreetIconThemeContext,
    pub _type: EfreetIconSizeType,
    pub size: EfreetStructUnnamed2,
}

#[repr(C)]
pub struct EfreetStructUnnamed2 {
    pub normal: c_uint,
    pub min: c_uint,
    pub max: c_uint,
    pub threshold: c_uint,
}

#[repr(C)]
pub struct EfreetIcon {
    pub path: *const c_char,
    pub name: *const c_char,
    pub embedded_text_rectangle: EfreetStructUnnamed3,
    pub attach_points: *mut EinaList,
    pub ref_count: c_uint,
    pub _bindgen_bitfield_1_: c_uchar,
}

#[repr(C)]
pub struct EfreetStructUnnamed3 {
    pub x0: c_int,
    pub y0: c_int,
    pub x1: c_int,
    pub y1: c_int,
}

#[repr(C)]
pub struct EfreetIconPoint {
    pub x: c_int,
    pub y: c_int,
}

pub type EfreetDesktopCommandCb = Option<unsafe extern "C" fn(data: *mut c_void, 
                                                              desktop: *mut EfreetDesktop,
                                                              command: *mut c_char,
                                                              remaining: c_int)
                              -> *mut c_void>;
pub type EfreetDesktopProgressCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                                 desktop: *mut EfreetDesktop,
                                                                 uri: *mut c_char,
                                                                 total: c_long,
                                                                 current: c_long)
                              -> c_int>;
pub type EfreetDesktopTypeParseCb = Option<unsafe extern "C" fn(desktop: *mut EfreetDesktop,
                                                                ini: *mut EfreetIni)
                              -> *mut c_void>;
pub type EfreetDesktopTypeSaveCb = Option<unsafe extern "C" fn(desktop: *mut EfreetDesktop,
                                                               ini: *mut EfreetIni)>;
pub type EfreetDesktopTypeFreeCb = Option<unsafe extern "C" fn(data: *mut c_void)
                              -> *mut c_void>;
#[repr(C)]
pub struct EfreetDesktopAction {
    pub key: *mut c_char,
    pub name: *mut c_char,
    pub icon: *mut c_char,
    pub exec: *mut c_char,
}

#[repr(C)]
pub struct EfreetDesktop {
    pub _type: c_int,
    pub _ref: c_int,
    pub version: *mut c_char,
    pub orig_path: *mut c_char,
    pub load_time: c_longlong,
    pub name: *mut c_char,
    pub generic_name: *mut c_char,
    pub comment: *mut c_char,
    pub icon: *mut c_char,
    pub try_exec: *mut c_char,
    pub exec: *mut c_char,
    pub path: *mut c_char,
    pub startup_wm_class: *mut c_char,
    pub url: *mut c_char,
    pub only_show_in: *mut EinaList,
    pub not_show_in: *mut EinaList,
    pub categories: *mut EinaList,
    pub mime_types: *mut EinaList,
    pub no_display: c_uchar,
    pub hidden: c_uchar,
    pub terminal: c_uchar,
    pub startup_notify: c_uchar,
    pub _bindgen_bitfield_1_: c_uchar,
    pub x: *mut EinaHash,
    pub type_data: *mut c_void,
    pub dbus_activatable: c_uchar,
    pub actions: *mut EinaList,
    pub implements: *mut EinaList,
    pub keywords: *mut EinaList,
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EfreetMenuEntryType {
    EFREET_MENU_ENTRY_MENU = 0,
    EFREET_MENU_ENTRY_DESKTOP = 1,
    EFREET_MENU_ENTRY_SEPARATOR = 2,
    EFREET_MENU_ENTRY_HEADER = 3,
}

#[repr(C)]
pub struct EfreetMenu {
    pub _type: EfreetMenuEntryType,
    pub id: *const c_char,
    pub name: *const c_char,
    pub icon: *const c_char,
    pub desktop: *mut EfreetDesktop,
    pub entries: *mut EinaList,
    pub references: c_int,
}

pub type EfreetMenuCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                    menu: *mut EfreetMenu)>;
#[repr(C)]
pub struct EfreetUri {
    pub protocol: *const c_char,
    pub hostname: *const c_char,
    pub path: *const c_char,
}

#[link(name = "efreet")]
extern "C" {
    pub static mut efreet_version: *mut EfreetVersion;
    pub static mut EFREET_EVENT_ICON_CACHE_UPDATE: c_int;
    pub static mut EFREET_DESKTOP_TYPE_APPLICATION: c_int;
    pub static mut EFREET_DESKTOP_TYPE_LINK: c_int;
    pub static mut EFREET_DESKTOP_TYPE_DIRECTORY: c_int;
    pub static mut EFREET_EVENT_DESKTOP_CACHE_UPDATE: c_int;
    pub static mut EFREET_EVENT_DESKTOP_CACHE_BUILD: c_int;
}
#[link(name = "efreet")]
extern "C" {
    pub fn efreet_data_home_get() -> *const c_char;
    pub fn efreet_data_dirs_get() -> *mut EinaList;
    pub fn efreet_config_home_get() -> *const c_char;
    pub fn efreet_desktop_dir_get() -> *const c_char;
    pub fn efreet_download_dir_get() -> *const c_char;
    pub fn efreet_templates_dir_get() -> *const c_char;
    pub fn efreet_public_share_dir_get() -> *const c_char;
    pub fn efreet_documents_dir_get() -> *const c_char;
    pub fn efreet_music_dir_get() -> *const c_char;
    pub fn efreet_pictures_dir_get() -> *const c_char;
    pub fn efreet_videos_dir_get() -> *const c_char;
    pub fn efreet_config_dirs_get() -> *mut EinaList;
    pub fn efreet_cache_home_get() -> *const c_char;
    pub fn efreet_runtime_dir_get() -> *const c_char;
    pub fn efreet_hostname_get() -> *const c_char;
    pub fn efreet_ini_new(file: *const c_char)
     -> *mut EfreetIni;
    pub fn efreet_ini_free(ini: *mut EfreetIni);
    pub fn efreet_ini_save(ini: *mut EfreetIni,
                           path: *const c_char)
     -> c_int;
    pub fn efreet_ini_section_set(ini: *mut EfreetIni,
                                  section: *const c_char)
     -> c_int;
    pub fn efreet_ini_section_add(ini: *mut EfreetIni,
                                  section: *const c_char);
    pub fn efreet_ini_string_get(ini: *mut EfreetIni,
                                 key: *const c_char)
     -> *const c_char;
    pub fn efreet_ini_string_set(ini: *mut EfreetIni,
                                 key: *const c_char,
                                 value: *const c_char);
    pub fn efreet_ini_localestring_get(ini: *mut EfreetIni,
                                       key: *const c_char)
     -> *const c_char;
    pub fn efreet_ini_localestring_set(ini: *mut EfreetIni,
                                       key: *const c_char,
                                       value: *const c_char);
    pub fn efreet_ini_boolean_get(ini: *mut EfreetIni,
                                  key: *const c_char)
     -> c_uint;
    pub fn efreet_ini_boolean_set(ini: *mut EfreetIni,
                                  key: *const c_char,
                                  value: c_uint);
    pub fn efreet_ini_int_get(ini: *mut EfreetIni,
                              key: *const c_char)
     -> c_int;
    pub fn efreet_ini_int_set(ini: *mut EfreetIni,
                              key: *const c_char,
                              value: c_int);
    pub fn efreet_ini_double_get(ini: *mut EfreetIni,
                                 key: *const c_char)
     -> c_double;
    pub fn efreet_ini_double_set(ini: *mut EfreetIni,
                                 key: *const c_char,
                                 value: c_double);
    pub fn efreet_ini_key_unset(ini: *mut EfreetIni,
                                key: *const c_char);
    pub fn efreet_icon_user_dir_get() -> *const c_char;
    pub fn efreet_icon_deprecated_user_dir_get()
     -> *const c_char;
    pub fn efreet_icon_extension_add(ext: *const c_char);
    pub fn efreet_icon_extra_list_get() -> *mut *mut EinaList;
    pub fn efreet_icon_extensions_list_get() -> *mut EinaList;
    pub fn efreet_icon_theme_list_get() -> *mut EinaList;
    pub fn efreet_icon_theme_find(theme_name: *const c_char)
     -> *mut EfreetIconTheme;
    pub fn efreet_icon_find(theme_name: *const c_char,
                            icon: *const c_char,
                            size: c_uint) -> *mut EfreetIcon;
    pub fn efreet_icon_list_find(theme_name: *const c_char,
                                 icons: *mut EinaList,
                                 size: c_uint)
     -> *const c_char;
    pub fn efreet_icon_path_find(theme_name: *const c_char,
                                 icon: *const c_char,
                                 size: c_uint)
     -> *const c_char;
    pub fn efreet_icon_free(icon: *mut EfreetIcon);
    pub fn efreet_desktop_get(file: *const c_char)
     -> *mut EfreetDesktop;
    pub fn efreet_desktop_ref(desktop: *mut EfreetDesktop)
     -> c_int;
    pub fn efreet_desktop_empty_new(file: *const c_char)
     -> *mut EfreetDesktop;
    pub fn efreet_desktop_new(file: *const c_char)
     -> *mut EfreetDesktop;
    pub fn efreet_desktop_uncached_new(file: *const c_char)
     -> *mut EfreetDesktop;
    pub fn efreet_desktop_free(desktop: *mut EfreetDesktop);
    pub fn efreet_desktop_save(desktop: *mut EfreetDesktop)
     -> c_int;
    pub fn efreet_desktop_save_as(desktop: *mut EfreetDesktop,
                                  file: *const c_char)
     -> c_int;
    pub fn efreet_desktop_exec(desktop: *mut EfreetDesktop,
                               files: *mut EinaList,
                               data: *mut c_void);
    pub fn efreet_desktop_environment_set(environment:
                                              *const c_char);
    pub fn efreet_desktop_environment_get() -> *const c_char;
    pub fn efreet_desktop_command_progress_get(desktop: *mut EfreetDesktop,
                                               files: *mut EinaList,
                                               cb_command:
                                                   EfreetDesktopCommandCb,
                                               cb_prog:
                                                   EfreetDesktopProgressCb,
                                               data:
                                                   *mut c_void)
     -> *mut c_void;
    pub fn efreet_desktop_command_get(desktop: *mut EfreetDesktop,
                                      files: *mut EinaList,
                                      func: EfreetDesktopCommandCb,
                                      data: *mut c_void)
     -> *mut c_void;
    pub fn efreet_desktop_command_local_get(desktop: *mut EfreetDesktop,
                                            files: *mut EinaList)
     -> *mut EinaList;
    pub fn efreet_desktop_category_count_get(desktop: *mut EfreetDesktop)
     -> c_uint;
    pub fn efreet_desktop_category_add(desktop: *mut EfreetDesktop,
                                       category:
                                           *const c_char);
    pub fn efreet_desktop_category_del(desktop: *mut EfreetDesktop,
                                       category:
                                           *const c_char)
     -> c_int;
    pub fn efreet_desktop_type_add(_type: *const c_char,
                                   parse_func: EfreetDesktopTypeParseCb,
                                   save_func: EfreetDesktopTypeSaveCb,
                                   free_func: EfreetDesktopTypeFreeCb)
     -> c_int;
    pub fn efreet_desktop_type_alias(from_type: c_int,
                                     alias: *const c_char)
     -> c_int;
    pub fn efreet_desktop_type_data_get(desktop: *mut EfreetDesktop)
     -> *mut c_void;
    pub fn efreet_desktop_string_list_parse(string:
                                                *const c_char)
     -> *mut EinaList;
    pub fn efreet_desktop_string_list_join(list: *mut EinaList)
     -> *mut c_char;
    pub fn efreet_desktop_x_field_set(desktop: *mut EfreetDesktop,
                                      key: *const c_char,
                                      data: *const c_char)
     -> EinaBool;
    pub fn efreet_desktop_x_field_get(desktop: *mut EfreetDesktop,
                                      key: *const c_char)
     -> *const c_char;
    pub fn efreet_desktop_x_field_del(desktop: *mut EfreetDesktop,
                                      key: *const c_char)
     -> EinaBool;
    pub fn efreet_menu_kde_legacy_init() -> c_int;
    pub fn efreet_menu_new(name: *const c_char)
     -> *mut EfreetMenu;
    pub fn efreet_menu_file_set(file: *const c_char);
    pub fn efreet_menu_async_get(func: EfreetMenuCb,
                                 data: *const c_void);
    pub fn efreet_menu_get() -> *mut EfreetMenu;
    pub fn efreet_menu_async_parse(path: *const c_char,
                                   func: EfreetMenuCb,
                                   data: *const c_void);
    pub fn efreet_menu_parse(path: *const c_char)
     -> *mut EfreetMenu;
    pub fn efreet_menu_save(menu: *mut EfreetMenu,
                            path: *const c_char)
     -> c_int;
    pub fn efreet_menu_free(menu: *mut EfreetMenu);
    pub fn efreet_menu_ref(menu: *mut EfreetMenu);
    pub fn efreet_menu_unref(menu: *mut EfreetMenu);
    pub fn efreet_menu_desktop_insert(menu: *mut EfreetMenu,
                                      desktop: *mut EfreetDesktop,
                                      pos: c_int)
     -> c_int;
    pub fn efreet_menu_desktop_remove(menu: *mut EfreetMenu,
                                      desktop: *mut EfreetDesktop)
     -> c_int;
    pub fn efreet_menu_dump(menu: *mut EfreetMenu,
                            indent: *const c_char);
    pub fn efreet_util_path_to_file_id(path: *const c_char)
     -> *const c_char;
    pub fn efreet_util_desktop_mime_list(mime: *const c_char)
     -> *mut EinaList;
    pub fn efreet_util_desktop_wm_class_find(wmname:
                                                 *const c_char,
                                             wmclass:
                                                 *const c_char)
     -> *mut EfreetDesktop;
    pub fn efreet_util_desktop_file_id_find(file_id:
                                                *const c_char)
     -> *mut EfreetDesktop;
    pub fn efreet_util_desktop_exec_find(exec: *const c_char)
     -> *mut EfreetDesktop;
    pub fn efreet_util_desktop_name_find(name: *const c_char)
     -> *mut EfreetDesktop;
    pub fn efreet_util_desktop_generic_name_find(generic_name:
                                                     *const c_char)
     -> *mut EfreetDesktop;
    pub fn efreet_util_desktop_name_glob_list(glob:
                                                  *const c_char)
     -> *mut EinaList;
    pub fn efreet_util_desktop_exec_glob_list(glob:
                                                  *const c_char)
     -> *mut EinaList;
    pub fn efreet_util_desktop_generic_name_glob_list(glob:
                                                          *const c_char)
     -> *mut EinaList;
    pub fn efreet_util_desktop_comment_glob_list(glob:
                                                     *const c_char)
     -> *mut EinaList;
    pub fn efreet_util_desktop_categories_list() -> *mut EinaList;
    pub fn efreet_util_desktop_category_list(category:
                                                 *const c_char)
     -> *mut EinaList;
    pub fn efreet_util_menus_find() -> *mut EinaList;
    pub fn efreet_util_desktop_environments_list() -> *mut EinaList;
    pub fn efreet_uri_encode(uri: *mut EfreetUri)
     -> *const c_char;
    pub fn efreet_uri_decode(val: *const c_char)
     -> *mut EfreetUri;
    pub fn efreet_uri_free(uri: *mut EfreetUri);
    pub fn efreet_init() -> c_int;
    pub fn efreet_shutdown() -> c_int;
    pub fn efreet_lang_reset();
}
