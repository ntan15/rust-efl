#![allow(non_camel_case_types)]
extern crate libc;
extern crate eina_sys;

use libc::*;
use eina_sys::*;
/* automatically generated by rust-bindgen */

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EezeUdevEvent {
    EezeUdevEventNone = 240,
    EezeUdevEventAdd = 2,
    EezeUdevEventRemove = 4,
    EezeUdevEventChange = 8,
    EezeUdevEventOnline = 16,
    EezeUdevEventOffline = 32,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EezeUdevType {
    EezeUdevTypeNone = 0,
    EezeUdevTypeKeyboard = 1,
    EezeUdevTypeMouse = 2,
    EezeUdevTypeTouchpad = 3,
    EezeUdevTypeDriveMountable = 4,
    EezeUdevTypeDriveInternal = 5,
    EezeUdevTypeDriveRemovable = 6,
    EezeUdevTypeDriveCdrom = 7,
    EezeUdevTypePowerAc = 8,
    EezeUdevTypePowerBat = 9,
    EezeUdevTypeIsItHotOrIsItColdSensor = 10,
    EezeUdevTypeNet = 11,
    EezeUdevTypeV4l = 12,
    EezeUdevTypeBluetooth = 13,
    EezeUdevTypeJoystick = 14,
    EezeUdevTypeDrm = 15,
    EezeUdevTypeBacklight = 16,
    EezeUdevTypeLeds = 17,
}
pub enum Eeze_Udev_Watch { }
#[repr(C)]
pub struct Eeze_Version {
    pub major: c_int,
    pub minor: c_int,
    pub micro: c_int,
    pub revision: c_int,
}
pub type EezeUdevWatchCb = Option<unsafe extern "C" fn(arg1: *const c_char,
                                                       arg2: EezeUdevEvent,
                                                       arg3: *mut c_void,
                                                       arg4: *mut Eeze_Udev_Watch)>;
#[link(name = "eeze")]
extern "C" {
    pub static mut eeze_version: *mut Eeze_Version;
}
#[link(name = "eeze")]
extern "C" {
    pub fn eeze_init() -> c_int;
    pub fn eeze_shutdown() -> c_int;
    pub fn eeze_udev_get() -> *mut c_void;
    pub fn eeze_udev_find_similar_from_syspath(syspath:
                                                   *const c_char)
     -> *mut Eina_List;
    pub fn eeze_udev_find_unlisted_similar(list: *mut Eina_List)
     -> *mut Eina_List;
    pub fn eeze_udev_find_by_sysattr(sysattr: *const c_char,
                                     value: *const c_char)
     -> *mut Eina_List;
    pub fn eeze_udev_find_by_type(_type: EezeUdevType,
                                  name: *const c_char)
     -> *mut Eina_List;
    pub fn eeze_udev_find_by_filter(subsystem: *const c_char,
                                    _type: *const c_char,
                                    name: *const c_char)
     -> *mut Eina_List;
    pub fn eeze_udev_find_by_subsystem_sysname(subsystem:
                                                   *const c_char,
                                               sysname:
                                                   *const c_char)
     -> *mut Eina_List;
    pub fn eeze_udev_devpath_get_syspath(devpath:
                                             *const c_char)
     -> *const c_char;
    pub fn eeze_udev_syspath_get_parent(syspath:
                                            *const c_char)
     -> *const c_char;
    pub fn eeze_udev_syspath_get_parent_filtered(syspath:
                                                     *const c_char,
                                                 subsystem:
                                                     *const c_char,
                                                 devtype:
                                                     *const c_char)
     -> *mut Eina_Stringshare;
    pub fn eeze_udev_syspath_get_parents(syspath:
                                             *const c_char)
     -> *mut Eina_List;
    pub fn eeze_udev_syspath_get_devpath(syspath:
                                             *const c_char)
     -> *const c_char;
    pub fn eeze_udev_syspath_get_devname(syspath:
                                             *const c_char)
     -> *const c_char;
    pub fn eeze_udev_syspath_get_subsystem(syspath:
                                               *const c_char)
     -> *const c_char;
    pub fn eeze_udev_syspath_check_property(syspath:
                                                *const c_char,
                                            property:
                                                *const c_char,
                                            value:
                                                *const c_char)
     -> EinaBool;
    pub fn eeze_udev_syspath_get_property(syspath:
                                              *const c_char,
                                          property:
                                              *const c_char)
     -> *const c_char;
    pub fn eeze_udev_syspath_get_sysattr(syspath:
                                             *const c_char,
                                         sysattr:
                                             *const c_char)
     -> *const c_char;
    pub fn eeze_udev_syspath_check_sysattr(syspath:
                                               *const c_char,
                                           sysattr:
                                               *const c_char,
                                           value:
                                               *const c_char)
     -> EinaBool;
    pub fn eeze_udev_syspath_set_sysattr(syspath:
                                             *const c_char,
                                         sysattr:
                                             *const c_char,
                                         value: c_double)
     -> EinaBool;
    pub fn eeze_udev_syspath_get_sysattr_list(syspath:
                                                  *const c_char)
     -> *mut Eina_List;
    pub fn eeze_udev_syspath_is_mouse(syspath: *const c_char)
     -> EinaBool;
    pub fn eeze_udev_syspath_is_kbd(syspath: *const c_char)
     -> EinaBool;
    pub fn eeze_udev_syspath_is_touchpad(syspath:
                                             *const c_char)
     -> EinaBool;
    pub fn eeze_udev_syspath_is_joystick(syspath:
                                             *const c_char)
     -> EinaBool;
    pub fn eeze_udev_syspath_get_sysnum(syspath:
                                            *const c_char)
     -> c_int;
    pub fn eeze_udev_walk_check_sysattr(syspath:
                                            *const c_char,
                                        sysattr:
                                            *const c_char,
                                        value: *const c_char)
     -> EinaBool;
    pub fn eeze_udev_walk_get_sysattr(syspath: *const c_char,
                                      sysattr: *const c_char)
     -> *const c_char;
    pub fn eeze_udev_watch_add(_type: EezeUdevType,
                               event: c_int,
                               cb: EezeUdevWatchCb,
                               user_data: *mut c_void)
     -> *mut Eeze_Udev_Watch;
    pub fn eeze_udev_watch_del(watch: *mut Eeze_Udev_Watch)
     -> *mut c_void;
}
#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
    }
}
