#![allow(non_camel_case_types)]
extern crate libc;
extern crate eina_sys;

use libc::*;
use eina_sys::*;
/* automatically generated by rust-bindgen */

#[repr(C)]
pub struct Eldbus_Version {
    pub major: c_int,
    pub minor: c_int,
    pub micro: c_int,
    pub revision: c_int,
}

pub type EldbusFreeCb =Option<unsafe extern "C" fn(data: *mut c_void,
                                                   deadptr: *const c_void)>;
pub enum Eldbus_Connection { }
pub enum Eldbus_Object { }
pub enum Eldbus_Proxy { }
pub enum Eldbus_Message { }
pub enum Eldbus_Message_Iter { }
pub enum Eldbus_Pending { }
pub enum Eldbus_Signal_Handler { }
pub type EldbusMessageCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                       msg: *const Eldbus_Message,
                                                       pending: *mut Eldbus_Pending)>;
pub type EldbusSignalCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                      msg: *const Eldbus_Message)>;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EldbusConnectionType {
    EldbusConnectionTypeUnknown = 0,
    EldbusConnectionTypeSession = 1,
    EldbusConnectionTypeSystem = 2,
    EldbusConnectionTypeStarter = 3,
    EldbusConnectionTypeAddress = 4,
    EldbusConnectionTypeLast = 5,
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EldbusConnectionEventType {
    EldbusConnectionEventDel = 0,
    EldbusConnectionEventDisconnected = 1,
    EldbusConnectionEventLast = 2,
}
pub type EldbusConnectionEventCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                               conn: *mut Eldbus_Connection,
                                                               event_info: *mut c_void)>;
pub type EldbusDictCbGet = Option<unsafe extern "C" fn(data: *mut c_void,
                                                       key: *const c_void,
                                                       var: *mut Eldbus_Message_Iter)>;
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EldbusObjectEventType {
    EldbusObjectEventIfaceAdded = 0,
    EldbusObjectEventIfaceRemoved = 1,
    EldbusObjectEventPropertyChanged = 2,
    EldbusObjectEventPropertyRemoved = 3,
    EldbusObjectEventDel = 4,
    EldbusObjectEventLast = 5,
}

#[repr(C)]
pub struct Eldbus_Object_Event_Interface_Added {
    pub interface: *const c_char,
    pub proxy: *mut Eldbus_Proxy,
}

#[repr(C)]
pub struct Eldbus_Object_Event_Interface_Removed {
    pub interface: *const c_char,
}

#[repr(C)]
pub struct Eldbus_Object_Event_Property_Changed {
    pub interface: *const c_char,
    pub proxy: *mut Eldbus_Proxy,
    pub name: *const c_char,
    pub value: *const Eina_Value,
}

#[repr(C)]
pub struct Eldbus_Object_Event_Property_Removed {
    pub interface: *const c_char,
    pub proxy: *mut Eldbus_Proxy,
    pub name: *const c_char,
}

pub type EldbusObjectEventCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                              obj: *mut Eldbus_Object,
                                                              event_info: *mut c_void)>;
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EldbusProxyEventType {
    EldbusProxyEventPropertyChanged = 0,
    EldbusProxyEventPropertyRemoved = 1,
    EldbusProxyEventDel = 2,
    EldbusProxyEventPropertyLoaded = 3,
    EldbusProxyEventLast = 4,
}

#[repr(C)]
pub struct Eldbus_Proxy_Event_Property_Changed {
    pub name: *const c_char,
    pub proxy: *const Eldbus_Proxy,
    pub value: *const Eina_Value,
}

#[repr(C)]
pub struct Eldbus_Proxy_Event_Property_Loaded {
    pub proxy: *const Eldbus_Proxy,
}

#[repr(C)]
pub struct Eldbus_Proxy_Event_Property_Removed {
    pub interface: *const c_char,
    pub proxy: *const Eldbus_Proxy,
    pub name: *const c_char,
}

pub type EldbusProxyEventCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                          proxy: *mut Eldbus_Proxy,
                                                          event_info: *mut c_void)>;
pub type EldbusNameOwnerChangedCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                                bus: *const c_char,
                                                                old_id: *const c_char,
                                                                new_id: *const c_char)>;
#[repr(C)]
pub struct Eldbus_Arg_Info {
    pub signature: *const c_char,
    pub name: *const c_char,
}
pub enum Eldbus_Service_Interface { }
pub type EldbusMethodCb = Option<unsafe extern "C" fn(iface: *const Eldbus_Service_Interface,
                                                      message: *const Eldbus_Message)
                                                      -> *mut Eldbus_Message>;
pub type EldbusMethodDataCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                          iface: *const Eldbus_Service_Interface,
                                                          message: *const Eldbus_Message)
                                                         -> *mut Eldbus_Message>;
pub type EldbusPropertyGetCb = Option<unsafe extern "C" fn(iface: *const Eldbus_Service_Interface,
                                                           propname: *const c_char,
                                                           iter: *mut Eldbus_Message_Iter,
                                                           request_msg: *const Eldbus_Message,
                                                           error: *mut *mut Eldbus_Message)
                              -> EinaBool>;
pub type EldbusPropertySetCb = Option<unsafe extern "C" fn(iface: *const Eldbus_Service_Interface,
                                                           propname: *const c_char,
                                                           iter: *mut Eldbus_Message_Iter,
                                                           input_msg: *const Eldbus_Message)
                              -> *mut Eldbus_Message>;
#[repr(C)]
pub struct Eldbus_Method {
    pub member: *const c_char,
    pub _in: *const Eldbus_Arg_Info,
    pub out: *const Eldbus_Arg_Info,
    pub cb: EldbusMethodCb,
    pub flags: c_uint,
}

#[repr(C)]
pub struct Eldbus_Method2 {
    pub method: Eldbus_Method,
    pub data: *mut c_void,
}

#[repr(C)]
pub struct Eldbus_Signal {
    pub name: *const c_char,
    pub args: *const Eldbus_Arg_Info,
    pub flags: c_uint,
}

#[repr(C)]
pub struct Eldbus_Property {
    pub name: *const c_char,
    pub _type: *const c_char,
    pub get_func: EldbusPropertyGetCb,
    pub set_func: EldbusPropertySetCb,
    pub flags: c_uint,
}

#[repr(C)]
pub struct Eldbus_Service_Interface_Desc {
    pub interface: *const c_char,
    pub methods: *const Eldbus_Method,
    pub signals: *const Eldbus_Signal,
    pub properties: *const Eldbus_Property,
    pub default_get: EldbusPropertyGetCb,
    pub default_set: EldbusPropertySetCb,
}

#[repr(C)]
pub struct Eldbus_Service_Interface_Desc2 {
    pub description: Eldbus_Service_Interface_Desc,
    pub version: c_int,
    pub methods2: *const Eldbus_Method2,
}

#[link(name = "eldbus")]
extern "C" {
    pub static mut eldbus_version: *const Eldbus_Version;
}

#[link(name = "eldbus")]
extern "C" {
    pub fn eldbus_init() -> c_int;
    pub fn eldbus_shutdown() -> c_int;
    pub fn eldbus_connection_get(_type: EldbusConnectionType)
     -> *mut Eldbus_Connection;
    pub fn eldbus_private_connection_get(_type: EldbusConnectionType)
     -> *mut Eldbus_Connection;
    pub fn eldbus_address_connection_get(address:
                                             *const c_char)
     -> *mut Eldbus_Connection;
    pub fn eldbus_private_address_connection_get(address:
                                                     *const c_char)
     -> *mut Eldbus_Connection;
    pub fn eldbus_connection_ref(conn: *mut Eldbus_Connection)
     -> *mut Eldbus_Connection;
    pub fn eldbus_connection_unref(conn: *mut Eldbus_Connection);
    pub fn eldbus_connection_free_cb_add(conn: *mut Eldbus_Connection,
                                         cb: EldbusFreeCb,
                                         data: *const c_void);
    pub fn eldbus_connection_free_cb_del(conn: *mut Eldbus_Connection,
                                         cb: EldbusFreeCb,
                                         data: *const c_void);
    pub fn eldbus_connection_data_set(conn: *mut Eldbus_Connection,
                                      key: *const c_char,
                                      data: *const c_void);
    pub fn eldbus_connection_data_get(conn: *const Eldbus_Connection,
                                      key: *const c_char)
     -> *mut c_void;
    pub fn eldbus_connection_data_del(conn: *mut Eldbus_Connection,
                                      key: *const c_char)
     -> *mut c_void;
    pub fn eldbus_connection_event_callback_add(conn: *mut Eldbus_Connection,
                                                _type:
                                                    EldbusConnectionEventType,
                                                cb:
                                                    EldbusConnectionEventCb,
                                                cb_data:
                                                    *const c_void);
    pub fn eldbus_connection_event_callback_del(conn: *mut Eldbus_Connection,
                                                _type:
                                                    EldbusConnectionEventType,
                                                cb:
                                                    EldbusConnectionEventCb,
                                                cb_data:
                                                    *const c_void);
    pub fn eldbus_connection_send(conn: *mut Eldbus_Connection,
                                  msg: *mut Eldbus_Message,
                                  cb: EldbusMessageCb,
                                  cb_data: *const c_void,
                                  timeout: c_double)
     -> *mut Eldbus_Pending;
    pub fn eldbus_connection_unique_name_get(conn: *mut Eldbus_Connection)
     -> *const c_char;
    pub fn eldbus_message_ref(msg: *mut Eldbus_Message)
     -> *mut Eldbus_Message;
    pub fn eldbus_message_unref(msg: *mut Eldbus_Message);
    pub fn eldbus_message_path_get(msg: *const Eldbus_Message)
     -> *const c_char;
    pub fn eldbus_message_interface_get(msg: *const Eldbus_Message)
     -> *const c_char;
    pub fn eldbus_message_member_get(msg: *const Eldbus_Message)
     -> *const c_char;
    pub fn eldbus_message_destination_get(msg: *const Eldbus_Message)
     -> *const c_char;
    pub fn eldbus_message_sender_get(msg: *const Eldbus_Message)
     -> *const c_char;
    pub fn eldbus_message_signature_get(msg: *const Eldbus_Message)
     -> *const c_char;
    pub fn eldbus_message_method_call_new(dest: *const c_char,
                                          path: *const c_char,
                                          iface:
                                              *const c_char,
                                          method:
                                              *const c_char)
     -> *mut Eldbus_Message;
    pub fn eldbus_message_signal_new(path: *const c_char,
                                     interface: *const c_char,
                                     name: *const c_char)
     -> *mut Eldbus_Message;
    pub fn eldbus_message_error_new(msg: *const Eldbus_Message,
                                    error_name: *const c_char,
                                    error_msg: *const c_char)
     -> *mut Eldbus_Message;
    pub fn eldbus_message_method_return_new(msg: *const Eldbus_Message)
     -> *mut Eldbus_Message;
    pub fn eldbus_message_error_get(msg: *const Eldbus_Message,
                                    name: *mut *const c_char,
                                    text: *mut *const c_char)
     -> EinaBool;
    pub fn eldbus_message_arguments_get(msg: *const Eldbus_Message,
                                        signature:
                                            *const c_char, ...)
     -> EinaBool;
//    pub fn eldbus_message_arguments_vget(msg: *const Eldbus_Message,
//                                         signature:
//                                             *const c_char,
//                                         ap: va_list) -> EinaBool;
    pub fn eldbus_message_arguments_append(msg: *mut Eldbus_Message,
                                           signature:
                                               *const c_char, ...)
     -> EinaBool;
//    pub fn eldbus_message_arguments_vappend(msg: *mut Eldbus_Message,
/*                                            signature:
                                                *const c_char,
                                            ap: va_list) -> EinaBool;
*/    pub fn eldbus_message_iter_container_new(iter: *mut Eldbus_Message_Iter,
                                             _type: c_int,
                                             contained_signature:
                                                 *const c_char)
     -> *mut Eldbus_Message_Iter;
    pub fn eldbus_message_iter_basic_append(iter: *mut Eldbus_Message_Iter,
                                            _type: c_int, ...)
     -> EinaBool;
    pub fn eldbus_message_iter_arguments_append(iter:
                                                    *mut Eldbus_Message_Iter,
                                                signature:
                                                    *const c_char, ...)
     -> EinaBool;
/*    pub fn eldbus_message_iter_arguments_vappend(iter:
                                                     *mut Eldbus_Message_Iter,
                                                 signature:
                                                     *const c_char,
                                                 ap: va_list) -> EinaBool;
*/    pub fn eldbus_message_iter_fixed_array_append(iter:
                                                      *mut Eldbus_Message_Iter,
                                                  _type:
                                                      c_int,
                                                  array:
                                                      *const c_void,
                                                  size:
                                                      c_uint)
     -> EinaBool;
    pub fn eldbus_message_iter_container_close(iter: *mut Eldbus_Message_Iter,
                                               sub: *mut Eldbus_Message_Iter)
     -> EinaBool;
    pub fn eldbus_message_iter_get(msg: *const Eldbus_Message)
     -> *mut Eldbus_Message_Iter;
    pub fn eldbus_message_iter_basic_get(iter: *mut Eldbus_Message_Iter,
                                         value: *mut c_void);
    pub fn eldbus_message_iter_signature_get(iter: *mut Eldbus_Message_Iter)
     -> *mut c_char;
    pub fn eldbus_message_iter_next(iter: *mut Eldbus_Message_Iter)
     -> EinaBool;
    pub fn eldbus_message_iter_get_and_next(iter: *mut Eldbus_Message_Iter,
                                            signature:
                                                c_char, ...)
     -> EinaBool;
    pub fn eldbus_message_iter_fixed_array_get(iter: *mut Eldbus_Message_Iter,
                                               signature:
                                                   c_int,
                                               value:
                                                   *mut c_void,
                                               n_elements:
                                                   *mut c_int)
     -> EinaBool;
    pub fn eldbus_message_iter_arguments_get(iter: *mut Eldbus_Message_Iter,
                                             signature:
                                                 *const c_char, ...)
     -> EinaBool;
/*    pub fn eldbus_message_iter_arguments_vget(iter: *mut Eldbus_Message_Iter,
                                              signature:
                                                  *const c_char,
                                              ap: va_list) -> EinaBool;
*/    pub fn eldbus_message_iter_del(iter: *mut Eldbus_Message_Iter);
    pub fn eldbus_message_iter_dict_iterate(dict: *mut Eldbus_Message_Iter,
                                            signature:
                                                *const c_char,
                                            cb: EldbusDictCbGet,
                                            data:
                                                *const c_void);
    pub fn eldbus_message_to_eina_value(msg: *const Eldbus_Message)
     -> *mut Eina_Value;
    pub fn eldbus_message_iter_struct_like_to_eina_value(iter:
                                                             *const Eldbus_Message_Iter)
     -> *mut Eina_Value;
    pub fn eldbus_message_from_eina_value(signature:
                                              *const c_char,
                                          msg: *mut Eldbus_Message,
                                          value: *const Eina_Value)
     -> EinaBool;
    pub fn eldbus_signal_handler_add(conn: *mut Eldbus_Connection,
                                     sender: *const c_char,
                                     path: *const c_char,
                                     interface: *const c_char,
                                     member: *const c_char,
                                     cb: EldbusSignalCb,
                                     cb_data: *const c_void)
     -> *mut Eldbus_Signal_Handler;
    pub fn eldbus_signal_handler_ref(handler: *mut Eldbus_Signal_Handler)
     -> *mut Eldbus_Signal_Handler;
    pub fn eldbus_signal_handler_unref(handler: *mut Eldbus_Signal_Handler);
    pub fn eldbus_signal_handler_del(handler: *mut Eldbus_Signal_Handler);
    pub fn eldbus_signal_handler_match_extra_set(sh:
                                                     *mut Eldbus_Signal_Handler, ...)
     -> EinaBool;
/*    pub fn eldbus_signal_handler_match_extra_vset(sh:
                                                      *mut Eldbus_Signal_Handler,
                                                  ap: va_list) -> EinaBool;
*/   pub fn eldbus_signal_handler_free_cb_add(handler:
                                                 *mut Eldbus_Signal_Handler,
                                             cb: EldbusFreeCb,
                                             data:
                                                 *const c_void);
    pub fn eldbus_signal_handler_free_cb_del(handler:
                                                 *mut Eldbus_Signal_Handler,
                                             cb: EldbusFreeCb,
                                             data:
                                                 *const c_void);
    pub fn eldbus_signal_handler_sender_get(handler:
                                                *const Eldbus_Signal_Handler)
     -> *const c_char;
    pub fn eldbus_signal_handler_path_get(handler:
                                              *const Eldbus_Signal_Handler)
     -> *const c_char;
    pub fn eldbus_signal_handler_interface_get(handler:
                                                   *const Eldbus_Signal_Handler)
     -> *const c_char;
    pub fn eldbus_signal_handler_member_get(handler:
                                                *const Eldbus_Signal_Handler)
     -> *const c_char;
    pub fn eldbus_signal_handler_match_get(handler:
                                               *const Eldbus_Signal_Handler)
     -> *const c_char;
    pub fn eldbus_signal_handler_connection_get(handler:
                                                    *const Eldbus_Signal_Handler)
     -> *mut Eldbus_Connection;
    pub fn eldbus_pending_data_set(pending: *mut Eldbus_Pending,
                                   key: *const c_char,
                                   data: *const c_void);
    pub fn eldbus_pending_data_get(pending: *const Eldbus_Pending,
                                   key: *const c_char)
     -> *mut c_void;
    pub fn eldbus_pending_data_del(pending: *mut Eldbus_Pending,
                                   key: *const c_char)
     -> *mut c_void;
    pub fn eldbus_pending_cancel(pending: *mut Eldbus_Pending);
    pub fn eldbus_pending_destination_get(pending: *const Eldbus_Pending)
     -> *const c_char;
    pub fn eldbus_pending_path_get(pending: *const Eldbus_Pending)
     -> *const c_char;
    pub fn eldbus_pending_interface_get(pending: *const Eldbus_Pending)
     -> *const c_char;
    pub fn eldbus_pending_method_get(pending: *const Eldbus_Pending)
     -> *const c_char;
    pub fn eldbus_pending_free_cb_add(pending: *mut Eldbus_Pending,
                                      cb: EldbusFreeCb,
                                      data: *const c_void);
    pub fn eldbus_pending_free_cb_del(pending: *mut Eldbus_Pending,
                                      cb: EldbusFreeCb,
                                      data: *const c_void);
    pub fn eldbus_object_get(conn: *mut Eldbus_Connection,
                             bus: *const c_char,
                             path: *const c_char)
     -> *mut Eldbus_Object;
    pub fn eldbus_object_ref(obj: *mut Eldbus_Object) -> *mut Eldbus_Object;
    pub fn eldbus_object_unref(obj: *mut Eldbus_Object);
    pub fn eldbus_object_free_cb_add(obj: *mut Eldbus_Object,
                                     cb: EldbusFreeCb,
                                     data: *const c_void);
    pub fn eldbus_object_free_cb_del(obj: *mut Eldbus_Object,
                                     cb: EldbusFreeCb,
                                     data: *const c_void);
    pub fn eldbus_object_event_callback_add(obj: *mut Eldbus_Object,
                                            _type: EldbusObjectEventType,
                                            cb: EldbusObjectEventCb,
                                            cb_data:
                                                *const c_void);
    pub fn eldbus_object_event_callback_del(obj: *mut Eldbus_Object,
                                            _type: EldbusObjectEventType,
                                            cb: EldbusObjectEventCb,
                                            cb_data:
                                                *const c_void);
    pub fn eldbus_object_connection_get(obj: *const Eldbus_Object)
     -> *mut Eldbus_Connection;
    pub fn eldbus_object_bus_name_get(obj: *const Eldbus_Object)
     -> *const c_char;
    pub fn eldbus_object_path_get(obj: *const Eldbus_Object)
     -> *const c_char;
    pub fn eldbus_object_send(obj: *mut Eldbus_Object,
                              msg: *mut Eldbus_Message, cb: EldbusMessageCb,
                              cb_data: *const c_void,
                              timeout: c_double)
     -> *mut Eldbus_Pending;
    pub fn eldbus_object_signal_handler_add(obj: *mut Eldbus_Object,
                                            interface:
                                                *const c_char,
                                            member:
                                                *const c_char,
                                            cb: EldbusSignalCb,
                                            cb_data:
                                                *const c_void)
     -> *mut Eldbus_Signal_Handler;
    pub fn eldbus_object_method_call_new(obj: *mut Eldbus_Object,
                                         interface:
                                             *const c_char,
                                         member:
                                             *const c_char)
     -> *mut Eldbus_Message;
    pub fn eldbus_proxy_get(obj: *mut Eldbus_Object,
                            interface: *const c_char)
     -> *mut Eldbus_Proxy;
    pub fn eldbus_proxy_ref(proxy: *mut Eldbus_Proxy) -> *mut Eldbus_Proxy;
    pub fn eldbus_proxy_unref(proxy: *mut Eldbus_Proxy);
    pub fn eldbus_proxy_object_get(proxy: *const Eldbus_Proxy)
     -> *mut Eldbus_Object;
    pub fn eldbus_proxy_interface_get(proxy: *const Eldbus_Proxy)
     -> *const c_char;
    pub fn eldbus_proxy_data_set(proxy: *mut Eldbus_Proxy,
                                 key: *const c_char,
                                 data: *const c_void);
    pub fn eldbus_proxy_data_get(proxy: *const Eldbus_Proxy,
                                 key: *const c_char)
     -> *mut c_void;
    pub fn eldbus_proxy_data_del(proxy: *mut Eldbus_Proxy,
                                 key: *const c_char)
     -> *mut c_void;
    pub fn eldbus_proxy_free_cb_add(proxy: *mut Eldbus_Proxy,
                                    cb: EldbusFreeCb,
                                    data: *const c_void);
    pub fn eldbus_proxy_free_cb_del(proxy: *mut Eldbus_Proxy,
                                    cb: EldbusFreeCb,
                                    data: *const c_void);
    pub fn eldbus_proxy_method_call_new(proxy: *mut Eldbus_Proxy,
                                        member: *const c_char)
     -> *mut Eldbus_Message;
    pub fn eldbus_proxy_send(proxy: *mut Eldbus_Proxy,
                             msg: *mut Eldbus_Message, cb: EldbusMessageCb,
                             cb_data: *const c_void,
                             timeout: c_double)
     -> *mut Eldbus_Pending;
    pub fn eldbus_proxy_send_and_block(proxy: *mut Eldbus_Proxy,
                                       msg: *mut Eldbus_Message,
                                       timeout: c_double)
     -> *mut Eldbus_Message;
    pub fn eldbus_proxy_call(proxy: *mut Eldbus_Proxy,
                             member: *const c_char,
                             cb: EldbusMessageCb,
                             cb_data: *const c_void,
                             timeout: c_double,
                             signature: *const c_char, ...)
     -> *mut Eldbus_Pending;
/*    pub fn eldbus_proxy_vcall(proxy: *mut Eldbus_Proxy,
                              member: *const c_char,
                              cb: EldbusMessageCb,
                              cb_data: *const c_void,
                              timeout: c_double,
                              signature: *const c_char,
                              ap: va_list) -> *mut Eldbus_Pending;
*/    pub fn eldbus_proxy_signal_handler_add(proxy: *mut Eldbus_Proxy,
                                           member:
                                               *const c_char,
                                           cb: EldbusSignalCb,
                                           cb_data:
                                               *const c_void)
     -> *mut Eldbus_Signal_Handler;
    pub fn eldbus_proxy_event_callback_add(proxy: *mut Eldbus_Proxy,
                                           _type: EldbusProxyEventType,
                                           cb: EldbusProxyEventCb,
                                           cb_data:
                                               *const c_void);
    pub fn eldbus_proxy_event_callback_del(proxy: *mut Eldbus_Proxy,
                                           _type: EldbusProxyEventType,
                                           cb: EldbusProxyEventCb,
                                           cb_data:
                                               *const c_void);
    pub fn eldbus_name_request(conn: *mut Eldbus_Connection,
                               bus: *const c_char,
                               flags: c_uint,
                               cb: EldbusMessageCb,
                               cb_data: *const c_void)
     -> *mut Eldbus_Pending;
    pub fn eldbus_name_release(conn: *mut Eldbus_Connection,
                               bus: *const c_char,
                               cb: EldbusMessageCb,
                               cb_data: *const c_void)
     -> *mut Eldbus_Pending;
    pub fn eldbus_name_owner_get(conn: *mut Eldbus_Connection,
                                 bus: *const c_char,
                                 cb: EldbusMessageCb,
                                 cb_data: *const c_void)
     -> *mut Eldbus_Pending;
    pub fn eldbus_name_owner_has(conn: *mut Eldbus_Connection,
                                 bus: *const c_char,
                                 cb: EldbusMessageCb,
                                 cb_data: *const c_void)
     -> *mut Eldbus_Pending;
    pub fn eldbus_names_list(conn: *mut Eldbus_Connection,
                             cb: EldbusMessageCb,
                             cb_data: *const c_void)
     -> *mut Eldbus_Pending;
    pub fn eldbus_names_activatable_list(conn: *mut Eldbus_Connection,
                                         cb: EldbusMessageCb,
                                         cb_data:
                                             *const c_void)
     -> *mut Eldbus_Pending;
    pub fn eldbus_hello(conn: *mut Eldbus_Connection, cb: EldbusMessageCb,
                        cb_data: *const c_void)
     -> *mut Eldbus_Pending;
    pub fn eldbus_name_start(conn: *mut Eldbus_Connection,
                             bus: *const c_char,
                             flags: c_uint,
                             cb: EldbusMessageCb,
                             cb_data: *const c_void)
     -> *mut Eldbus_Pending;
    pub fn eldbus_name_owner_changed_callback_add(conn:
                                                      *mut Eldbus_Connection,
                                                  bus:
                                                      *const c_char,
                                                  cb:
                                                      EldbusNameOwnerChangedCb,
                                                  cb_data:
                                                      *const c_void,
                                                  allow_initial_call:
                                                      EinaBool);
    pub fn eldbus_name_owner_changed_callback_del(conn:
                                                      *mut Eldbus_Connection,
                                                  bus:
                                                      *const c_char,
                                                  cb:
                                                      EldbusNameOwnerChangedCb,
                                                  cb_data:
                                                      *const c_void);
    pub fn eldbus_object_peer_ping(obj: *mut Eldbus_Object,
                                   cb: EldbusMessageCb,
                                   data: *const c_void)
     -> *mut Eldbus_Pending;
    pub fn eldbus_object_peer_machine_id_get(obj: *mut Eldbus_Object,
                                             cb: EldbusMessageCb,
                                             data:
                                                 *const c_void)
     -> *mut Eldbus_Pending;
    pub fn eldbus_object_introspect(obj: *mut Eldbus_Object,
                                    cb: EldbusMessageCb,
                                    data: *const c_void)
     -> *mut Eldbus_Pending;
    pub fn eldbus_proxy_properties_monitor(proxy: *mut Eldbus_Proxy,
                                           enable: EinaBool) -> EinaBool;
    pub fn eldbus_proxy_property_get(proxy: *mut Eldbus_Proxy,
                                     name: *const c_char,
                                     cb: EldbusMessageCb,
                                     data: *const c_void)
     -> *mut Eldbus_Pending;
    pub fn eldbus_proxy_property_set(proxy: *mut Eldbus_Proxy,
                                     name: *const c_char,
                                     sig: *const c_char,
                                     value: *const c_void,
                                     cb: EldbusMessageCb,
                                     data: *const c_void)
     -> *mut Eldbus_Pending;
    pub fn eldbus_proxy_property_get_all(proxy: *mut Eldbus_Proxy,
                                         cb: EldbusMessageCb,
                                         data: *const c_void)
     -> *mut Eldbus_Pending;
    pub fn eldbus_proxy_properties_changed_callback_add(proxy:
                                                            *mut Eldbus_Proxy,
                                                        cb: EldbusSignalCb,
                                                        data:
                                                            *const c_void)
     -> *mut Eldbus_Signal_Handler;
    pub fn eldbus_proxy_property_local_get(proxy: *mut Eldbus_Proxy,
                                           name:
                                               *const c_char)
     -> *mut Eina_Value;
    pub fn eldbus_proxy_property_local_get_all(proxy: *mut Eldbus_Proxy)
     -> *const Eina_Hash;
    pub fn eldbus_object_managed_objects_get(obj: *mut Eldbus_Object,
                                             cb: EldbusMessageCb,
                                             data:
                                                 *const c_void)
     -> *mut Eldbus_Pending;
    pub fn eldbus_object_manager_interfaces_added(obj: *mut Eldbus_Object,
                                                  cb: EldbusSignalCb,
                                                  cb_data:
                                                      *const c_void)
     -> *mut Eldbus_Signal_Handler;
    pub fn eldbus_object_manager_interfaces_removed(obj: *mut Eldbus_Object,
                                                    cb: EldbusSignalCb,
                                                    cb_data:
                                                        *const c_void)
     -> *mut Eldbus_Signal_Handler;
    pub fn eldbus_service_interface_register(conn: *mut Eldbus_Connection,
                                             path:
                                                 *const c_char,
                                             desc:
                                                 *const Eldbus_Service_Interface_Desc)
     -> *mut Eldbus_Service_Interface;
    pub fn eldbus_service_interface_fallback_register(conn:
                                                          *mut Eldbus_Connection,
                                                      path:
                                                          *const c_char,
                                                      desc:
                                                          *const Eldbus_Service_Interface_Desc)
     -> *mut Eldbus_Service_Interface;
    pub fn eldbus_service_interface_register2(conn: *mut Eldbus_Connection,
                                              path:
                                                  *const c_char,
                                              desc:
                                                  *const Eldbus_Service_Interface_Desc2)
     -> *mut Eldbus_Service_Interface;
    pub fn eldbus_service_interface_fallback_register2(conn:
                                                           *mut Eldbus_Connection,
                                                       path:
                                                           *const c_char,
                                                       desc:
                                                           *const Eldbus_Service_Interface_Desc2)
     -> *mut Eldbus_Service_Interface;
    pub fn eldbus_service_interface_unregister(iface:
                                                   *mut Eldbus_Service_Interface);
    pub fn eldbus_service_object_unregister(iface:
                                                *mut Eldbus_Service_Interface);
    pub fn eldbus_service_connection_get(iface:
                                             *const Eldbus_Service_Interface)
     -> *mut Eldbus_Connection;
    pub fn eldbus_service_object_path_get(iface:
                                              *const Eldbus_Service_Interface)
     -> *const c_char;
    pub fn eldbus_service_signal_emit(iface: *const Eldbus_Service_Interface,
                                      signal_id: c_uint, ...)
     -> EinaBool;
    pub fn eldbus_service_signal_new(iface: *const Eldbus_Service_Interface,
                                     signal_id: c_uint)
     -> *mut Eldbus_Message;
    pub fn eldbus_service_signal_send(iface: *const Eldbus_Service_Interface,
                                      signal_msg: *mut Eldbus_Message)
     -> EinaBool;
    pub fn eldbus_service_object_data_set(iface:
                                              *mut Eldbus_Service_Interface,
                                          key: *const c_char,
                                          data:
                                              *const c_void);
    pub fn eldbus_service_object_data_get(iface:
                                              *const Eldbus_Service_Interface,
                                          key: *const c_char)
     -> *mut c_void;
    pub fn eldbus_service_object_data_del(iface:
                                              *mut Eldbus_Service_Interface,
                                          key: *const c_char)
     -> *mut c_void;
    pub fn eldbus_service_property_changed(iface:
                                               *const Eldbus_Service_Interface,
                                           name:
                                               *const c_char)
     -> EinaBool;
    pub fn eldbus_service_property_invalidate_set(iface:
                                                      *const Eldbus_Service_Interface,
                                                  name:
                                                      *const c_char,
                                                  is_invalidate: EinaBool)
     -> EinaBool;
    pub fn eldbus_service_object_manager_attach(iface:
                                                    *mut Eldbus_Service_Interface)
     -> EinaBool;
    pub fn eldbus_service_object_manager_detach(iface:
                                                    *mut Eldbus_Service_Interface)
     -> EinaBool;
}
#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
    }
}
