#![allow(non_camel_case_types)]
extern crate libc;
extern crate eina_sys;
extern crate ethumb_sys;

use eina_sys::*;
use ethumb_sys::*;
use libc::*;
/* automatically generated by rust-bindgen */

pub enum Ethumb_Client { }
pub enum Ethumb_Exists { }
pub type EthumbClientConnectCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                             client: *mut Ethumb_Client,
                                                             success: EinaBool)>;
pub type EthumbClientDieCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                         client: *mut Ethumb_Client)>;
pub type EthumbClientGenerateCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                              client: *mut Ethumb_Client,
                                                              id: c_int,
                                                              file: *const c_char,
                                                              key: *const c_char,
                                                              thumb_path: *const c_char,
                                                              thumb_key: *const c_char,
                                                              success: EinaBool)>;
pub type EthumbClientThumbExistsCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                                 client: *mut Ethumb_Client,
                                                                 thread: *mut Ethumb_Exists,
                                                                 exists: EinaBool)>;
pub type EthumbClientGenerateCancelCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                                    success: EinaBool)>;
pub type EthumbClientAsyncDoneCb = Option<unsafe extern "C" fn(ethumbd: *mut Ethumb_Client,
                                                               thumb_path: *const c_char,
                                                               thumb_key: *const c_char,
                                                               data: *mut c_void)>;
pub type EthumbClientAsyncErrorCb = Option<unsafe extern "C" fn(ethumbd: *mut Ethumb_Client,
                                                                data: *mut c_void)>;
pub enum Ethumb_Client_Async { }

#[link(name = "ethumb_client")]
extern "C" {
    pub fn ethumb_client_init() -> c_int;
    pub fn ethumb_client_shutdown() -> c_int;
    pub fn ethumb_client_connect(connect_cb: EthumbClientConnectCb,
                                 data: *const c_void,
                                 free_data: EinaFreeCb)
     -> *mut Ethumb_Client;
    pub fn ethumb_client_disconnect(client: *mut Ethumb_Client);
    pub fn ethumb_client_on_server_die_callback_set(client:
                                                        *mut Ethumb_Client,
                                                    server_die_cb:
                                                        EthumbClientDieCb,
                                                    data:
                                                        *const c_void,
                                                    free_data: EinaFreeCb);
    pub fn ethumb_client_fdo_set(client: *mut Ethumb_Client,
                                 s: EthumbThumbFdoSize);
    pub fn ethumb_client_size_set(client: *mut Ethumb_Client,
                                  tw: c_int,
                                  th: c_int);
    pub fn ethumb_client_size_get(client: *const Ethumb_Client,
                                  tw: *mut c_int,
                                  th: *mut c_int);
    pub fn ethumb_client_format_set(client: *mut Ethumb_Client,
                                    f: EthumbThumbFormat);
    pub fn ethumb_client_format_get(client: *const Ethumb_Client)
     -> EthumbThumbFormat;
    pub fn ethumb_client_aspect_set(client: *mut Ethumb_Client,
                                    a: EthumbThumbAspect);
    pub fn ethumb_client_aspect_get(client: *const Ethumb_Client)
     -> EthumbThumbAspect;
    pub fn ethumb_client_orientation_set(client: *mut Ethumb_Client,
                                         o: EthumbThumbOrientation);
    pub fn ethumb_client_orientation_get(client: *const Ethumb_Client)
     -> EthumbThumbOrientation;
    pub fn ethumb_client_crop_align_set(client: *mut Ethumb_Client,
                                        x: c_float,
                                        y: c_float);
    pub fn ethumb_client_crop_align_get(client: *const Ethumb_Client,
                                        x: *mut c_float,
                                        y: *mut c_float);
    pub fn ethumb_client_quality_set(client: *mut Ethumb_Client,
                                     quality: c_int);
    pub fn ethumb_client_quality_get(client: *const Ethumb_Client)
     -> c_int;
    pub fn ethumb_client_compress_set(client: *mut Ethumb_Client,
                                      compress: c_int);
    pub fn ethumb_client_compress_get(client: *const Ethumb_Client)
     -> c_int;
    pub fn ethumb_client_frame_set(client: *mut Ethumb_Client,
                                   file: *const c_char,
                                   group: *const c_char,
                                   swallow: *const c_char)
     -> EinaBool;
    pub fn ethumb_client_dir_path_set(client: *mut Ethumb_Client,
                                      path: *const c_char);
    pub fn ethumb_client_dir_path_get(client: *const Ethumb_Client)
     -> *const c_char;
    pub fn ethumb_client_category_set(client: *mut Ethumb_Client,
                                      category:
                                          *const c_char);
    pub fn ethumb_client_category_get(client: *const Ethumb_Client)
     -> *const c_char;
    pub fn ethumb_client_video_time_set(client: *mut Ethumb_Client,
                                        time: c_float);
    pub fn ethumb_client_video_start_set(client: *mut Ethumb_Client,
                                         start: c_float);
    pub fn ethumb_client_video_interval_set(client: *mut Ethumb_Client,
                                            interval:
                                                c_float);
    pub fn ethumb_client_video_ntimes_set(client: *mut Ethumb_Client,
                                          ntimes: c_uint);
    pub fn ethumb_client_video_fps_set(client: *mut Ethumb_Client,
                                       fps: c_uint);
    pub fn ethumb_client_document_page_set(client: *mut Ethumb_Client,
                                           page: c_uint);
    pub fn ethumb_client_ethumb_setup(client: *mut Ethumb_Client);
    pub fn ethumb_client_thumb_path_set(client: *mut Ethumb_Client,
                                        path: *const c_char,
                                        key: *const c_char);
    pub fn ethumb_client_thumb_path_get(client: *mut Ethumb_Client,
                                        path:
                                            *mut *const c_char,
                                        key:
                                            *mut *const c_char);
    pub fn ethumb_client_file_set(client: *mut Ethumb_Client,
                                  path: *const c_char,
                                  key: *const c_char)
     -> EinaBool;
    pub fn ethumb_client_file_get(client: *mut Ethumb_Client,
                                  path: *mut *const c_char,
                                  key: *mut *const c_char);
    pub fn ethumb_client_file_free(client: *mut Ethumb_Client);
    pub fn ethumb_client_thumb_exists(client: *mut Ethumb_Client,
                                      exists_cb:
                                          EthumbClientThumbExistsCb,
                                      data: *const c_void)
     -> *mut Ethumb_Exists;
    pub fn ethumb_client_thumb_exists_cancel(exists: *mut Ethumb_Exists);
    pub fn ethumb_client_thumb_exists_check(exists: *mut Ethumb_Exists)
     -> EinaBool;
    pub fn ethumb_client_generate(client: *mut Ethumb_Client,
                                  generated_cb: EthumbClientGenerateCb,
                                  data: *const c_void,
                                  free_data: EinaFreeCb)
     -> c_int;
    pub fn ethumb_client_generate_cancel(client: *mut Ethumb_Client,
                                         id: c_int,
                                         cancel_cb:
                                             EthumbClientGenerateCancelCb,
                                         data: *const c_void,
                                         free_data: EinaFreeCb);
    pub fn ethumb_client_generate_cancel_all(client: *mut Ethumb_Client);
    pub fn ethumb_client_thumb_async_get(client: *mut Ethumb_Client,
                                         done: EthumbClientAsyncDoneCb,
                                         error: EthumbClientAsyncErrorCb,
                                         data: *const c_void)
     -> *mut Ethumb_Client_Async;
    pub fn ethumb_client_thumb_async_cancel(client: *mut Ethumb_Client,
                                            request:
                                                *mut Ethumb_Client_Async);
}
#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
    }
}
