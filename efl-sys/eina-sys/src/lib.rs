extern crate libc;

use libc::*;

/* automatically generated by rust-bindgen */

pub type EinaBool = c_uchar;
pub const EINA_TRUE: EinaBool = 1;
pub const EINA_FALSE: EinaBool = 0;
pub type EinaCompareCb = Option<unsafe extern "C" fn(data1: *const c_void,
                                                     data2: *const c_void) -> c_int>;
pub type EinaRandomCb = Option<extern "C" fn(min: c_int, max: c_int) -> c_int>;
pub type EinaEachCb = Option<unsafe extern "C" fn(container: *const c_void, 
                                                  data: *mut c_void,
                                                  fdata: *mut c_void) -> EinaBool>;
pub type EinaFreeCb = Option<unsafe extern "C" fn(data: *mut c_void)>;

#[repr(C)]
pub struct EinaVersion {
    pub major: c_int,
    pub minor: c_int,
    pub micro: c_int,
    pub revision: c_int,
}

pub type EinaF32p32 = int64_t;
pub type EinaF16p16 = int32_t;
pub type EinaF8p24 = int32_t;

#[repr(C)]
pub struct EinaRectangle {
    pub x: c_int,
    pub y: c_int,
    pub w: c_int,
    pub h: c_int,
}
pub enum EinaRectanglePool { }

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EinaRectanglePacking {
    EinaPackingDescending = 0,
    EinaPackingAscending = 1,
    EinaPackingBottomLeft = 2,
    EinaPackingBottomLeftSkyline = 3,
    EinaPackingBottomLeftSkylineImproved = 4,
}

#[repr(C)]
pub struct EinaClist {
    pub next: *mut EinaClist,
    pub prev: *mut EinaClist,
}

pub type EinaError = c_int;
pub type EinaMagic = c_uint;
pub type EinaIteratorNextCallback = Option<unsafe extern "C" fn(it: *mut EinaIterator,
                                                                data: *mut *mut c_void)
                                                                -> EinaBool>;
pub type EinaIteratorGetContainerCallback = Option<unsafe extern "C" fn(it: *mut EinaIterator)
                                                                        -> *mut c_void>;
pub type EinaIteratorFreeCallback = Option<unsafe extern "C" fn(it: *mut EinaIterator)>;
pub type EinaIteratorLockCallback = Option<unsafe extern "C" fn(it: *mut EinaIterator) 
                                                                -> EinaBool>;
#[repr(C)]
pub struct EinaIterator {
    pub version: c_int,
    pub next: EinaIteratorNextCallback,
    pub get_container: EinaIteratorGetContainerCallback,
    pub free: EinaIteratorFreeCallback,
    pub lock: EinaIteratorLockCallback,
    pub unlock: EinaIteratorLockCallback,
    pub __magic: EinaMagic,
}

pub type EinaAccessorGetAtCallback = Option<unsafe extern "C" fn(it: *mut EinaAccessor,
                                                                 idx: c_uint,
                                                                 data: *mut *mut c_void)
                                                                 -> EinaBool>;
pub type EinaAccessorGetContainerCallback = Option<unsafe extern "C" fn(it: *mut EinaAccessor)
                                                                        -> *mut c_void>;
pub type EinaAccessorFreeCallback = Option<unsafe extern "C" fn(it: *mut EinaAccessor)>;
pub type EinaAccessorLockCallback = Option<unsafe extern "C" fn(it: *mut EinaAccessor)
                                                                -> EinaBool>;
pub type EinaAccessorCloneCallback = Option<unsafe extern "C" fn(it: *mut EinaAccessor)
                                                                 -> *mut EinaAccessor>;
#[repr(C)]
pub struct EinaAccessor {
    pub version: c_int,
    pub get_at: EinaAccessorGetAtCallback,
    pub get_container: EinaAccessorGetContainerCallback,
    pub free: EinaAccessorFreeCallback,
    pub lock: EinaAccessorLockCallback,
    pub unlock: EinaAccessorLockCallback,
    pub __magic: EinaMagic,
    pub clone: EinaAccessorCloneCallback,
}

impl Drop for EinaAccessor {
	fn drop(&mut self) {
		unsafe {
			eina_accessor_free(self as *mut EinaAccessor);
		}
	}
}

impl Clone for EinaAccessor {
        pub fn clone(&mut self) -> Option<EinaAccessor> {
                unsafe {
                        let new_clone = eina_accessor_clone(self as *mut EinaAccessor);
                        match new_clone.is_null() {
                                true => None,
                                false => Some(*new_clone),
                        }
                }
        }
}

pub enum EinaInlistSortedState { }

#[repr(C)]
pub struct EinaInlist {
    pub next: *mut EinaInlist,
    pub prev: *mut EinaInlist,
    pub last: *mut EinaInlist,
}

pub type EinaArrayIterator = *mut *mut c_void;
#[repr(C)]
pub struct EinaArray {
    pub version: c_int,
    pub data: *mut *mut c_void,
    pub total: c_uint,
    pub count: c_uint,
    pub step: c_uint,
    pub __magic: EinaMagic,
}

pub type EinaTmpstr = c_char;
pub type EinaFileDirListCb = Option<unsafe extern "C" fn(name: *const c_char,
                                                         path: *const c_char,
                                                         data: *mut c_void)>;
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EinaFileType {
    EinaFileUnknown = 0,
    EinaFileFifo = 1,
    EinaFileChr = 2,
    EinaFileDir = 3,
    EinaFileBlk = 4,
    EinaFileReg = 5,
    EinaFileLnk = 6,
    EinaFileSock = 7,
    EinaFileWht = 8,
}

pub enum EinaFile { }

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EinaFilePopulate {
    EinaFileRandom = 0,
    EinaFileSequential = 1,
    EinaFileWillneed = 2,
    EinaFilePopulate = 3,
    EinaFileDontneed = 4,
    EinaFileRemove = 5,
}

#[repr(C)]
pub struct EinaFileDirectInfo {
    pub path_length: size_t,
    pub name_length: size_t,
    pub name_start: size_t,
    pub _type: EinaFileType,
    pub path: [c_char; 8192usize],
}

#[repr(C)]
pub struct EinaStat {
    pub dev: c_ulong,
    pub ino: c_ulong,
    pub mode: c_uint,
    pub nlink: c_uint,
    pub uid: c_uint,
    pub gid: c_uint,
    pub rdev: c_ulong,
    pub size: c_ulong,
    pub blksize: c_ulong,
    pub blocks: c_ulong,
    pub atime: c_ulong,
    pub atimensec: c_ulong,
    pub mtime: c_ulong,
    pub mtimensec: c_ulong,
    pub ctime: c_ulong,
    pub ctimensec: c_ulong,
}

#[repr(C)]
pub struct EinaFileLine {
    pub start: *const c_char,
    pub end: *const c_char,
    pub index: c_uint,
    pub length: c_ulonglong,
}

pub type EinaFileCopyProgress = Option<unsafe extern "C" fn(data: *mut c_void,
                                                              done: c_ulonglong,
                                                              total: c_ulonglong)
                                                              -> EinaBool>;
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EinaFileCopyFlags {
    EinaFileCopyData = 0,
    EinaFileCopyPermission = 1,
    EinaFileCopyXattr = 2,
}

#[repr(C)]
pub struct EinaList {
    pub data: *mut c_void,
    pub next: *mut EinaList,
    pub prev: *mut EinaList,
    pub accounting: *mut EinaListAccounting,
    pub __magic: EinaMagic,
}

#[repr(C)]
pub struct EinaListAccounting {
    pub last: *mut EinaList,
    pub count: c_uint,
    pub __magic: EinaMagic,
}

pub enum EinaHash { }

#[repr(C)]
pub struct EinaHashTuple {
    pub key: *const c_void,
    pub data: *mut c_void,
    pub key_length: c_uint,
}

pub type EinaKeyLength = Option<unsafe extern "C" fn(key: *const c_void) -> c_uint>;
pub type EinaKeyCmp = Option<unsafe extern "C" fn(key1: *const c_void,
                                                  key1_length: c_int,
                                                  key2: *const c_void,
                                                  key2_length: c_int) -> c_int>;
pub type EinaKeyHash = Option<unsafe extern "C" fn(key: *const c_void,
                                                   key_length: c_int) -> c_int>;
pub type EinaHashForeach = Option<unsafe extern "C" fn(hash: *const EinaHash,
                                                       key: *const c_void,
                                                       data: *mut c_void,
                                                       fdata: *mut c_void) -> EinaBool>;

#[repr(C)]
pub struct EinaTrash {
    pub next: *mut EinaTrash,
}

pub type EinaLallocAlloc = Option<unsafe extern "C" fn(user_data: *mut c_void, num: c_int)
                                                       -> EinaBool>;
pub type EinaLallocFree = Option<unsafe extern "C" fn(user_data: *mut c_void)>;
pub enum EinaLalloc { }
pub enum EinaModule { }
pub type EinaModuleCb = Option<unsafe extern "C" fn(m: *mut EinaModule, data: *mut c_void)
                                                    -> EinaBool>;
pub type EinaModuleInit = Option<extern "C" fn() -> EinaBool>;
pub type EinaModuleShutdown = Option<extern "C" fn()>;
pub type EinaMempoolRepackCb = Option<unsafe extern "C" fn(dst: *mut c_void, src: *mut c_void,
                                                           data: *mut c_void)>;
pub enum EinaMempoolBackend {}
/* Not sure if va_list crate will work
#[repr(C)]
pub struct EinaMempoolBackend {
    pub name: *const c_char,
    pub init: Option<unsafe extern "C" fn(context: *const c_char, options: *const c_char,
                                          args: va_list) -> *mut c_void>,
    pub free: Option<unsafe extern "C" fn(data: *mut c_void, element: *mut c_void)>,
    pub alloc: Option<unsafe extern "C" fn(data: *mut c_void, size: c_uint) -> *mut c_void>,
    pub realloc: Option<unsafe extern "C" fn(data: *mut c_void, element: *mut c_void,
                                             size: c_uint) -> *mut c_void>,
    pub garbage_collect: Option<unsafe extern "C" fn(data: *mut c_void)>,
    pub statistics: Option<unsafe extern "C" fn(data: *mut c_void)>,
    pub shutdown: Option<unsafe extern "C" fn(data: *mut c_void)>,
    pub repack: Option<unsafe extern "C" fn(data: *mut c_void, cb: EinaMempoolRepackCb,
                                            cb_data: *mut c_void)>,
}
*/

pub enum EinaMempoolRepackAbi1 {}
/* va_list not supported natively
#[repr(C)]
pub struct EinaMempoolRepackAbi1 {
    pub name: *const c_char,
    pub init: Option<unsafe extern "C" fn(context: *const c_char, options: *const c_char,
                                          args: va_list) -> *mut c_void>,
    pub free: Option<unsafe extern "C" fn(data: *mut c_void, element: *mut c_void)>,
    pub alloc: Option<unsafe extern "C" fn(data: *mut c_void, size: c_uint) -> *mut c_void>,
    pub realloc: Option<unsafe extern "C" fn(data: *mut c_void, element: *mut c_void,
                                             size: c_uint) -> *mut c_void>,
    pub garbage_collect: Option<unsafe extern "C" fn(data: *mut c_void)>,
    pub statistics: Option<unsafe extern "C" fn(data: *mut c_void)>,
    pub shutdown: Option<unsafe extern "C" fn(data: *mut c_void)>,
}
*/

#[repr(C)]
pub struct EinaMempoolRepackAbi2 {
    pub repack: Option<unsafe extern "C" fn(data: *mut c_void, cb: EinaMempoolRepackCb,
                                            cb_data: *mut c_void)>,
}

#[repr(C)]
pub struct EinaMempool {
    pub backend: EinaMempoolRepackAbi1,
    pub backend_data: *mut c_void,
    pub backend2: *mut EinaMempoolRepackAbi2,
}

#[repr(C)]
pub struct EinaLogDomain {
    pub level: c_int,
    pub domain_str: *const c_char,
    pub name: *const c_char,
    pub namelen: size_t,
    pub _bindgen_bitfield_1_: EinaBool,
    pub color: *const c_char,
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(i32)]
pub enum EinaLogLevel {
    EinaLogLevelCritical = 0,
    EinaLogLevelErr = 1,
    EinaLogLevelWarn = 2,
    EinaLogLevelInfo = 3,
    EinaLogLevelDbg = 4,
    EinaLogLevels = 5,
    EinaLogLevelUnknown = -2147483648,
}

// va_list
/*pub type EinaLogPrintCb = Option<unsafe extern "C" fn(d: *const EinaLogDomain,
                                                       level: EinaLogLevel,
                                                       file: *const c_char,
                                                       fnc: *const c_char,
                                                       line: c_int,
                                                       fmt: *const c_char,
                                                       data: *mut c_void,
                                                       args: va_list)>;
*/
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EinaLogState {
    EinaLogStateStart = 0,
    EinaLogStateStop = 1,
}

#[repr(C)]
pub struct EinaInarray {
    pub version: c_int,
    pub member_size: c_uint,
    pub len: c_uint,
    pub max: c_uint,
    pub step: c_uint,
    pub members: *mut c_void,
    pub __magic: EinaMagic,
}

pub type EinaStringshare = c_char;
pub type EinaUnicode = wchar_t;
pub enum EinaCounter { }

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EinaRbtreeColor { 
    EinaRbtreeRed = 0, 
    EinaRbtreeBlack = 1, 
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EinaRbtreeDirection { 
    EinaRbtreeLeft = 0, 
    EinaRbtreeRight = 1, 
}

#[repr(C)]
pub struct EinaRbtree {
    pub son: [*mut EinaRbtree; 2usize],
    pub color: c_uint,
}

pub type EinaRbtreeCmpNodeCb = Option<unsafe extern "C" fn(left: *const EinaRbtree,
                                                           right: *const EinaRbtree,
                                                           data: *mut c_void)
                                                           -> EinaRbtreeDirection>;
pub type EinaRbtreeCmpKeyCb = Option<unsafe extern "C" fn(node: *const EinaRbtree,
                                                          key: *const c_void, length: c_int,
                                                          data: *mut c_void) -> c_int>;
pub type EinaRbtreeFreeCb = Option<unsafe extern "C" fn(node: *mut EinaRbtree,
                                                        data: *mut c_void)>;
pub enum EinaBenchmark { }

pub type EinaBenchmarkSpecimens = Option<extern "C" fn(request: c_int)>;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EinaCpuFeatures {
    EinaCpuMmx = 1,
    EinaCpuSse = 2,
    EinaCpuSse2 = 4,
    EinaCpuSse3 = 8,
    EinaCpuAltivec = 16,
    EinaCpuVis = 32,
    EinaCpuNeon = 64,
    EinaCpuSsse3 = 128,
    EinaCpuSse41 = 256,
    EinaCpuSse42 = 512,
}

pub enum EinaTiler { }

#[repr(C)]
pub struct EinaTileGridInfo {
    pub col: c_ulong,
    pub row: c_ulong,
    pub rect: EinaRectangle,
    pub full: EinaBool,
}

#[repr(C)]
pub struct EinaTileGridSlicer {
    pub col1: c_ulong,
    pub col2: c_ulong,
    pub row1: c_ulong,
    pub row2: c_ulong,
    pub tile_w: c_int,
    pub tile_h: c_int,
    pub x_rel: c_int,
    pub y_rel: c_int,
    pub w1_rel: c_int,
    pub h1_rel: c_int,
    pub w2_rel: c_int,
    pub h2_rel: c_int,
    pub info: EinaTileGridInfo,
    pub first: EinaBool,
}

pub type EinaThread = uintptr_t;
pub type EinaThreadCb = Option<unsafe extern "C" fn(data: *mut c_void, t: EinaThread)
                                                    -> *mut c_void>;
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EinaThreadPriority {
    EinaThreadUrgent = 0,
    EinaThreadNormal = 1,
    EinaThreadBackground = 2,
    EinaThreadIdle = 3,
}

pub enum EinaMatrixsparse { }
pub enum EinaMatrixsparseRow { }
pub enum EinaMatrixsparseCell { }
pub enum EinaStrbuf { }
pub type EinaBinbuf = EinaStrbuf;
pub type EinaUStrbuf = EinaStrbuf;
pub enum EinaQuadTree { }
pub enum EinaQuadTreeItem { }

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EinaQuadDirection {
    EinaQuadLeft = 0,
    EinaQuadRight = 1,
    EinaQuadBoth = 2,
}

pub type EinaQuadCallback = Option<unsafe extern "C" fn(object: *const c_void, middle: size_t)
                                                        -> EinaQuadDirection>;

pub type EinaSimpleXmlNodeRoot = EinaSimpleXmlNodeTag;
pub type EinaSimpleXmlNodeCData = EinaSimpleXmlNodeData;
pub type EinaSimpleXmlNodeProcessing = EinaSimpleXmlNodeData;
pub type EinaSimpleXmlNodeDoctype = EinaSimpleXmlNodeData;
pub type EinaSimpleXmlNodeDoctypeChild = EinaSimpleXmlNodeData;
pub type EinaSimpleXmlNodeComment = EinaSimpleXmlNodeData;

#[repr(C)]
pub struct EinaSimpleXmlAttribute {
    pub __in_list: EinaInlist,
    pub __magic: EinaMagic,
    pub parent: *mut EinaSimpleXmlNodeTag,
    pub key: *const c_char,
    pub value: *const c_char,
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EinaSimpleXmlNodeType {
    EinaSimpleXmlNodeRoot = 0,
    EinaSimpleXmlNodeTag = 1,
    EinaSimpleXmlNodeData = 2,
    EinaSimpleXmlNodeCdata = 3,
    EinaSimpleXmlNodeProcessing = 4,
    EinaSimpleXmlNodeDoctype = 5,
    EinaSimpleXmlNodeComment = 6,
    EinaSimpleXmlNodeDoctypeChild = 7,
}

#[repr(C)]
pub struct EinaSimpleXmlNode {
    pub __in_list: EinaInlist,
    pub __magic: EinaMagic,
    pub parent: *mut EinaSimpleXmlNodeTag,
    pub _type: EinaSimpleXmlNodeType,
}

#[repr(C)]
pub struct EinaSimpleXmlNodeTag {
    pub base: EinaSimpleXmlNode,
    pub children: *mut EinaInlist,
    pub attributes: *mut EinaInlist,
    pub name: *const c_char,
}

#[repr(C)]
pub struct EinaSimpleXmlNodeData {
    pub base: EinaSimpleXmlNode,
    pub length: size_t,
    pub data: *mut c_char,
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EinaSimpleXmlType {
    EinaSimpleXmlOpen = 0,
    EinaSimpleXmlOpenEmpty = 1,
    EinaSimpleXmlClose = 2,
    EinaSimpleXmlData = 3,
    EinaSimpleXmlCdata = 4,
    EinaSimpleXmlError = 5,
    EinaSimpleXmlProcessing = 6,
    EinaSimpleXmlDoctype = 7,
    EinaSimpleXmlComment = 8,
    EinaSimpleXmlIgnored = 9,
    EinaSimpleXmlDoctypeChild = 10,
}
pub type EinaSimpleXmlCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                       _type: EinaSimpleXmlType,
                                                       content: *const c_char,
                                                       offset: c_uint, length: c_uint)
                                                       -> EinaBool>;
pub type EinaSimpleXmlAttributeCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                                key: *const c_char,
                                                                value: *const c_char)
                                                                -> EinaBool>;
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EinaLockResult {
    EinaLockFail = 0,
    EinaLockSucceed = 1,
    EinaLockDeadlock = 2,
}

pub type EinaTlsDeleteCb = Option<unsafe extern "C" fn(ptr: *mut c_void)>;
pub type EinaTls = pthread_key_t;
pub enum EinaSpinlock {}
pub enum EinaSemaphore {}
//pub type EinaSpinlock = pthread_spinlock_t; //pthread_spinlock_t not supported in libc
//pub type EinaSemaphore = sem_t; //sem_t not supported in libc

#[repr(C)]
pub struct EinaLock {
    pub mutex: pthread_mutex_t,
}

pub enum EinaCondition {}
/* clockid_t not supported in libc
#[repr(C)]
pub struct EinaCondition {
    pub lock: *mut EinaLock,
    pub condition: pthread_cond_t,
    pub clkid: clockid_t,
}
*/

#[repr(C)]
pub struct EinaRwLock {
    pub mutex: pthread_rwlock_t,
}

pub enum EinaBarrier {}
/* pthread_barrier_t not supported in libc
#[repr(C)]
pub struct EinaBarrier {
    pub barrier: pthread_barrier_t,
}
*/

pub enum EinaPrefix { }
pub type EinaRefcount = c_int;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EinaXattrFlags {
    EinaXattrInsert = 0,
    EinaXattrReplace = 1,
    EinaXattrCreated = 2,
}

#[repr(C)]
pub struct EinaXattr {
    pub name: *const c_char,
    pub value: *const c_char,
    pub length: size_t,
}

#[repr(C)]
pub struct EinaValueUnion {
    pub _bindgen_data_: [u64; 1usize],
}
impl EinaValueUnion {
    pub unsafe fn buf(&mut self) -> *mut [c_uchar; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ptr(&mut self) -> *mut *mut c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _guarantee(&mut self) -> *mut uint64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}

#[repr(C)]
pub struct EinaValue {
    pub _type: *const EinaValueType,
    pub value: EinaValueUnion,
}

#[repr(C)]
pub struct EinaValueArray {
    pub subtype: *const EinaValueType,
    pub step: c_uint,
    pub array: *mut EinaInarray,
}

#[repr(C)]
pub struct EinaValueList {
    pub subtype: *const EinaValueType,
    pub list: *mut EinaList,
}

#[repr(C)]
pub struct EinaValueHash {
    pub subtype: *const EinaValueType,
    pub buckets_power_size: c_uint,
    pub hash: *mut EinaHash,
}

#[repr(C)]
pub struct EinaValueBlobOperations {
    pub version: c_uint,
    pub free: Option<unsafe extern "C" fn(ops: *const EinaValueBlobOperations,
                                          memory: *mut c_void, size: size_t)>,
    pub copy: Option<unsafe extern "C" fn(ops: *const EinaValueBlobOperations,
                                          memory: *const c_void, size: size_t) -> *mut c_void>,
    pub compare: Option<unsafe extern "C" fn(ops: *const EinaValueBlobOperations,
                                             data1: *const c_void, size_data1: size_t,
                                             data2: *const c_void, size_data2: size_t)
                                             -> c_int>,
    pub to_string: Option<unsafe extern "C" fn(ops: *const EinaValueBlobOperations,
                                               memory: *const c_void, size: size_t)
                                               -> *mut c_char>,
}

#[repr(C)]
pub struct EinaValueBlob {
    pub ops: *const EinaValueBlobOperations,
    pub memory: *const c_void,
    pub size: c_uint,
}

#[repr(C)]
pub struct EinaValueStructOperations {
    pub version: c_uint,
    pub alloc: Option<unsafe extern "C" fn(ops: *const EinaValueStructOperations,
                                           desc: *const EinaValueStructDesc) -> *mut c_void>,
    pub free: Option<unsafe extern "C" fn(ops: *const EinaValueStructOperations,
                                          desc: *const EinaValueStructDesc,
                                          memory: *mut c_void)>,
    pub copy: Option<unsafe extern "C" fn(ops: *const EinaValueStructOperations,
                                          desc: *const EinaValueStructDesc,
                                          memory: *const c_void) -> *mut c_void>,
    pub compare: Option<unsafe extern "C" fn(ops: *const EinaValueStructOperations,
                                             desc: *const EinaValueStructDesc,
                                             data1: *const c_void, data2: *const c_void)
                                             -> c_int>,
    pub find_member: Option<unsafe extern "C" fn(ops: *const EinaValueStructOperations,
                                                 desc: *const EinaValueStructDesc,
                                                 name: *const c_char)
                                                 -> *const EinaValueStructMember>,
}

#[repr(C)]
pub struct EinaValueStructMember {
    pub name: *const c_char,
    pub _type: *const EinaValueType,
    pub offset: c_uint,
}

#[repr(C)]
pub struct EinaValueStructDesc {
    pub version: c_uint,
    pub ops: *const EinaValueStructOperations,
    pub members: *const EinaValueStructMember,
    pub member_count: c_uint,
    pub size: c_uint,
}

#[repr(C)]
pub struct EinaValueStruct {
    pub desc: *const EinaValueStructDesc,
    pub memory: *mut c_void,
}

pub enum EinaValueType {}
/* No va_list
#[repr(C)]
pub struct EinaValueType {
    pub version: c_uint,
    pub value_size: c_uint,
    pub name: *const c_char,
    pub setup: Option<unsafe extern "C" fn(_type: *const EinaValueType, mem: *mut c_void)
                                           -> EinaBool>,
    pub flush: Option<unsafe extern "C" fn(_type: *const EinaValueType, mem: *mut c_void)
                                           -> EinaBool>,
    pub copy: Option<unsafe extern "C" fn(_type: *const EinaValueType, src: *const c_void,
                                          dst: *mut c_void) -> EinaBool>,
    pub compare: Option<unsafe extern "C" fn(_type: *const EinaValueType, a: *const c_void,
                                             b: *const c_void) -> c_int>,
    pub convert_to: Option<unsafe extern "C" fn(_type: *const EinaValueType,
                                                convert: *const EinaValueType,
                                                type_mem: *const c_void,
                                                convert_mem: *mut c_void) -> EinaBool>,
    pub convert_from: Option<unsafe extern "C" fn(_type: *const EinaValueType,
                                                  convert: *const EinaValueType,
                                                  type_mem: *mut c_void,
                                                  convert_mem: *const c_void) -> EinaBool>,
    pub vset: Option<unsafe extern "C" fn(_type: *const EinaValueType, mem: *mut c_void,
                                          args: va_list) -> EinaBool>,
    pub pset: Option<unsafe extern "C" fn(_type: *const EinaValueType, mem: *mut c_void,
                                          ptr: *const c_void) -> EinaBool>,
    pub pget: Option<unsafe extern "C" fn(_type: *const EinaValueType, mem: *const c_void,
                                          ptr: *mut c_void) -> EinaBool>,
}
*/

pub enum EinaCow { }
pub type EinaCowData = c_void;
pub enum EinaThreadQueue { }

#[repr(C)]
pub struct EinaThreadQueueMsg {
    pub size: c_int,
}

#[repr(C)]
pub struct EinaThreadQueueMsgSub {
    pub head: EinaThreadQueueMsg,
    pub queue: *mut EinaThreadQueue,
}

#[repr(C)]
pub struct EinaQuad {
    pub x0: c_double,
    pub y0: c_double,
    pub x1: c_double,
    pub y1: c_double,
    pub x2: c_double,
    pub y2: c_double,
    pub x3: c_double,
    pub y3: c_double,
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EinaMatrixType {
    EinaMatrixTypeIdentity = 0,
    EinaMatrixTypeAffine = 1,
    EinaMatrixTypeProjective = 2,
    EinaMatrixTypeLast = 3,
}

#[repr(C)]
pub struct EinaMatrix3F16p16 {
    pub xx: EinaF16p16,
    pub xy: EinaF16p16,
    pub xz: EinaF16p16,
    pub yx: EinaF16p16,
    pub yy: EinaF16p16,
    pub yz: EinaF16p16,
    pub zx: EinaF16p16,
    pub zy: EinaF16p16,
    pub zz: EinaF16p16,
}

#[repr(C)]
pub struct EinaMatrix3 {
    pub xx: c_double,
    pub xy: c_double,
    pub xz: c_double,
    pub yx: c_double,
    pub yy: c_double,
    pub yz: c_double,
    pub zx: c_double,
    pub zy: c_double,
    pub zz: c_double,
}

#[repr(C)]
pub struct EinaMatrix4 {
    pub xx: c_double,
    pub xy: c_double,
    pub xz: c_double,
    pub xw: c_double,
    pub yx: c_double,
    pub yy: c_double,
    pub yz: c_double,
    pub yw: c_double,
    pub zx: c_double,
    pub zy: c_double,
    pub zz: c_double,
    pub zw: c_double,
    pub wx: c_double,
    pub wy: c_double,
    pub wz: c_double,
    pub ww: c_double,
}

#[repr(C)]
pub struct EinaEvlogItem {
    pub tim: c_double,
    pub srctim: c_double,
    pub thread: c_ulonglong,
    pub obj: c_ulonglong,
    pub event_offset: c_ushort,
    pub detail_offset: c_ushort,
    pub event_next: c_ushort,
}

#[repr(C)]
pub struct EinaEvlogBuf {
    pub buf: *mut c_uchar,
    pub size: c_uint,
    pub top: c_uint,
    pub overflow: c_uint,
}

#[repr(C)]
pub struct EinaQuaternion {
    pub x: c_double,
    pub y: c_double,
    pub z: c_double,
    pub w: c_double,
}

#[repr(C)]
pub struct EinaQuaternionF16p16 {
    pub x: EinaF16p16,
    pub y: EinaF16p16,
    pub z: EinaF16p16,
    pub w: EinaF16p16,
}

#[repr(C)]
pub struct EinaPoint3d {
    pub x: c_double,
    pub y: c_double,
    pub z: c_double,
}

#[repr(C)]
pub struct EinaPoint3dF16p16 {
    pub x: EinaF16p16,
    pub y: EinaF16p16,
    pub z: EinaF16p16,
}

#[repr(C)]
pub struct EinaBezier {
    pub start: Struct_Unnamed10,
    pub ctrl_start: Struct_Unnamed11,
    pub ctrl_end: Struct_Unnamed12,
    pub end: Struct_Unnamed13,
}

#[repr(C)]
pub struct Struct_Unnamed10 {
    pub x: c_double,
    pub y: c_double,
}

#[repr(C)]
pub struct Struct_Unnamed11 {
    pub x: c_double,
    pub y: c_double,
}

#[repr(C)]
pub struct Struct_Unnamed12 {
    pub x: c_double,
    pub y: c_double,
}

#[repr(C)]
pub struct Struct_Unnamed13 {
    pub x: c_double,
    pub y: c_double,
}

#[link(name = "eina")]
extern "C" {
    pub static mut eina_prime_table: *const c_uint;
    pub static mut eina_version: *mut EinaVersion;
    pub static mut EINA_ERROR_OUT_OF_MEMORY: EinaError;
    pub static mut EINA_ERROR_MAGIC_FAILED: EinaError;
    pub static mut eina_seed: c_uint;
    pub static mut EINA_ERROR_WRONG_MODULE: EinaError;
    pub static mut EINA_ERROR_MODULE_INIT_FAILED: EinaError;
    pub static mut EINA_ERROR_NOT_MEMPOOL_MODULE: EinaError;
    pub static mut EINA_LOG_DOMAIN_GLOBAL: c_int;
    pub static mut _eina_log_state_init: *const c_char;
    pub static mut _eina_log_state_shutdown: *const c_char;
    pub static mut EINA_UNICODE_EMPTY_STRING: *const EinaUnicode;
    pub static mut EINA_ERROR_CONVERT_P_NOT_FOUND: EinaError;
    pub static mut EINA_ERROR_CONVERT_0X_NOT_FOUND: EinaError;
    pub static mut EINA_ERROR_CONVERT_OUTRUN_STRING_LENGTH: EinaError;
    pub static mut EINA_CPU_FEATURES: EinaCpuFeatures;
    pub static mut EINA_ERROR_SAFETY_FAILED: EinaError;
    pub static mut _eina_threads_activated: EinaBool;
    pub static mut EINA_ERROR_NOT_MAIN_LOOP: EinaError;
    pub static mut EINA_VALUE_TYPE_UCHAR: *const EinaValueType;
    pub static mut EINA_VALUE_TYPE_USHORT: *const EinaValueType;
    pub static mut EINA_VALUE_TYPE_UINT: *const EinaValueType;
    pub static mut EINA_VALUE_TYPE_ULONG: *const EinaValueType;
    pub static mut EINA_VALUE_TYPE_TIMESTAMP: *const EinaValueType;
    pub static mut EINA_VALUE_TYPE_UINT64: *const EinaValueType;
    pub static mut EINA_VALUE_TYPE_CHAR: *const EinaValueType;
    pub static mut EINA_VALUE_TYPE_SHORT: *const EinaValueType;
    pub static mut EINA_VALUE_TYPE_INT: *const EinaValueType;
    pub static mut EINA_VALUE_TYPE_LONG: *const EinaValueType;
    pub static mut EINA_VALUE_TYPE_INT64: *const EinaValueType;
    pub static mut EINA_VALUE_TYPE_FLOAT: *const EinaValueType;
    pub static mut EINA_VALUE_TYPE_DOUBLE: *const EinaValueType;
    pub static mut EINA_VALUE_TYPE_STRINGSHARE: *const EinaValueType;
    pub static mut EINA_VALUE_TYPE_STRING: *const EinaValueType;
    pub static mut EINA_VALUE_TYPE_ARRAY: *const EinaValueType;
    pub static mut EINA_VALUE_TYPE_LIST: *const EinaValueType;
    pub static mut EINA_VALUE_TYPE_HASH: *const EinaValueType;
    pub static mut EINA_VALUE_TYPE_TIMEVAL: *const EinaValueType;
    pub static mut EINA_VALUE_TYPE_BLOB: *const EinaValueType;
    pub static mut EINA_VALUE_TYPE_STRUCT: *const EinaValueType;
    pub static mut EINA_ERROR_VALUE_FAILED: EinaError;
    pub static mut EINA_VALUE_BLOB_OPERATIONS_MALLOC:
               *const EinaValueBlobOperations;
    pub static mut EINA_VALUE_STRUCT_OPERATIONS_BINSEARCH:
               *const EinaValueStructOperations;
    pub static mut EINA_VALUE_STRUCT_OPERATIONS_STRINGSHARE:
               *const EinaValueStructOperations;
    pub static mut _EINA_VALUE_TYPE_BASICS_START: *const EinaValueType;
    pub static mut _EINA_VALUE_TYPE_BASICS_END: *const EinaValueType;
}
#[link(name = "eina")]
extern "C" {
    pub fn eina_init() -> c_int;
    pub fn eina_shutdown() -> c_int;
    pub fn eina_threads_init() -> c_int;
    pub fn eina_threads_shutdown() -> c_int;
    pub fn eina_main_loop_is() -> EinaBool;
    pub fn eina_main_loop_define();
    pub fn eina_f32p32_cos(a: EinaF32p32) -> EinaF32p32;
    pub fn eina_f32p32_sin(a: EinaF32p32) -> EinaF32p32;
    pub fn eina_rectangle_pool_new(w: c_int,
                                   h: c_int)
     -> *mut EinaRectanglePool;
    pub fn eina_rectangle_pool_get(rect: *mut EinaRectangle)
     -> *mut EinaRectanglePool;
    pub fn eina_rectangle_pool_geometry_get(pool: *mut EinaRectanglePool,
                                            w: *mut c_int,
                                            h: *mut c_int)
     -> EinaBool;
    pub fn eina_rectangle_pool_data_get(pool: *mut EinaRectanglePool)
     -> *mut c_void;
    pub fn eina_rectangle_pool_data_set(pool: *mut EinaRectanglePool,
                                        data: *const c_void);
    pub fn eina_rectangle_pool_free(pool: *mut EinaRectanglePool);
    pub fn eina_rectangle_pool_count(pool: *mut EinaRectanglePool)
     -> c_int;
    pub fn eina_rectangle_pool_request(pool: *mut EinaRectanglePool,
                                       w: c_int,
                                       h: c_int)
     -> *mut EinaRectangle;
    pub fn eina_rectangle_pool_release(rect: *mut EinaRectangle);
    pub fn eina_rectangle_new(x: c_int,
                              y: c_int,
                              w: c_int,
                              h: c_int)
     -> *mut EinaRectangle;
    pub fn eina_rectangle_free(rect: *mut EinaRectangle);
    pub fn eina_rectangle_pool_packing_set(pool: *mut EinaRectanglePool,
                                           _type: EinaRectanglePacking);
    pub fn eina_error_msg_register(msg: *const c_char)
     -> EinaError;
    pub fn eina_error_msg_static_register(msg: *const c_char)
     -> EinaError;
    pub fn eina_error_msg_modify(error: EinaError,
                                 msg: *const c_char)
     -> EinaBool;
    pub fn eina_error_get() -> EinaError;
    pub fn eina_error_set(err: EinaError);
    pub fn eina_error_msg_get(error: EinaError)
     -> *const c_char;
    pub fn eina_error_find(msg: *const c_char) -> EinaError;
    pub fn eina_magic_string_get(magic: EinaMagic)
     -> *const c_char;
    pub fn eina_magic_string_set(magic: EinaMagic,
                                 magic_name: *const c_char)
     -> EinaBool;
    pub fn eina_magic_string_static_set(magic: EinaMagic,
                                        magic_name:
                                            *const c_char)
     -> EinaBool;
    pub fn eina_magic_fail(d: *mut c_void, m: EinaMagic,
                           req_m: EinaMagic,
                           file: *const c_char,
                           fnc: *const c_char,
                           line: c_int);
    pub fn eina_iterator_free(iterator: *mut EinaIterator);
    pub fn eina_iterator_container_get(iterator: *mut EinaIterator)
     -> *mut c_void;
    pub fn eina_iterator_next(iterator: *mut EinaIterator,
                              data: *mut *mut c_void)
     -> EinaBool;
    pub fn eina_iterator_foreach(iterator: *mut EinaIterator,
                                 callback: EinaEachCb,
                                 fdata: *const c_void);
    pub fn eina_iterator_lock(iterator: *mut EinaIterator) -> EinaBool;
    pub fn eina_iterator_unlock(iterator: *mut EinaIterator) -> EinaBool;
    pub fn eina_accessor_free(accessor: *mut EinaAccessor);
    pub fn eina_accessor_data_get(accessor: *mut EinaAccessor,
                                  position: c_uint,
                                  data: *mut *mut c_void)
     -> EinaBool;
    pub fn eina_accessor_container_get(accessor: *mut EinaAccessor)
     -> *mut c_void;
    pub fn eina_accessor_over(accessor: *mut EinaAccessor, cb: EinaEachCb,
                              start: c_uint,
                              end: c_uint,
                              fdata: *const c_void);
    pub fn eina_accessor_lock(accessor: *mut EinaAccessor) -> EinaBool;
    pub fn eina_accessor_clone(accessor: *mut EinaAccessor)
     -> *mut EinaAccessor;
    pub fn eina_accessor_unlock(accessor: *mut EinaAccessor) -> EinaBool;
    pub fn eina_inlist_append(in_list: *mut EinaInlist,
                              in_item: *mut EinaInlist) -> *mut EinaInlist;
    pub fn eina_inlist_prepend(in_list: *mut EinaInlist,
                               in_item: *mut EinaInlist) -> *mut EinaInlist;
    pub fn eina_inlist_append_relative(in_list: *mut EinaInlist,
                                       in_item: *mut EinaInlist,
                                       in_relative: *mut EinaInlist)
     -> *mut EinaInlist;
    pub fn eina_inlist_prepend_relative(in_list: *mut EinaInlist,
                                        in_item: *mut EinaInlist,
                                        in_relative: *mut EinaInlist)
     -> *mut EinaInlist;
    pub fn eina_inlist_remove(in_list: *mut EinaInlist,
                              in_item: *mut EinaInlist) -> *mut EinaInlist;
    pub fn eina_inlist_find(in_list: *mut EinaInlist,
                            in_item: *mut EinaInlist) -> *mut EinaInlist;
    pub fn eina_inlist_promote(list: *mut EinaInlist, item: *mut EinaInlist)
     -> *mut EinaInlist;
    pub fn eina_inlist_demote(list: *mut EinaInlist, item: *mut EinaInlist)
     -> *mut EinaInlist;
    pub fn eina_inlist_count(list: *const EinaInlist)
     -> c_uint;
    pub fn eina_inlist_iterator_new(in_list: *const EinaInlist)
     -> *mut EinaIterator;
    pub fn eina_inlist_accessor_new(in_list: *const EinaInlist)
     -> *mut EinaAccessor;
    pub fn eina_inlist_sorted_insert(list: *mut EinaInlist,
                                     item: *mut EinaInlist,
                                     func: EinaCompareCb)
     -> *mut EinaInlist;
    pub fn eina_inlist_sorted_state_new() -> *mut EinaInlistSortedState;
    pub fn eina_inlist_sorted_state_init(state: *mut EinaInlistSortedState,
                                         list: *mut EinaInlist)
     -> c_int;
    pub fn eina_inlist_sorted_state_free(state:
                                             *mut EinaInlistSortedState);
    pub fn eina_inlist_sorted_state_insert(list: *mut EinaInlist,
                                           item: *mut EinaInlist,
                                           func: EinaCompareCb,
                                           state:
                                               *mut EinaInlistSortedState)
     -> *mut EinaInlist;
    pub fn eina_inlist_sort(head: *mut EinaInlist, func: EinaCompareCb)
     -> *mut EinaInlist;
    pub fn eina_array_new(step: c_uint) -> *mut EinaArray;
    pub fn eina_array_free(array: *mut EinaArray);
    pub fn eina_array_step_set(array: *mut EinaArray,
                               sizeof_eina_array: c_uint,
                               step: c_uint);
    pub fn eina_array_flush(array: *mut EinaArray);
    pub fn eina_array_remove(array: *mut EinaArray,
                             keep:
                                 Option<unsafe extern "C" fn(data:
                                                                                *mut c_void,
                                                                            gdata:
                                                                                *mut c_void)
                                                           -> EinaBool>,
                             gdata: *mut c_void) -> EinaBool;
    pub fn eina_array_iterator_new(array: *const EinaArray)
     -> *mut EinaIterator;
    pub fn eina_array_accessor_new(array: *const EinaArray)
     -> *mut EinaAccessor;
    pub fn eina_array_grow(array: *mut EinaArray) -> EinaBool;
    pub fn eina_tmpstr_add(str: *const c_char)
     -> *mut EinaTmpstr;
    pub fn eina_tmpstr_add_length(str: *const c_char,
                                  length: size_t) -> *mut EinaTmpstr;
    pub fn eina_tmpstr_strlen(tmpstr: *mut EinaTmpstr) -> size_t;
    pub fn eina_tmpstr_len(tmpstr: *mut EinaTmpstr) -> size_t;
    pub fn eina_tmpstr_del(tmpstr: *mut EinaTmpstr);
    pub fn eina_strlcpy(dst: *mut c_char,
                        src: *const c_char, siz: size_t)
     -> size_t;
    pub fn eina_strlcat(dst: *mut c_char,
                        src: *const c_char, siz: size_t)
     -> size_t;
    pub fn eina_str_has_prefix(str: *const c_char,
                               prefix: *const c_char)
     -> EinaBool;
    pub fn eina_str_has_suffix(str: *const c_char,
                               suffix: *const c_char)
     -> EinaBool;
    pub fn eina_str_has_extension(str: *const c_char,
                                  ext: *const c_char)
     -> EinaBool;
    pub fn eina_str_split(string: *const c_char,
                          delimiter: *const c_char,
                          max_tokens: c_int)
     -> *mut *mut c_char;
    pub fn eina_str_split_full(string: *const c_char,
                               delimiter: *const c_char,
                               max_tokens: c_int,
                               elements: *mut c_uint)
     -> *mut *mut c_char;
    pub fn eina_str_join_len(dst: *mut c_char, size: size_t,
                             sep: c_char,
                             a: *const c_char, a_len: size_t,
                             b: *const c_char, b_len: size_t)
     -> size_t;
    pub fn eina_str_convert(enc_from: *const c_char,
                            enc_to: *const c_char,
                            text: *const c_char)
     -> *mut c_char;
    pub fn eina_str_convert_len(enc_from: *const c_char,
                                enc_to: *const c_char,
                                text: *const c_char,
                                len: size_t, retlen: *mut size_t)
     -> *mut c_char;
    pub fn eina_str_escape(str: *const c_char)
     -> *mut c_char;
    pub fn eina_str_tolower(str: *mut *mut c_char);
    pub fn eina_str_toupper(str: *mut *mut c_char);
    pub fn eina_memdup(mem: *mut c_uchar, size: size_t,
                       terminate: EinaBool) -> *mut c_uchar;
    pub fn eina_file_dir_list(dir: *const c_char,
                              recursive: EinaBool, cb: EinaFileDirListCb,
                              data: *mut c_void) -> EinaBool;
    pub fn eina_file_split(path: *mut c_char)
     -> *mut EinaArray;
    pub fn eina_file_ls(dir: *const c_char)
     -> *mut EinaIterator;
    pub fn eina_file_stat_ls(dir: *const c_char)
     -> *mut EinaIterator;
    pub fn eina_file_statat(container: *mut c_void,
                            info: *mut EinaFileDirectInfo,
                            buf: *mut EinaStat) -> c_int;
    pub fn eina_file_mkstemp(templatename: *const c_char,
                             path: *mut *mut EinaTmpstr)
     -> c_int;
    pub fn eina_file_mkdtemp(templatename: *const c_char,
                             path: *mut *mut EinaTmpstr) -> EinaBool;
    pub fn eina_file_direct_ls(dir: *const c_char)
     -> *mut EinaIterator;
    pub fn eina_file_path_sanitize(path: *const c_char)
     -> *mut c_char;
    pub fn eina_file_copy(src: *const c_char,
                          dst: *const c_char,
                          flags: EinaFileCopyFlags,
                          cb: EinaFileCopyProgress,
                          cb_data: *const c_void)
     -> EinaBool;
    pub fn eina_file_open(name: *const c_char,
                          shared: EinaBool) -> *mut EinaFile;
    pub fn eina_file_virtualize(virtual_name: *const c_char,
                                data: *const c_void,
                                length: c_ulonglong,
                                copy: EinaBool) -> *mut EinaFile;
    pub fn eina_file_virtual(file: *mut EinaFile) -> EinaBool;
    pub fn eina_file_refresh(file: *mut EinaFile) -> EinaBool;
    pub fn eina_file_dup(file: *const EinaFile) -> *mut EinaFile;
    pub fn eina_file_close(file: *mut EinaFile);
    pub fn eina_file_size_get(file: *const EinaFile) -> size_t;
    pub fn eina_file_mtime_get(file: *const EinaFile) -> time_t;
    pub fn eina_file_filename_get(file: *const EinaFile)
     -> *const c_char;
    pub fn eina_file_xattr_get(file: *mut EinaFile) -> *mut EinaIterator;
    pub fn eina_file_xattr_value_get(file: *mut EinaFile)
     -> *mut EinaIterator;
    pub fn eina_file_map_all(file: *mut EinaFile, rule: EinaFilePopulate)
     -> *mut c_void;
    pub fn eina_file_map_new(file: *mut EinaFile, rule: EinaFilePopulate,
                             offset: c_ulong,
                             length: c_ulong)
     -> *mut c_void;
    pub fn eina_file_map_free(file: *mut EinaFile,
                              map: *mut c_void);
    pub fn eina_file_map_populate(file: *mut EinaFile,
                                  rule: EinaFilePopulate,
                                  map: *const c_void,
                                  offset: c_ulong,
                                  length: c_ulong);
    pub fn eina_file_map_lines(file: *mut EinaFile) -> *mut EinaIterator;
    pub fn eina_file_map_faulted(file: *mut EinaFile,
                                 map: *mut c_void)
     -> EinaBool;
    pub fn eina_list_append(list: *mut EinaList,
                            data: *const c_void)
     -> *mut EinaList;
    pub fn eina_list_prepend(list: *mut EinaList,
                             data: *const c_void)
     -> *mut EinaList;
    pub fn eina_list_append_relative(list: *mut EinaList,
                                     data: *const c_void,
                                     relative: *const c_void)
     -> *mut EinaList;
    pub fn eina_list_append_relative_list(list: *mut EinaList,
                                          data: *const c_void,
                                          relative: *mut EinaList)
     -> *mut EinaList;
    pub fn eina_list_prepend_relative(list: *mut EinaList,
                                      data: *const c_void,
                                      relative: *const c_void)
     -> *mut EinaList;
    pub fn eina_list_prepend_relative_list(list: *mut EinaList,
                                           data:
                                               *const c_void,
                                           relative: *mut EinaList)
     -> *mut EinaList;
    pub fn eina_list_sorted_insert(list: *mut EinaList,
                                   func: EinaCompareCb,
                                   data: *const c_void)
     -> *mut EinaList;
    pub fn eina_list_remove(list: *mut EinaList,
                            data: *const c_void)
     -> *mut EinaList;
    pub fn eina_list_remove_list(list: *mut EinaList,
                                 remove_list: *mut EinaList)
     -> *mut EinaList;
    pub fn eina_list_promote_list(list: *mut EinaList,
                                  move_list: *mut EinaList)
     -> *mut EinaList;
    pub fn eina_list_demote_list(list: *mut EinaList,
                                 move_list: *mut EinaList) -> *mut EinaList;
    pub fn eina_list_data_find(list: *const EinaList,
                               data: *const c_void)
     -> *mut c_void;
    pub fn eina_list_data_find_list(list: *const EinaList,
                                    data: *const c_void)
     -> *mut EinaList;
    pub fn eina_list_move(to: *mut *mut EinaList, from: *mut *mut EinaList,
                          data: *mut c_void) -> EinaBool;
    pub fn eina_list_move_list(to: *mut *mut EinaList,
                               from: *mut *mut EinaList,
                               data: *mut EinaList) -> EinaBool;
    pub fn eina_list_free(list: *mut EinaList) -> *mut EinaList;
    pub fn eina_list_nth(list: *const EinaList, n: c_uint)
     -> *mut c_void;
    pub fn eina_list_nth_list(list: *const EinaList,
                              n: c_uint) -> *mut EinaList;
    pub fn eina_list_reverse(list: *mut EinaList) -> *mut EinaList;
    pub fn eina_list_reverse_clone(list: *const EinaList) -> *mut EinaList;
    pub fn eina_list_clone(list: *const EinaList) -> *mut EinaList;
    pub fn eina_list_sort(list: *mut EinaList, limit: c_uint,
                          func: EinaCompareCb) -> *mut EinaList;
    pub fn eina_list_shuffle(list: *mut EinaList, func: EinaRandomCb)
     -> *mut EinaList;
    pub fn eina_list_merge(left: *mut EinaList, right: *mut EinaList)
     -> *mut EinaList;
    pub fn eina_list_sorted_merge(left: *mut EinaList, right: *mut EinaList,
                                  func: EinaCompareCb) -> *mut EinaList;
    pub fn eina_list_split_list(list: *mut EinaList,
                                relative: *mut EinaList,
                                right: *mut *mut EinaList) -> *mut EinaList;
    pub fn eina_list_search_sorted_near_list(list: *const EinaList,
                                             func: EinaCompareCb,
                                             data:
                                                 *const c_void,
                                             result_cmp:
                                                 *mut c_int)
     -> *mut EinaList;
    pub fn eina_list_search_sorted_list(list: *const EinaList,
                                        func: EinaCompareCb,
                                        data: *const c_void)
     -> *mut EinaList;
    pub fn eina_list_search_sorted(list: *const EinaList,
                                   func: EinaCompareCb,
                                   data: *const c_void)
     -> *mut c_void;
    pub fn eina_list_search_unsorted_list(list: *const EinaList,
                                          func: EinaCompareCb,
                                          data: *const c_void)
     -> *mut EinaList;
    pub fn eina_list_search_unsorted(list: *const EinaList,
                                     func: EinaCompareCb,
                                     data: *const c_void)
     -> *mut c_void;
    pub fn eina_list_iterator_new(list: *const EinaList)
     -> *mut EinaIterator;
    pub fn eina_list_iterator_reversed_new(list: *const EinaList)
     -> *mut EinaIterator;
    pub fn eina_list_accessor_new(list: *const EinaList)
     -> *mut EinaAccessor;
    pub fn eina_list_data_idx(list: *const EinaList,
                              data: *mut c_void)
     -> c_int;
    pub fn eina_hash_new(key_length_cb: EinaKeyLength,
                         key_cmp_cb: EinaKeyCmp, key_hash_cb: EinaKeyHash,
                         data_free_cb: EinaFreeCb,
                         buckets_power_size: c_int)
     -> *mut EinaHash;
    pub fn eina_hash_free_cb_set(hash: *mut EinaHash,
                                 data_free_cb: EinaFreeCb);
    pub fn eina_hash_string_djb2_new(data_free_cb: EinaFreeCb)
     -> *mut EinaHash;
    pub fn eina_hash_string_superfast_new(data_free_cb: EinaFreeCb)
     -> *mut EinaHash;
    pub fn eina_hash_string_small_new(data_free_cb: EinaFreeCb)
     -> *mut EinaHash;
    pub fn eina_hash_int32_new(data_free_cb: EinaFreeCb) -> *mut EinaHash;
    pub fn eina_hash_int64_new(data_free_cb: EinaFreeCb) -> *mut EinaHash;
    pub fn eina_hash_pointer_new(data_free_cb: EinaFreeCb)
     -> *mut EinaHash;
    pub fn eina_hash_stringshared_new(data_free_cb: EinaFreeCb)
     -> *mut EinaHash;
    pub fn eina_hash_add(hash: *mut EinaHash,
                         key: *const c_void,
                         data: *const c_void) -> EinaBool;
    pub fn eina_hash_direct_add(hash: *mut EinaHash,
                                key: *const c_void,
                                data: *const c_void)
     -> EinaBool;
    pub fn eina_hash_del(hash: *mut EinaHash,
                         key: *const c_void,
                         data: *const c_void) -> EinaBool;
    pub fn eina_hash_find(hash: *const EinaHash,
                          key: *const c_void)
     -> *mut c_void;
    pub fn eina_hash_modify(hash: *mut EinaHash,
                            key: *const c_void,
                            data: *const c_void)
     -> *mut c_void;
    pub fn eina_hash_set(hash: *mut EinaHash,
                         key: *const c_void,
                         data: *const c_void)
     -> *mut c_void;
    pub fn eina_hash_move(hash: *mut EinaHash,
                          old_key: *const c_void,
                          new_key: *const c_void)
     -> EinaBool;
    pub fn eina_hash_free(hash: *mut EinaHash);
    pub fn eina_hash_free_buckets(hash: *mut EinaHash);
    pub fn eina_hash_population(hash: *const EinaHash)
     -> c_int;
    pub fn eina_hash_add_by_hash(hash: *mut EinaHash,
                                 key: *const c_void,
                                 key_length: c_int,
                                 key_hash: c_int,
                                 data: *const c_void)
     -> EinaBool;
    pub fn eina_hash_direct_add_by_hash(hash: *mut EinaHash,
                                        key: *const c_void,
                                        key_length: c_int,
                                        key_hash: c_int,
                                        data: *const c_void)
     -> EinaBool;
    pub fn eina_hash_del_by_key_hash(hash: *mut EinaHash,
                                     key: *const c_void,
                                     key_length: c_int,
                                     key_hash: c_int)
     -> EinaBool;
    pub fn eina_hash_del_by_key(hash: *mut EinaHash,
                                key: *const c_void)
     -> EinaBool;
    pub fn eina_hash_del_by_data(hash: *mut EinaHash,
                                 data: *const c_void)
     -> EinaBool;
    pub fn eina_hash_del_by_hash(hash: *mut EinaHash,
                                 key: *const c_void,
                                 key_length: c_int,
                                 key_hash: c_int,
                                 data: *const c_void)
     -> EinaBool;
    pub fn eina_hash_find_by_hash(hash: *const EinaHash,
                                  key: *const c_void,
                                  key_length: c_int,
                                  key_hash: c_int)
     -> *mut c_void;
    pub fn eina_hash_modify_by_hash(hash: *mut EinaHash,
                                    key: *const c_void,
                                    key_length: c_int,
                                    key_hash: c_int,
                                    data: *const c_void)
     -> *mut c_void;
    pub fn eina_hash_iterator_key_new(hash: *const EinaHash)
     -> *mut EinaIterator;
    pub fn eina_hash_iterator_data_new(hash: *const EinaHash)
     -> *mut EinaIterator;
    pub fn eina_hash_iterator_tuple_new(hash: *const EinaHash)
     -> *mut EinaIterator;
    pub fn eina_hash_foreach(hash: *const EinaHash, func: EinaHashForeach,
                             fdata: *const c_void);
    pub fn eina_hash_list_append(hash: *mut EinaHash,
                                 key: *const c_void,
                                 data: *const c_void);
    pub fn eina_hash_list_prepend(hash: *mut EinaHash,
                                  key: *const c_void,
                                  data: *const c_void);
    pub fn eina_hash_list_remove(hash: *mut EinaHash,
                                 key: *const c_void,
                                 data: *const c_void);
    pub fn eina_hash_superfast(key: *const c_char,
                               len: c_int)
     -> c_int;
    pub fn _eina_crc(data: *const c_char,
                     len: c_int, seed: c_uint,
                     start_stream: EinaBool) -> c_uint;
    pub fn eina_lalloc_new(data: *mut c_void,
                           alloc_cb: EinaLallocAlloc,
                           free_cb: EinaLallocFree,
                           num_init: c_int)
     -> *mut EinaLalloc;
    pub fn eina_lalloc_free(a: *mut EinaLalloc);
    pub fn eina_lalloc_elements_add(a: *mut EinaLalloc,
                                    num: c_int) -> EinaBool;
    pub fn eina_lalloc_element_add(a: *mut EinaLalloc) -> EinaBool;
    pub fn eina_module_new(file: *const c_char)
     -> *mut EinaModule;
    pub fn eina_module_free(module: *mut EinaModule) -> EinaBool;
    pub fn eina_module_load(module: *mut EinaModule) -> EinaBool;
    pub fn eina_module_unload(module: *mut EinaModule) -> EinaBool;
    pub fn eina_module_symbol_get(module: *const EinaModule,
                                  symbol: *const c_char)
     -> *mut c_void;
    pub fn eina_module_file_get(module: *const EinaModule)
     -> *const c_char;
    pub fn eina_module_symbol_global_set(module: *mut EinaModule,
                                         global: EinaBool);
    pub fn eina_module_symbol_path_get(symbol: *const c_void,
                                       sub_dir: *const c_char)
     -> *mut c_char;
    pub fn eina_module_environment_path_get(env:
                                                *const c_char,
                                            sub_dir:
                                                *const c_char)
     -> *mut c_char;
    pub fn eina_module_arch_list_get(array: *mut EinaArray,
                                     path: *const c_char,
                                     arch: *const c_char)
     -> *mut EinaArray;
    pub fn eina_module_list_get(array: *mut EinaArray,
                                path: *const c_char,
                                recursive: EinaBool, cb: EinaModuleCb,
                                data: *mut c_void)
     -> *mut EinaArray;
    pub fn eina_module_list_load(array: *mut EinaArray);
    pub fn eina_module_list_unload(array: *mut EinaArray);
    pub fn eina_module_list_free(array: *mut EinaArray);
    pub fn eina_module_find(array: *const EinaArray,
                            module: *const c_char)
     -> *mut EinaModule;
    pub fn eina_mempool_add(name: *const c_char,
                            context: *const c_char,
                            options: *const c_char, ...)
     -> *mut EinaMempool;
    pub fn eina_mempool_del(mp: *mut EinaMempool);
    pub fn eina_mempool_repack(mp: *mut EinaMempool,
                               cb: EinaMempoolRepackCb,
                               data: *mut c_void);
    pub fn eina_mempool_gc(mp: *mut EinaMempool);
    pub fn eina_mempool_statistics(mp: *mut EinaMempool);
//    pub fn eina_mempool_register(be: *mut EinaMempoolBackend) -> EinaBool;
//    pub fn eina_mempool_unregister(be: *mut EinaMempoolBackend);
    pub fn eina_log_threads_enable();
//    pub fn eina_log_print_cb_set(cb: EinaLogPrintCb,
//                                 data: *mut c_void);
    pub fn eina_log_level_set(level: c_int);
    pub fn eina_log_level_get() -> c_int;
    pub fn eina_log_main_thread_check() -> EinaBool;
    pub fn eina_log_color_disable_set(disabled: EinaBool);
    pub fn eina_log_color_disable_get() -> EinaBool;
    pub fn eina_log_file_disable_set(disabled: EinaBool);
    pub fn eina_log_file_disable_get() -> EinaBool;
    pub fn eina_log_function_disable_set(disabled: EinaBool);
    pub fn eina_log_function_disable_get() -> EinaBool;
    pub fn eina_log_abort_on_critical_set(abort_on_critical: EinaBool);
    pub fn eina_log_abort_on_critical_get() -> EinaBool;
    pub fn eina_log_abort_on_critical_level_set(critical_level:
                                                    c_int);
    pub fn eina_log_abort_on_critical_level_get() -> c_int;
    pub fn eina_log_domain_level_set(domain_name:
                                         *const c_char,
                                     level: c_int);
    pub fn eina_log_domain_level_get(domain_name:
                                         *const c_char)
     -> c_int;
    pub fn eina_log_domain_registered_level_get(domain: c_int)
     -> c_int;
    pub fn eina_log_domain_registered_level_set(domain: c_int,
                                                level: c_int);
    pub fn eina_log_domain_register(name: *const c_char,
                                    color: *const c_char)
     -> c_int;
    pub fn eina_log_domain_unregister(domain: c_int);
    pub fn eina_log_print(domain: c_int,
                          level: EinaLogLevel,
                          file: *const c_char,
                          function: *const c_char,
                          line: c_int,
                          fmt: *const c_char, ...);
/*    pub fn eina_log_vprint(domain: c_int,
                           level: EinaLogLevel,
                           file: *const c_char,
                           fnc: *const c_char,
                           line: c_int,
                           fmt: *const c_char, args: va_list);

    pub fn eina_log_print_cb_stdout(d: *const EinaLogDomain,
                                    level: EinaLogLevel,
                                    file: *const c_char,
                                    fnc: *const c_char,
                                    line: c_int,
                                    fmt: *const c_char,
                                    data: *mut c_void,
                                    args: va_list);
    pub fn eina_log_print_cb_stderr(d: *const EinaLogDomain,
                                    level: EinaLogLevel,
                                    file: *const c_char,
                                    fnc: *const c_char,
                                    line: c_int,
                                    fmt: *const c_char,
                                    data: *mut c_void,
                                    args: va_list);
    pub fn eina_log_print_cb_file(d: *const EinaLogDomain,
                                  level: EinaLogLevel,
                                  file: *const c_char,
                                  fnc: *const c_char,
                                  line: c_int,
                                  fmt: *const c_char,
                                  data: *mut c_void,
                                  args: va_list);
    pub fn eina_log_print_cb_journald(d: *const EinaLogDomain,
                                      level: EinaLogLevel,
                                      file: *const c_char,
                                      fnc: *const c_char,
                                      line: c_int,
                                      fmt: *const c_char,
                                      data: *mut c_void,
                                      args: va_list);
*/
    pub fn eina_log_console_color_set(fp: *mut FILE,
                                      color: *const c_char);
    pub fn eina_log_timing(domain: c_int,
                           state: EinaLogState,
                           phase: *const c_char);
    pub fn eina_inarray_new(member_size: c_uint,
                            step: c_uint)
     -> *mut EinaInarray;
    pub fn eina_inarray_free(array: *mut EinaInarray);
    pub fn eina_inarray_step_set(array: *mut EinaInarray,
                                 sizeof_eina_inarray: c_uint,
                                 member_size: c_uint,
                                 step: c_uint);
    pub fn eina_inarray_flush(array: *mut EinaInarray);
    pub fn eina_inarray_push(array: *mut EinaInarray,
                             data: *const c_void)
     -> c_int;
    pub fn eina_inarray_grow(array: *mut EinaInarray,
                             size: c_uint)
     -> *mut c_void;
    pub fn eina_inarray_insert(array: *mut EinaInarray,
                               data: *const c_void,
                               compare: EinaCompareCb)
     -> c_int;
    pub fn eina_inarray_insert_sorted(array: *mut EinaInarray,
                                      data: *const c_void,
                                      compare: EinaCompareCb)
     -> c_int;
    pub fn eina_inarray_remove(array: *mut EinaInarray,
                               data: *const c_void)
     -> c_int;
    pub fn eina_inarray_pop(array: *mut EinaInarray)
     -> *mut c_void;
    pub fn eina_inarray_nth(array: *const EinaInarray,
                            position: c_uint)
     -> *mut c_void;
    pub fn eina_inarray_insert_at(array: *mut EinaInarray,
                                  position: c_uint,
                                  data: *const c_void)
     -> EinaBool;
    pub fn eina_inarray_alloc_at(array: *mut EinaInarray,
                                 position: c_uint,
                                 member_count: c_uint)
     -> *mut c_void;
    pub fn eina_inarray_replace_at(array: *mut EinaInarray,
                                   position: c_uint,
                                   data: *const c_void)
     -> EinaBool;
    pub fn eina_inarray_remove_at(array: *mut EinaInarray,
                                  position: c_uint)
     -> EinaBool;
    pub fn eina_inarray_reverse(array: *mut EinaInarray);
    pub fn eina_inarray_sort(array: *mut EinaInarray,
                             compare: EinaCompareCb);
    pub fn eina_inarray_search(array: *const EinaInarray,
                               data: *const c_void,
                               compare: EinaCompareCb)
     -> c_int;
    pub fn eina_inarray_search_sorted(array: *const EinaInarray,
                                      data: *const c_void,
                                      compare: EinaCompareCb)
     -> c_int;
    pub fn eina_inarray_foreach(array: *const EinaInarray,
                                function: EinaEachCb,
                                user_data: *const c_void)
     -> EinaBool;
    pub fn eina_inarray_foreach_remove(array: *mut EinaInarray,
                                       _match: EinaEachCb,
                                       user_data:
                                           *const c_void)
     -> c_int;
    pub fn eina_inarray_resize(array: *mut EinaInarray,
                               new_size: c_uint) -> EinaBool;
    pub fn eina_inarray_count(array: *const EinaInarray)
     -> c_uint;
    pub fn eina_inarray_iterator_new(array: *const EinaInarray)
     -> *mut EinaIterator;
    pub fn eina_inarray_iterator_reversed_new(array: *const EinaInarray)
     -> *mut EinaIterator;
    pub fn eina_inarray_accessor_new(array: *const EinaInarray)
     -> *mut EinaAccessor;
    pub fn eina_binshare_add_length(obj: *const c_void,
                                    olen: c_uint)
     -> *const c_void;
    pub fn eina_binshare_ref(obj: *const c_void)
     -> *const c_void;
    pub fn eina_binshare_del(obj: *const c_void);
    pub fn eina_binshare_length(obj: *const c_void)
     -> c_int;
    pub fn eina_binshare_dump();
    pub fn eina_stringshare_add_length(str: *const c_char,
                                       slen: c_uint)
     -> *mut EinaStringshare;
    pub fn eina_stringshare_add(str: *const c_char)
     -> *mut EinaStringshare;
    pub fn eina_stringshare_printf(fmt: *const c_char, ...)
     -> *mut EinaStringshare;
//    pub fn eina_stringshare_vprintf(fmt: *const c_char,
//                                    args: va_list) -> *mut EinaStringshare;
    pub fn eina_stringshare_nprintf(len: c_uint,
                                    fmt: *const c_char, ...)
     -> *mut EinaStringshare;
    pub fn eina_stringshare_ref(str: *mut EinaStringshare)
     -> *mut EinaStringshare;
    pub fn eina_stringshare_del(str: *mut EinaStringshare);
    pub fn eina_stringshare_strlen(str: *mut EinaStringshare)
     -> c_int;
    pub fn eina_stringshare_dump();
    pub fn eina_unicode_strlen(ustr: *const EinaUnicode) -> size_t;
    pub fn eina_unicode_strnlen(ustr: *const EinaUnicode,
                                n: c_int) -> size_t;
    pub fn eina_unicode_strdup(text: *const EinaUnicode)
     -> *mut EinaUnicode;
    pub fn eina_unicode_strndup(text: *const EinaUnicode, n: size_t)
     -> *mut EinaUnicode;
    pub fn eina_unicode_strcmp(a: *const EinaUnicode, b: *const EinaUnicode)
     -> c_int;
    pub fn eina_unicode_strcpy(dest: *mut EinaUnicode,
                               source: *const EinaUnicode)
     -> *mut EinaUnicode;
    pub fn eina_unicode_strstr(haystack: *const EinaUnicode,
                               needle: *const EinaUnicode)
     -> *mut EinaUnicode;
    pub fn eina_unicode_strncpy(dest: *mut EinaUnicode,
                                source: *const EinaUnicode, n: size_t)
     -> *mut EinaUnicode;
    pub fn eina_unicode_escape(str: *const EinaUnicode) -> *mut EinaUnicode;
    pub fn eina_unicode_utf8_get_next(buf: *const c_char,
                                      iindex: *mut c_int)
     -> EinaUnicode;
    pub fn eina_unicode_utf8_get_prev(buf: *const c_char,
                                      iindex: *mut c_int)
     -> EinaUnicode;
    pub fn eina_unicode_utf8_get_len(buf: *const c_char)
     -> c_int;
    pub fn eina_unicode_utf8_to_unicode(utf: *const c_char,
                                        _len: *mut c_int)
     -> *mut EinaUnicode;
    pub fn eina_unicode_unicode_to_utf8(uni: *const EinaUnicode,
                                        _len: *mut c_int)
     -> *mut c_char;
    pub fn _eina_unicode_utf8_next_get(ind: c_int,
                                       d: c_uchar,
                                       buf: *const c_char,
                                       iindex: *mut c_int)
     -> EinaUnicode;
    pub fn eina_ustringshare_add_length(str: *const EinaUnicode,
                                        slen: c_uint)
     -> *const EinaUnicode;
    pub fn eina_ustringshare_add(str: *const EinaUnicode)
     -> *const EinaUnicode;
    pub fn eina_ustringshare_ref(str: *const EinaUnicode)
     -> *const EinaUnicode;
    pub fn eina_ustringshare_del(str: *const EinaUnicode);
    pub fn eina_ustringshare_strlen(str: *const EinaUnicode)
     -> c_int;
    pub fn eina_ustringshare_dump();
    pub fn eina_counter_new(name: *const c_char)
     -> *mut EinaCounter;
    pub fn eina_counter_free(counter: *mut EinaCounter);
    pub fn eina_counter_start(counter: *mut EinaCounter);
    pub fn eina_counter_stop(counter: *mut EinaCounter,
                             specimen: c_int);
    pub fn eina_counter_dump(counter: *mut EinaCounter)
     -> *mut c_char;
    pub fn eina_rbtree_inline_insert(root: *mut EinaRbtree,
                                     node: *mut EinaRbtree,
                                     cmp: EinaRbtreeCmpNodeCb,
                                     data: *const c_void)
     -> *mut EinaRbtree;
    pub fn eina_rbtree_inline_remove(root: *mut EinaRbtree,
                                     node: *mut EinaRbtree,
                                     cmp: EinaRbtreeCmpNodeCb,
                                     data: *const c_void)
     -> *mut EinaRbtree;
    pub fn eina_rbtree_delete(root: *mut EinaRbtree,
                              func: EinaRbtreeFreeCb,
                              data: *mut c_void);
    pub fn eina_rbtree_iterator_prefix(root: *const EinaRbtree)
     -> *mut EinaIterator;
    pub fn eina_rbtree_iterator_infix(root: *const EinaRbtree)
     -> *mut EinaIterator;
    pub fn eina_rbtree_iterator_postfix(root: *const EinaRbtree)
     -> *mut EinaIterator;
    pub fn eina_benchmark_new(name: *const c_char,
                              run: *const c_char)
     -> *mut EinaBenchmark;
    pub fn eina_benchmark_free(bench: *mut EinaBenchmark);
    pub fn eina_benchmark_register(bench: *mut EinaBenchmark,
                                   name: *const c_char,
                                   bench_cb: EinaBenchmarkSpecimens,
                                   count_start: c_int,
                                   count_end: c_int,
                                   count_step: c_int)
     -> EinaBool;
    pub fn eina_benchmark_run(bench: *mut EinaBenchmark) -> *mut EinaArray;
    pub fn eina_convert_itoa(n: c_int,
                             s: *mut c_char)
     -> c_int;
    pub fn eina_convert_xtoa(n: c_uint,
                             s: *mut c_char)
     -> c_int;
    pub fn eina_convert_dtoa(d: c_double,
                             des: *mut c_char)
     -> c_int;
    pub fn eina_convert_atod(src: *const c_char,
                             length: c_int,
                             m: *mut c_longlong,
                             e: *mut c_long) -> EinaBool;
    pub fn eina_convert_fptoa(fp: EinaF32p32,
                              des: *mut c_char)
     -> c_int;
    pub fn eina_convert_atofp(src: *const c_char,
                              length: c_int,
                              fp: *mut EinaF32p32) -> EinaBool;
    pub fn eina_cpu_features_get() -> EinaCpuFeatures;
    pub fn eina_cpu_count() -> c_int;
    pub fn eina_cpu_page_size() -> c_int;
    pub fn eina_sched_prio_drop();
    pub fn eina_tiler_new(w: c_int, h: c_int)
     -> *mut EinaTiler;
    pub fn eina_tiler_free(t: *mut EinaTiler);
    pub fn eina_tiler_tile_size_set(t: *mut EinaTiler,
                                    w: c_int,
                                    h: c_int);
    pub fn eina_tiler_area_size_set(t: *mut EinaTiler,
                                    w: c_int,
                                    h: c_int);
    pub fn eina_tiler_area_size_get(t: *const EinaTiler,
                                    w: *mut c_int,
                                    h: *mut c_int);
    pub fn eina_tiler_strict_set(t: *mut EinaTiler, strict: EinaBool);
    pub fn eina_tiler_empty(t: *mut EinaTiler) -> EinaBool;
    pub fn eina_tiler_rect_add(t: *mut EinaTiler, r: *const EinaRectangle)
     -> EinaBool;
    pub fn eina_tiler_rect_del(t: *mut EinaTiler, r: *const EinaRectangle);
    pub fn eina_tiler_clear(t: *mut EinaTiler);
    pub fn eina_tiler_iterator_new(t: *const EinaTiler)
     -> *mut EinaIterator;
    pub fn eina_tile_grid_slicer_iterator_new(x: c_int,
                                              y: c_int,
                                              w: c_int,
                                              h: c_int,
                                              tile_w: c_int,
                                              tile_h: c_int)
     -> *mut EinaIterator;
    pub fn eina_tiler_union(dst: *mut EinaTiler, src: *mut EinaTiler)
     -> EinaBool;
    pub fn eina_tiler_subtract(dst: *mut EinaTiler, src: *mut EinaTiler)
     -> EinaBool;
    pub fn eina_tiler_intersection(t1: *mut EinaTiler, t2: *mut EinaTiler)
     -> *mut EinaTiler;
    pub fn eina_tiler_equal(t1: *mut EinaTiler, t2: *mut EinaTiler)
     -> EinaBool;
    pub fn eina_thread_self() -> EinaThread;
    pub fn eina_thread_equal(t1: EinaThread, t2: EinaThread) -> EinaBool;
    pub fn eina_thread_create(t: *mut EinaThread, prio: EinaThreadPriority,
                              affinity: c_int,
                              func: EinaThreadCb,
                              data: *const c_void)
     -> EinaBool;
    pub fn eina_thread_join(t: EinaThread) -> *mut c_void;
    pub fn eina_thread_name_set(t: EinaThread,
                                name: *const c_char)
     -> EinaBool;
    pub fn eina_hamster_count() -> c_int;
    pub fn eina_matrixsparse_new(rows: c_ulong,
                                 cols: c_ulong,
                                 free_func:
                                     Option<unsafe extern "C" fn(user_data:
                                                                                    *mut c_void,
                                                                                cell_data:
                                                                                    *mut c_void)>,
                                 user_data: *const c_void)
     -> *mut EinaMatrixsparse;
    pub fn eina_matrixsparse_free(m: *mut EinaMatrixsparse);
    pub fn eina_matrixsparse_size_get(m: *const EinaMatrixsparse,
                                      rows: *mut c_ulong,
                                      cols: *mut c_ulong);
    pub fn eina_matrixsparse_size_set(m: *mut EinaMatrixsparse,
                                      rows: c_ulong,
                                      cols: c_ulong)
     -> EinaBool;
    pub fn eina_matrixsparse_cell_idx_get(m: *const EinaMatrixsparse,
                                          row: c_ulong,
                                          col: c_ulong,
                                          cell:
                                              *mut *mut EinaMatrixsparseCell)
     -> EinaBool;
    pub fn eina_matrixsparse_cell_data_get(cell:
                                               *const EinaMatrixsparseCell)
     -> *mut c_void;
    pub fn eina_matrixsparse_data_idx_get(m: *const EinaMatrixsparse,
                                          row: c_ulong,
                                          col: c_ulong)
     -> *mut c_void;
    pub fn eina_matrixsparse_cell_position_get(cell:
                                                   *const EinaMatrixsparseCell,
                                               row:
                                                   *mut c_ulong,
                                               col:
                                                   *mut c_ulong)
     -> EinaBool;
    pub fn eina_matrixsparse_cell_data_replace(cell:
                                                   *mut EinaMatrixsparseCell,
                                               data:
                                                   *const c_void,
                                               p_old:
                                                   *mut *mut c_void)
     -> EinaBool;
    pub fn eina_matrixsparse_cell_data_set(cell: *mut EinaMatrixsparseCell,
                                           data:
                                               *const c_void)
     -> EinaBool;
    pub fn eina_matrixsparse_data_idx_replace(m: *mut EinaMatrixsparse,
                                              row: c_ulong,
                                              col: c_ulong,
                                              data:
                                                  *const c_void,
                                              p_old:
                                                  *mut *mut c_void)
     -> EinaBool;
    pub fn eina_matrixsparse_data_idx_set(m: *mut EinaMatrixsparse,
                                          row: c_ulong,
                                          col: c_ulong,
                                          data: *const c_void)
     -> EinaBool;
    pub fn eina_matrixsparse_row_idx_clear(m: *mut EinaMatrixsparse,
                                           row: c_ulong)
     -> EinaBool;
    pub fn eina_matrixsparse_column_idx_clear(m: *mut EinaMatrixsparse,
                                              col: c_ulong)
     -> EinaBool;
    pub fn eina_matrixsparse_cell_idx_clear(m: *mut EinaMatrixsparse,
                                            row: c_ulong,
                                            col: c_ulong)
     -> EinaBool;
    pub fn eina_matrixsparse_cell_clear(cell: *mut EinaMatrixsparseCell)
     -> EinaBool;
    pub fn eina_matrixsparse_iterator_new(m: *const EinaMatrixsparse)
     -> *mut EinaIterator;
    pub fn eina_matrixsparse_iterator_complete_new(m:
                                                       *const EinaMatrixsparse)
     -> *mut EinaIterator;
    pub fn eina_strbuf_new() -> *mut EinaStrbuf;
    pub fn eina_strbuf_manage_new(str: *mut c_char)
     -> *mut EinaStrbuf;
    pub fn eina_strbuf_manage_new_length(str: *mut c_char,
                                         length: size_t) -> *mut EinaStrbuf;
    pub fn eina_strbuf_manage_read_only_new_length(str:
                                                       *const c_char,
                                                   length: size_t)
     -> *mut EinaStrbuf;
    pub fn eina_strbuf_free(buf: *mut EinaStrbuf);
    pub fn eina_strbuf_reset(buf: *mut EinaStrbuf);
    pub fn eina_strbuf_append(buf: *mut EinaStrbuf,
                              str: *const c_char)
     -> EinaBool;
    pub fn eina_strbuf_append_escaped(buf: *mut EinaStrbuf,
                                      str: *const c_char)
     -> EinaBool;
    pub fn eina_strbuf_append_n(buf: *mut EinaStrbuf,
                                str: *const c_char,
                                maxlen: size_t) -> EinaBool;
    pub fn eina_strbuf_append_length(buf: *mut EinaStrbuf,
                                     str: *const c_char,
                                     length: size_t) -> EinaBool;
    pub fn eina_strbuf_append_buffer(buf: *mut EinaStrbuf,
                                     data: *const EinaStrbuf) -> EinaBool;
    pub fn eina_strbuf_append_char(buf: *mut EinaStrbuf,
                                   c: c_char) -> EinaBool;
    pub fn eina_strbuf_append_printf(buf: *mut EinaStrbuf,
                                     fmt: *const c_char, ...)
     -> EinaBool;
/*    pub fn eina_strbuf_append_vprintf(buf: *mut EinaStrbuf,
                                      fmt: *const c_char,
                                      args: va_list) -> EinaBool;
*/
    pub fn eina_strbuf_insert(buf: *mut EinaStrbuf,
                              str: *const c_char, pos: size_t)
     -> EinaBool;
    pub fn eina_strbuf_insert_escaped(buf: *mut EinaStrbuf,
                                      str: *const c_char,
                                      pos: size_t) -> EinaBool;
    pub fn eina_strbuf_insert_n(buf: *mut EinaStrbuf,
                                str: *const c_char,
                                maxlen: size_t, pos: size_t) -> EinaBool;
    pub fn eina_strbuf_insert_length(buf: *mut EinaStrbuf,
                                     str: *const c_char,
                                     length: size_t, pos: size_t)
     -> EinaBool;
    pub fn eina_strbuf_insert_char(buf: *mut EinaStrbuf,
                                   c: c_char, pos: size_t)
     -> EinaBool;
    pub fn eina_strbuf_insert_printf(buf: *mut EinaStrbuf,
                                     fmt: *const c_char,
                                     pos: size_t, ...) -> EinaBool;
/*    pub fn eina_strbuf_insert_vprintf(buf: *mut EinaStrbuf,
                                      fmt: *const c_char,
                                      pos: size_t, args: va_list)
     -> EinaBool;
*/
    pub fn eina_strbuf_remove(buf: *mut EinaStrbuf, start: size_t,
                              end: size_t) -> EinaBool;
    pub fn eina_strbuf_string_get(buf: *const EinaStrbuf)
     -> *const c_char;
    pub fn eina_strbuf_string_steal(buf: *mut EinaStrbuf)
     -> *mut c_char;
    pub fn eina_strbuf_string_free(buf: *mut EinaStrbuf);
    pub fn eina_strbuf_length_get(buf: *const EinaStrbuf) -> size_t;
    pub fn eina_strbuf_replace(buf: *mut EinaStrbuf,
                               str: *const c_char,
                               with: *const c_char,
                               n: c_uint) -> EinaBool;
    pub fn eina_strbuf_replace_all(buf: *mut EinaStrbuf,
                                   str: *const c_char,
                                   with: *const c_char)
     -> c_int;
    pub fn eina_strbuf_trim(buf: *mut EinaStrbuf);
    pub fn eina_strbuf_ltrim(buf: *mut EinaStrbuf);
    pub fn eina_strbuf_rtrim(buf: *mut EinaStrbuf);
    pub fn eina_binbuf_new() -> *mut EinaBinbuf;
    pub fn eina_binbuf_manage_new_length(str: *mut c_uchar,
                                         length: size_t) -> *mut EinaBinbuf;
    pub fn eina_binbuf_manage_new(str: *const c_uchar,
                                  length: size_t, ro: EinaBool)
     -> *mut EinaBinbuf;
    pub fn eina_binbuf_manage_read_only_new_length(str:
                                                       *const c_uchar,
                                                   length: size_t)
     -> *mut EinaBinbuf;
    pub fn eina_binbuf_free(buf: *mut EinaBinbuf);
    pub fn eina_binbuf_reset(buf: *mut EinaBinbuf);
    pub fn eina_binbuf_append_length(buf: *mut EinaBinbuf,
                                     str: *const c_uchar,
                                     length: size_t) -> EinaBool;
    pub fn eina_binbuf_append_buffer(buf: *mut EinaBinbuf,
                                     data: *const EinaBinbuf) -> EinaBool;
    pub fn eina_binbuf_append_char(buf: *mut EinaBinbuf,
                                   c: c_uchar) -> EinaBool;
    pub fn eina_binbuf_insert_length(buf: *mut EinaBinbuf,
                                     str: *const c_uchar,
                                     length: size_t, pos: size_t)
     -> EinaBool;
    pub fn eina_binbuf_insert_char(buf: *mut EinaBinbuf,
                                   c: c_uchar, pos: size_t)
     -> EinaBool;
    pub fn eina_binbuf_remove(buf: *mut EinaBinbuf, start: size_t,
                              end: size_t) -> EinaBool;
    pub fn eina_binbuf_string_get(buf: *const EinaBinbuf)
     -> *const c_uchar;
    pub fn eina_binbuf_string_steal(buf: *mut EinaBinbuf)
     -> *mut c_uchar;
    pub fn eina_binbuf_string_free(buf: *mut EinaBinbuf);
    pub fn eina_binbuf_length_get(buf: *const EinaBinbuf) -> size_t;
    pub fn eina_ustrbuf_new() -> *mut EinaUStrbuf;
    pub fn eina_ustrbuf_manage_new(str: *mut EinaUnicode)
     -> *mut EinaUStrbuf;
    pub fn eina_ustrbuf_manage_new_length(str: *mut EinaUnicode,
                                          length: size_t)
     -> *mut EinaUStrbuf;
    pub fn eina_ustrbuf_free(buf: *mut EinaUStrbuf);
    pub fn eina_ustrbuf_reset(buf: *mut EinaUStrbuf);
    pub fn eina_ustrbuf_append(buf: *mut EinaUStrbuf,
                               str: *const EinaUnicode) -> EinaBool;
    pub fn eina_ustrbuf_append_escaped(buf: *mut EinaUStrbuf,
                                       str: *const EinaUnicode) -> EinaBool;
    pub fn eina_ustrbuf_append_n(buf: *mut EinaUStrbuf,
                                 str: *const EinaUnicode, maxlen: size_t)
     -> EinaBool;
    pub fn eina_ustrbuf_append_length(buf: *mut EinaUStrbuf,
                                      str: *const EinaUnicode,
                                      length: size_t) -> EinaBool;
    pub fn eina_ustrbuf_append_char(buf: *mut EinaUStrbuf, c: EinaUnicode)
     -> EinaBool;
    pub fn eina_ustrbuf_insert(buf: *mut EinaUStrbuf,
                               str: *const EinaUnicode, pos: size_t)
     -> EinaBool;
    pub fn eina_ustrbuf_insert_escaped(buf: *mut EinaUStrbuf,
                                       str: *const EinaUnicode, pos: size_t)
     -> EinaBool;
    pub fn eina_ustrbuf_insert_n(buf: *mut EinaUStrbuf,
                                 str: *const EinaUnicode, maxlen: size_t,
                                 pos: size_t) -> EinaBool;
    pub fn eina_ustrbuf_insert_length(buf: *mut EinaUStrbuf,
                                      str: *const EinaUnicode,
                                      length: size_t, pos: size_t)
     -> EinaBool;
    pub fn eina_ustrbuf_insert_char(buf: *mut EinaUStrbuf, c: EinaUnicode,
                                    pos: size_t) -> EinaBool;
    pub fn eina_ustrbuf_remove(buf: *mut EinaUStrbuf, start: size_t,
                               end: size_t) -> EinaBool;
    pub fn eina_ustrbuf_string_get(buf: *const EinaUStrbuf)
     -> *const EinaUnicode;
    pub fn eina_ustrbuf_string_steal(buf: *mut EinaUStrbuf)
     -> *mut EinaUnicode;
    pub fn eina_ustrbuf_string_free(buf: *mut EinaUStrbuf);
    pub fn eina_ustrbuf_length_get(buf: *const EinaUStrbuf) -> size_t;
    pub fn eina_quadtree_new(w: size_t, h: size_t,
                             vertical: EinaQuadCallback,
                             horizontal: EinaQuadCallback)
     -> *mut EinaQuadTree;
    pub fn eina_quadtree_free(q: *mut EinaQuadTree);
    pub fn eina_quadtree_resize(q: *mut EinaQuadTree, w: size_t, h: size_t);
    pub fn eina_quadtree_cycle(q: *mut EinaQuadTree);
    pub fn eina_quadtree_increase(object: *mut EinaQuadTreeItem);
    pub fn eina_quadtree_add(q: *mut EinaQuadTree,
                             object: *const c_void)
     -> *mut EinaQuadTreeItem;
    pub fn eina_quadtree_del(object: *mut EinaQuadTreeItem) -> EinaBool;
    pub fn eina_quadtree_change(object: *mut EinaQuadTreeItem) -> EinaBool;
    pub fn eina_quadtree_hide(object: *mut EinaQuadTreeItem) -> EinaBool;
    pub fn eina_quadtree_show(object: *mut EinaQuadTreeItem) -> EinaBool;
    pub fn eina_quadtree_collide(q: *mut EinaQuadTree,
                                 x: c_int,
                                 y: c_int,
                                 w: c_int,
                                 h: c_int)
     -> *mut EinaInlist;
    pub fn eina_quadtree_object(list: *mut EinaInlist)
     -> *mut c_void;
    pub fn eina_simple_xml_parse(buf: *const c_char,
                                 buflen: c_uint,
                                 strip: EinaBool, func: EinaSimpleXmlCb,
                                 data: *const c_void)
     -> EinaBool;
    pub fn eina_simple_xml_tag_attributes_find(buf:
                                                   *const c_char,
                                               buflen: c_uint)
     -> *const c_char;
    pub fn eina_simple_xml_attributes_parse(buf:
                                                *const c_char,
                                            buflen: c_uint,
                                            func:
                                                EinaSimpleXmlAttributeCb,
                                            data:
                                                *const c_void)
     -> EinaBool;
    pub fn eina_simple_xml_attribute_w3c_parse(buf:
                                                   *const c_char,
                                               func:
                                                   EinaSimpleXmlAttributeCb,
                                               data:
                                                   *const c_void)
     -> EinaBool;
    pub fn eina_simple_xml_attribute_new(parent:
                                             *mut EinaSimpleXmlNodeTag,
                                         key: *const c_char,
                                         value: *const c_char)
     -> *mut EinaSimpleXmlAttribute;
    pub fn eina_simple_xml_attribute_free(attr:
                                              *mut EinaSimpleXmlAttribute);
    pub fn eina_simple_xml_node_tag_new(parent: *mut EinaSimpleXmlNodeTag,
                                        name: *const c_char)
     -> *mut EinaSimpleXmlNodeTag;
    pub fn eina_simple_xml_node_tag_free(tag: *mut EinaSimpleXmlNodeTag);
    pub fn eina_simple_xml_node_data_new(parent:
                                             *mut EinaSimpleXmlNodeTag,
                                         contents:
                                             *const c_char,
                                         length: size_t)
     -> *mut EinaSimpleXmlNodeData;
    pub fn eina_simple_xml_node_data_free(node:
                                              *mut EinaSimpleXmlNodeData);
    pub fn eina_simple_xml_node_cdata_new(parent:
                                              *mut EinaSimpleXmlNodeTag,
                                          contents:
                                              *const c_char,
                                          length: size_t)
     -> *mut EinaSimpleXmlNodeCData;
    pub fn eina_simple_xml_node_cdata_free(node:
                                               *mut EinaSimpleXmlNodeData);
    pub fn eina_simple_xml_node_doctype_child_new(parent:
                                                      *mut EinaSimpleXmlNodeTag,
                                                  contents:
                                                      *const c_char,
                                                  length: size_t)
     -> *mut EinaSimpleXmlNodeDoctypeChild;
    pub fn eina_simple_xml_node_doctype_child_free(node:
                                                       *mut EinaSimpleXmlNodeData);
    pub fn eina_simple_xml_node_processing_new(parent:
                                                   *mut EinaSimpleXmlNodeTag,
                                               contents:
                                                   *const c_char,
                                               length: size_t)
     -> *mut EinaSimpleXmlNodeProcessing;
    pub fn eina_simple_xml_node_processing_free(node:
                                                    *mut EinaSimpleXmlNodeData);
    pub fn eina_simple_xml_node_doctype_new(parent:
                                                *mut EinaSimpleXmlNodeTag,
                                            contents:
                                                *const c_char,
                                            length: size_t)
     -> *mut EinaSimpleXmlNodeDoctype;
    pub fn eina_simple_xml_node_doctype_free(node:
                                                 *mut EinaSimpleXmlNodeData);
    pub fn eina_simple_xml_node_comment_new(parent:
                                                *mut EinaSimpleXmlNodeTag,
                                            contents:
                                                *const c_char,
                                            length: size_t)
     -> *mut EinaSimpleXmlNodeComment;
    pub fn eina_simple_xml_node_comment_free(node:
                                                 *mut EinaSimpleXmlNodeData);
    pub fn eina_simple_xml_node_load(buf: *const c_char,
                                     buflen: c_uint,
                                     strip: EinaBool)
     -> *mut EinaSimpleXmlNodeRoot;
    pub fn eina_simple_xml_node_root_free(root:
                                              *mut EinaSimpleXmlNodeRoot);
    pub fn eina_simple_xml_node_dump(node: *mut EinaSimpleXmlNode,
                                     indent: *const c_char)
     -> *mut c_char;
    pub fn eina_prefix_new(argv0: *const c_char,
                           symbol: *mut c_void,
                           envprefix: *const c_char,
                           sharedir: *const c_char,
                           magicsharefile: *const c_char,
                           pkg_bin: *const c_char,
                           pkg_lib: *const c_char,
                           pkg_data: *const c_char,
                           pkg_locale: *const c_char)
     -> *mut EinaPrefix;
    pub fn eina_prefix_free(pfx: *mut EinaPrefix);
    pub fn eina_prefix_get(pfx: *mut EinaPrefix)
     -> *const c_char;
    pub fn eina_prefix_bin_get(pfx: *mut EinaPrefix)
     -> *const c_char;
    pub fn eina_prefix_lib_get(pfx: *mut EinaPrefix)
     -> *const c_char;
    pub fn eina_prefix_data_get(pfx: *mut EinaPrefix)
     -> *const c_char;
    pub fn eina_prefix_locale_get(pfx: *mut EinaPrefix)
     -> *const c_char;
    pub fn eina_mmap_safety_enabled_set(enabled: EinaBool) -> EinaBool;
    pub fn eina_mmap_safety_enabled_get() -> EinaBool;
    pub fn eina_xattr_ls(file: *const c_char)
     -> *mut EinaIterator;
    pub fn eina_xattr_value_ls(file: *const c_char)
     -> *mut EinaIterator;
    pub fn eina_xattr_fd_ls(fd: c_int) -> *mut EinaIterator;
    pub fn eina_xattr_value_fd_ls(fd: c_int)
     -> *mut EinaIterator;
    pub fn eina_xattr_copy(src: *const c_char,
                           dst: *const c_char) -> EinaBool;
    pub fn eina_xattr_fd_copy(src: c_int,
                              dst: c_int) -> EinaBool;
    pub fn eina_xattr_get(file: *const c_char,
                          attribute: *const c_char,
                          size: *mut ssize_t) -> *mut c_void;
    pub fn eina_xattr_fd_get(fd: c_int,
                             attribute: *const c_char,
                             size: *mut ssize_t)
     -> *mut c_void;
    pub fn eina_xattr_set(file: *const c_char,
                          attribute: *const c_char,
                          data: *const c_void,
                          length: ssize_t, flags: EinaXattrFlags)
     -> EinaBool;
    pub fn eina_xattr_fd_set(fd: c_int,
                             attribute: *const c_char,
                             data: *const c_void,
                             length: ssize_t, flags: EinaXattrFlags)
     -> EinaBool;
    pub fn eina_xattr_del(file: *const c_char,
                          attribute: *const c_char)
     -> EinaBool;
    pub fn eina_xattr_fd_del(fd: c_int,
                             attribute: *const c_char)
     -> EinaBool;
    pub fn eina_xattr_string_set(file: *const c_char,
                                 attribute: *const c_char,
                                 data: *const c_char,
                                 flags: EinaXattrFlags) -> EinaBool;
    pub fn eina_xattr_string_get(file: *const c_char,
                                 attribute: *const c_char)
     -> *mut c_char;
    pub fn eina_xattr_double_set(file: *const c_char,
                                 attribute: *const c_char,
                                 value: c_double,
                                 flags: EinaXattrFlags) -> EinaBool;
    pub fn eina_xattr_double_get(file: *const c_char,
                                 attribute: *const c_char,
                                 value: *mut c_double)
     -> EinaBool;
    pub fn eina_xattr_int_set(file: *const c_char,
                              attribute: *const c_char,
                              value: c_int,
                              flags: EinaXattrFlags) -> EinaBool;
    pub fn eina_xattr_int_get(file: *const c_char,
                              attribute: *const c_char,
                              value: *mut c_int) -> EinaBool;
    pub fn eina_value_new(_type: *const EinaValueType) -> *mut EinaValue;
    pub fn eina_value_free(value: *mut EinaValue);
    pub fn eina_value_copy(value: *const EinaValue, copy: *mut EinaValue)
     -> EinaBool;
    pub fn eina_value_convert(value: *const EinaValue,
                              convert: *mut EinaValue) -> EinaBool;
    pub fn eina_value_to_string(value: *const EinaValue)
     -> *mut c_char;
    pub fn eina_value_array_new(subtype: *const EinaValueType,
                                step: c_uint)
     -> *mut EinaValue;
    pub fn eina_value_list_new(subtype: *const EinaValueType)
     -> *mut EinaValue;
    pub fn eina_value_hash_new(subtype: *const EinaValueType,
                               buckets_power_size: c_uint)
     -> *mut EinaValue;
    pub fn eina_value_struct_new(desc: *const EinaValueStructDesc)
     -> *mut EinaValue;
    pub fn eina_value_type_name_get(_type: *const EinaValueType)
     -> *const c_char;
    pub fn eina_value_type_check(_type: *const EinaValueType) -> EinaBool;
    pub fn eina_value_inner_alloc(size: size_t)
     -> *mut c_void;
    pub fn eina_value_inner_free(size: size_t,
                                 mem: *mut c_void);
    pub fn eina_value_struct_member_find(st: *const EinaValueStruct,
                                         name: *const c_char)
     -> *const EinaValueStructMember;
    pub fn eina_value_util_struct_desc_new() -> *mut EinaValueStructDesc;
    pub fn eina_value_util_time_string_new(timestr:
                                               *const c_char)
     -> *mut EinaValue;
    pub fn eina_cow_add(name: *const c_char,
                        struct_size: c_uint,
                        step: c_uint,
                        default_value: *const c_void,
                        gc: EinaBool) -> *mut EinaCow;
    pub fn eina_cow_del(cow: *mut EinaCow);
    pub fn eina_cow_alloc(cow: *mut EinaCow) -> *const EinaCowData;
    pub fn eina_cow_free(cow: *mut EinaCow, data: *mut *const EinaCowData);
    pub fn eina_cow_write(cow: *mut EinaCow,
                          src: *const *const EinaCowData)
     -> *mut c_void;
    pub fn eina_cow_done(cow: *mut EinaCow, dst: *const *const EinaCowData,
                         data: *const c_void,
                         needed_gc: EinaBool);
    pub fn eina_cow_memcpy(cow: *mut EinaCow,
                           dst: *const *const EinaCowData,
                           src: *const EinaCowData);
    pub fn eina_cow_gc(cow: *mut EinaCow) -> EinaBool;
    pub fn eina_thread_queue_new() -> *mut EinaThreadQueue;
    pub fn eina_thread_queue_free(thq: *mut EinaThreadQueue);
    pub fn eina_thread_queue_send(thq: *mut EinaThreadQueue,
                                  size: c_int,
                                  allocref: *mut *mut c_void)
     -> *mut c_void;
    pub fn eina_thread_queue_send_done(thq: *mut EinaThreadQueue,
                                       allocref: *mut c_void);
    pub fn eina_thread_queue_wait(thq: *mut EinaThreadQueue,
                                  allocref: *mut *mut c_void)
     -> *mut c_void;
    pub fn eina_thread_queue_wait_done(thq: *mut EinaThreadQueue,
                                       allocref: *mut c_void);
    pub fn eina_thread_queue_poll(thq: *mut EinaThreadQueue,
                                  allocref: *mut *mut c_void)
     -> *mut c_void;
    pub fn eina_thread_queue_pending_get(thq: *const EinaThreadQueue)
     -> c_int;
    pub fn eina_thread_queue_parent_set(thq: *mut EinaThreadQueue,
                                        thq_parent: *mut EinaThreadQueue);
    pub fn eina_thread_queue_parent_get(thq: *const EinaThreadQueue)
     -> *mut EinaThreadQueue;
    pub fn eina_thread_queue_fd_set(thq: *mut EinaThreadQueue,
                                    fd: c_int);
    pub fn eina_thread_queue_fd_get(thq: *const EinaThreadQueue)
     -> c_int;
    pub fn eina_quad_rectangle_to(q: *const EinaQuad,
                                  r: *mut EinaRectangle);
    pub fn eina_quad_rectangle_from(q: *mut EinaQuad,
                                    r: *const EinaRectangle);
    pub fn eina_quad_coords_set(q: *mut EinaQuad,
                                x1: c_double,
                                y1: c_double,
                                x2: c_double,
                                y2: c_double,
                                x3: c_double,
                                y3: c_double,
                                x4: c_double,
                                y4: c_double);
    pub fn eina_quad_coords_get(q: *const EinaQuad,
                                x1: *mut c_double,
                                y1: *mut c_double,
                                x2: *mut c_double,
                                y2: *mut c_double,
                                x3: *mut c_double,
                                y3: *mut c_double,
                                x4: *mut c_double,
                                y4: *mut c_double);
    pub fn eina_matrix3_f16p16_identity(m: *mut EinaMatrix3F16p16);
    pub fn eina_matrix3_f16p16_compose(m1: *const EinaMatrix3F16p16,
                                       m2: *const EinaMatrix3F16p16,
                                       dst: *mut EinaMatrix3F16p16);
    pub fn eina_matrix3_f16p16_type_get(m: *const EinaMatrix3F16p16)
     -> EinaMatrixType;
    pub fn eina_matrix3_type_get(m: *const EinaMatrix3) -> EinaMatrixType;
    pub fn eina_matrix3_values_set(m: *mut EinaMatrix3,
                                   xx: c_double,
                                   xy: c_double,
                                   xz: c_double,
                                   yx: c_double,
                                   yy: c_double,
                                   yz: c_double,
                                   zx: c_double,
                                   zy: c_double,
                                   zz: c_double);
    pub fn eina_matrix3_values_get(m: *const EinaMatrix3,
                                   xx: *mut c_double,
                                   xy: *mut c_double,
                                   xz: *mut c_double,
                                   yx: *mut c_double,
                                   yy: *mut c_double,
                                   yz: *mut c_double,
                                   zx: *mut c_double,
                                   zy: *mut c_double,
                                   zz: *mut c_double);
    pub fn eina_matrix3_fixed_values_get(m: *const EinaMatrix3,
                                         xx: *mut EinaF16p16,
                                         xy: *mut EinaF16p16,
                                         xz: *mut EinaF16p16,
                                         yx: *mut EinaF16p16,
                                         yy: *mut EinaF16p16,
                                         yz: *mut EinaF16p16,
                                         zx: *mut EinaF16p16,
                                         zy: *mut EinaF16p16,
                                         zz: *mut EinaF16p16);
    pub fn eina_matrix3_matrix3_f16p16_to(m: *const EinaMatrix3,
                                          fm: *mut EinaMatrix3F16p16);
    pub fn eina_matrix3_equal(m1: *const EinaMatrix3,
                              m2: *const EinaMatrix3) -> EinaBool;
    pub fn eina_matrix3_compose(m1: *const EinaMatrix3,
                                m2: *const EinaMatrix3,
                                dst: *mut EinaMatrix3);
    pub fn eina_matrix3_translate(t: *mut EinaMatrix3,
                                  tx: c_double,
                                  ty: c_double);
    pub fn eina_matrix3_scale(t: *mut EinaMatrix3,
                              sx: c_double,
                              sy: c_double);
    pub fn eina_matrix3_rotate(t: *mut EinaMatrix3,
                               rad: c_double);
    pub fn eina_matrix3_identity(t: *mut EinaMatrix3);
    pub fn eina_matrix3_determinant(m: *const EinaMatrix3)
     -> c_double;
    pub fn eina_matrix3_divide(m: *mut EinaMatrix3,
                               scalar: c_double);
    pub fn eina_matrix3_inverse(m: *const EinaMatrix3,
                                m2: *mut EinaMatrix3);
    pub fn eina_matrix3_transpose(m: *const EinaMatrix3,
                                  a: *mut EinaMatrix3);
    pub fn eina_matrix3_cofactor(m: *const EinaMatrix3,
                                 a: *mut EinaMatrix3);
    pub fn eina_matrix3_adjoint(m: *const EinaMatrix3, a: *mut EinaMatrix3);
    pub fn eina_matrix3_point_transform(m: *const EinaMatrix3,
                                        x: c_double,
                                        y: c_double,
                                        xr: *mut c_double,
                                        yr: *mut c_double);
    pub fn eina_matrix3_rectangle_transform(m: *const EinaMatrix3,
                                            r: *const EinaRectangle,
                                            q: *const EinaQuad);
    pub fn eina_matrix3_quad_quad_map(m: *mut EinaMatrix3,
                                      src: *const EinaQuad,
                                      dst: *const EinaQuad) -> EinaBool;
    pub fn eina_matrix3_square_quad_map(m: *mut EinaMatrix3,
                                        q: *const EinaQuad) -> EinaBool;
    pub fn eina_matrix3_quad_square_map(m: *mut EinaMatrix3,
                                        q: *const EinaQuad) -> EinaBool;
    pub fn eina_matrix4_type_get(m: *const EinaMatrix4) -> EinaMatrixType;
    pub fn eina_matrix4_values_set(m: *mut EinaMatrix4,
                                   xx: c_double,
                                   xy: c_double,
                                   xz: c_double,
                                   xw: c_double,
                                   yx: c_double,
                                   yy: c_double,
                                   yz: c_double,
                                   yw: c_double,
                                   zx: c_double,
                                   zy: c_double,
                                   zz: c_double,
                                   zw: c_double,
                                   wx: c_double,
                                   wy: c_double,
                                   wz: c_double,
                                   ww: c_double);
    pub fn eina_matrix4_values_get(m: *const EinaMatrix4,
                                   xx: *mut c_double,
                                   xy: *mut c_double,
                                   xz: *mut c_double,
                                   xw: *mut c_double,
                                   yx: *mut c_double,
                                   yy: *mut c_double,
                                   yz: *mut c_double,
                                   yw: *mut c_double,
                                   zx: *mut c_double,
                                   zy: *mut c_double,
                                   zz: *mut c_double,
                                   zw: *mut c_double,
                                   wx: *mut c_double,
                                   wy: *mut c_double,
                                   wz: *mut c_double,
                                   ww: *mut c_double);
    pub fn eina_matrix4_determinant(m: *const EinaMatrix4)
     -> c_double;
    pub fn eina_matrix4_normalized(out: *mut EinaMatrix4,
                                   _in: *const EinaMatrix4) -> EinaBool;
    pub fn eina_matrix4_inverse(out: *mut EinaMatrix4,
                                _in: *const EinaMatrix4) -> EinaBool;
    pub fn eina_matrix4_transpose(out: *mut EinaMatrix4,
                                  _in: *const EinaMatrix4);
    pub fn eina_matrix4_matrix3_to(m3: *mut EinaMatrix3,
                                   m4: *const EinaMatrix4);
    pub fn eina_matrix3_matrix4_to(m4: *mut EinaMatrix4,
                                   m3: *const EinaMatrix3);
    pub fn eina_matrix4_identity(out: *mut EinaMatrix4);
    pub fn eina_matrix4_multiply(out: *mut EinaMatrix4,
                                 a: *const EinaMatrix4,
                                 b: *const EinaMatrix4);
    pub fn eina_evlog(event: *const c_char,
                      obj: *mut c_void,
                      srctime: c_double,
                      detail: *const c_char);
    pub fn eina_evlog_steal() -> *mut EinaEvlogBuf;
    pub fn eina_evlog_start();
    pub fn eina_evlog_stop();
    pub fn eina_environment_home_get() -> *const c_char;
    pub fn eina_environment_tmp_get() -> *const c_char;
    pub fn eina_quaternion_f16p16_set(out: *mut EinaQuaternion,
                                      x: EinaF16p16, y: EinaF16p16,
                                      z: EinaF16p16, w: EinaF16p16);
    pub fn eina_quaternion_f16p16_norm(q: *const EinaQuaternionF16p16)
     -> EinaF16p16;
    pub fn eina_quaternion_f16p16_negative(out: *mut EinaQuaternionF16p16,
                                           _in:
                                               *const EinaQuaternionF16p16);
    pub fn eina_quaternion_f16p16_add(out: *mut EinaQuaternionF16p16,
                                      a: *const EinaQuaternionF16p16,
                                      b: *const EinaQuaternionF16p16);
    pub fn eina_quaternion_f16p16_mul(out: *mut EinaQuaternionF16p16,
                                      a: *const EinaQuaternionF16p16,
                                      b: *const EinaQuaternionF16p16);
    pub fn eina_quaternion_f16p16_scale(out: *mut EinaQuaternionF16p16,
                                        a: *const EinaQuaternionF16p16,
                                        b: EinaF16p16);
    pub fn eina_quaternion_f16p16_conjugate(out: *mut EinaQuaternionF16p16,
                                            _in: *const EinaQuaternionF16p16);
    pub fn eina_quaternion_f16p16_dot(a: *const EinaQuaternionF16p16,
                                      b: *const EinaQuaternionF16p16)
     -> EinaF16p16;
    pub fn eina_quaternion_f16p16_lerp(out: *mut EinaQuaternionF16p16,
                                       a: *const EinaQuaternionF16p16,
                                       b: *const EinaQuaternionF16p16,
                                       pos: EinaF16p16);
    pub fn eina_quaternion_f16p16_slerp(out: *mut EinaQuaternionF16p16,
                                        a: *const EinaQuaternionF16p16,
                                        b: *const EinaQuaternionF16p16,
                                        pos: EinaF16p16);
    pub fn eina_quaternion_f16p16_nlerp(out: *mut EinaQuaternionF16p16,
                                        a: *const EinaQuaternionF16p16,
                                        b: *const EinaQuaternionF16p16,
                                        pos: EinaF16p16);
    pub fn eina_quaternion_f16p16_rotate(p: *mut EinaPoint3dF16p16,
                                         center: *const EinaPoint3dF16p16,
                                         q: *const EinaQuaternionF16p16);
    pub fn eina_quaternion_f16p16_rotation_matrix3_get(m: *mut EinaMatrix3F16p16,
                                                       q: *const EinaQuaternionF16p16);
    pub fn eina_quaternion_set(q: *mut EinaQuaternion,
                               x: c_double,
                               y: c_double,
                               z: c_double,
                               w: c_double);
    pub fn eina_quaternion_norm(q: *const EinaQuaternion)
     -> c_double;
    pub fn eina_quaternion_negative(out: *mut EinaQuaternion,
                                    _in: *const EinaQuaternion);
    pub fn eina_quaternion_add(out: *mut EinaQuaternion,
                               a: *const EinaQuaternion,
                               b: *const EinaQuaternion);
    pub fn eina_quaternion_mul(out: *mut EinaQuaternion,
                               a: *const EinaQuaternion,
                               b: *const EinaQuaternion);
    pub fn eina_quaternion_scale(out: *mut EinaQuaternion,
                                 a: *const EinaQuaternion,
                                 b: c_double);
    pub fn eina_quaternion_conjugate(out: *mut EinaQuaternion,
                                     _in: *const EinaQuaternion);
    pub fn eina_quaternion_dot(a: *const EinaQuaternion,
                               b: *const EinaQuaternion)
     -> c_double;
    pub fn eina_quaternion_normalized(out: *mut EinaQuaternion,
                                      _in: *const EinaQuaternion);
    pub fn eina_quaternion_lerp(out: *mut EinaQuaternion,
                                a: *const EinaQuaternion,
                                b: *const EinaQuaternion,
                                pos: c_double);
    pub fn eina_quaternion_slerp(out: *mut EinaQuaternion,
                                 a: *const EinaQuaternion,
                                 b: *const EinaQuaternion,
                                 pos: c_double);
    pub fn eina_quaternion_nlerp(out: *mut EinaQuaternion,
                                 a: *const EinaQuaternion,
                                 b: *const EinaQuaternion,
                                 pos: c_double);
    pub fn eina_quaternion_rotate(p: *mut EinaPoint3d,
                                  center: *const EinaPoint3d,
                                  q: *const EinaQuaternion);
    pub fn eina_quaternion_rotation_matrix3_get(m: *mut EinaMatrix3,
                                                q: *const EinaQuaternion);
    pub fn eina_matrix3_quaternion_get(q: *mut EinaQuaternion,
                                       m: *const EinaMatrix3);
    pub fn eina_matrix4_quaternion_to(rotation: *mut EinaQuaternion,
                                      perspective: *mut EinaQuaternion,
                                      translation: *mut EinaPoint3d,
                                      scale: *mut EinaPoint3d,
                                      skew: *mut EinaPoint3d,
                                      m: *const EinaMatrix4) -> EinaBool;
    pub fn eina_quaternion_matrix4_to(m: *mut EinaMatrix4,
                                      rotation: *const EinaQuaternion,
                                      perspective: *const EinaQuaternion,
                                      translation: *const EinaPoint3d,
                                      scale: *const EinaPoint3d,
                                      skew: *const EinaPoint3d);
    pub fn eina_bezier_values_set(b: *mut EinaBezier,
                                  start_x: c_double,
                                  start_y: c_double,
                                  ctrl_start_x: c_double,
                                  ctrl_start_y: c_double,
                                  ctrl_end_x: c_double,
                                  ctrl_end_y: c_double,
                                  end_x: c_double,
                                  end_y: c_double);
    pub fn eina_bezier_values_get(b: *const EinaBezier,
                                  start_x: *mut c_double,
                                  start_y: *mut c_double,
                                  ctrl_start_x: *mut c_double,
                                  ctrl_start_y: *mut c_double,
                                  ctrl_end_x: *mut c_double,
                                  ctrl_end_y: *mut c_double,
                                  end_x: *mut c_double,
                                  end_y: *mut c_double);
    pub fn eina_bezier_length_get(b: *const EinaBezier)
     -> c_double;
    pub fn eina_bezier_t_at(b: *const EinaBezier,
                            len: c_double)
     -> c_double;
    pub fn eina_bezier_point_at(b: *const EinaBezier,
                                t: c_double,
                                px: *mut c_double,
                                py: *mut c_double);
    pub fn eina_bezier_angle_at(b: *const EinaBezier,
                                t: c_double)
     -> c_double;
    pub fn eina_bezier_split_at_length(b: *const EinaBezier,
                                       len: c_double,
                                       left: *mut EinaBezier,
                                       right: *mut EinaBezier);
}
