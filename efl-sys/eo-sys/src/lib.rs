#![allow(non_camel_case_types)]
extern crate libc;
extern crate eina_sys;

use libc::*;
use eina_sys::*;

/* automatically generated by rust-bindgen */

pub enum Eo_Opaque { }
pub type Eo = Eo_Opaque;
pub type Eo_Class = Eo;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EoOpType {
    EoOpTypeInvalid = -1,
    EoOpTypeRegular = 0,
    EoOpTypeClass = 1,
    EoOpTypeRegularOverride = 2,
    EoOpTypeClassOverride = 3,
}

pub type Eo_Event_Description2 = Eo_Event_Description;
pub type EoEventCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                 obj: *mut Eo,
                                                 desc: *const Eo_Event_Description2,
                                                 event_info: *mut c_void)
                                                 -> EinaBool>;
pub type Eo_Base = Eo;

#[repr(C)]
pub struct Eo_Event_Description {
    pub name: *const c_char,
    pub unfreezable: EinaBool,
    pub legacy_is: EinaBool,
}

#[repr(C)]
pub struct Eo_Callback_Array_Item {
    pub desc: *const Eo_Event_Description,
    pub func: EoEventCb,
}

#[repr(C)]
pub struct Eo_Dbg_Info {
    pub name: *mut Eina_Stringshare,
    pub value: Eina_Value,
}

pub type Eo_Callback_Priority = c_short;
pub type Eo_Op = c_uint;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EoClassType {
    EoClassTypeRegular = 0,
    EoClassTypeRegularNoInstant = 1,
    EoClassTypeInterface = 2,
    EoClassTypeMixin = 3,
}

#[repr(C)]
pub struct Eo_Op_Description {
    pub api_func: *mut c_void,
    pub func: *mut c_void,
    pub op_type: EoOpType,
}

#[repr(C)]
pub struct Eo_Class_Description {
    pub version: c_uint,
    pub name: *const c_char,
    pub _type: EoClassType,
    pub ops: Struct_Unnamed1,
    pub events: *mut *const Eo_Event_Description,
    pub data_size: size_t,
    pub class_constructor: Option<unsafe extern "C" fn(klass: *mut Eo_Class)>,
    pub class_destructor: Option<unsafe extern "C" fn(klass: *mut Eo_Class)>,
}

#[repr(C)]
pub struct Struct_Unnamed1 {
    pub descs: *const Eo_Op_Description,
    pub count: size_t,
}

#[repr(C)]
pub struct Eo_Op_Call_Data {
    pub obj: *mut Eo,
    pub func: *mut c_void,
    pub data: *mut c_void,
}

#[repr(C)]
pub struct Eo_Call_Cache_Index {
    pub klass: *const c_void,
}

#[repr(C)]
pub struct Eo_Call_Cache_Entry {
    pub func: *const c_void,
}

#[repr(C)]
pub struct Eo_Call_Cache_Off {
    pub off: c_int,
}

#[repr(C)]
pub struct Eo_Call_Cache {
    pub index: [Eo_Call_Cache_Index; 1usize],
    pub entry: [Eo_Call_Cache_Entry; 1usize],
    pub off: [Eo_Call_Cache_Off; 1usize],
    pub op: Eo_Op,
}

pub type Eo_Abstract_Class = Eo;
pub type EoKeyDataFreeFunc = Option<unsafe extern "C" fn(arg1: *mut c_void)>;

#[link(name = "eo")]
extern "C" {
    pub static mut _eo_class_creation_lock: Eina_Spinlock;
    pub static _EO_BASE_EVENT_CALLBACK_ADD: Eo_Event_Description;
    pub static _EO_BASE_EVENT_CALLBACK_DEL: Eo_Event_Description;
    pub static _EO_BASE_EVENT_DEL: Eo_Event_Description;
    pub static mut EO_DBG_INFO_TYPE: *const Eina_Value_Type;
}
#[link(name = "eo")]
extern "C" {
    pub fn eo_base_class_get() -> *const Eo_Class;
    pub fn eo_parent_set(parent: *mut Eo_Base);
    pub fn eo_parent_get() -> *mut Eo_Base;
    pub fn eo_event_global_freeze_count_get() -> c_int;
    pub fn eo_event_freeze_count_get() -> c_int;
    pub fn eo_finalized_get() -> EinaBool;
    pub fn eo_constructor() -> *mut Eo_Base;
    pub fn eo_destructor();
    pub fn eo_finalize() -> *mut Eo_Base;
    pub fn eo_wref_add(wref: *mut *mut Eo_Base);
    pub fn eo_wref_del(wref: *mut *mut Eo_Base);
    pub fn eo_key_data_set(key: *const c_char,
                           data: *const c_void);
    pub fn eo_key_data_get(key: *const c_char)
     -> *mut c_void;
    pub fn eo_key_data_del(key: *const c_char);
    pub fn eo_event_thaw();
    pub fn eo_event_freeze();
    pub fn eo_event_global_thaw();
    pub fn eo_event_global_freeze();
    pub fn eo_event_callback_priority_add(desc: *const Eo_Event_Description,
                                          priority: Eo_Callback_Priority,
                                          cb: EoEventCb,
                                          data: *const c_void);
    pub fn eo_event_callback_del(desc: *const Eo_Event_Description,
                                 func: EoEventCb,
                                 user_data: *const c_void);
    pub fn eo_event_callback_array_priority_add(array: *const Eo_Callback_Array_Item,
                                                priority: Eo_Callback_Priority,
                                                data: *const c_void);
    pub fn eo_event_callback_array_del(array: *const Eo_Callback_Array_Item,
                                       user_data: *const c_void);
    pub fn eo_event_callback_call(desc: *const Eo_Event_Description,
                                  event_info: *mut c_void)
     -> EinaBool;
    pub fn eo_event_callback_forwarder_add(desc: *const Eo_Event_Description,
                                           new_obj: *mut Eo_Base);
    pub fn eo_event_callback_forwarder_del(desc: *const Eo_Event_Description,
                                           new_obj: *mut Eo_Base);
    pub fn eo_dbg_info_get(root_node: *mut Eo_Dbg_Info);
    pub fn eo_children_iterator_new() -> *mut Eina_Iterator;
    pub fn eo_dbg_info_free(info: *mut Eo_Dbg_Info);
    pub fn eo_class_new(desc: *const Eo_Class_Description,
                        parent: *const Eo_Class, ...) -> *const Eo_Class;
    pub fn eo_isa(obj: *const Eo, klass: *const Eo_Class) -> EinaBool;
    pub fn eo_class_name_get(klass: *const Eo_Class)
     -> *const c_char;
    pub fn eo_init() -> EinaBool;
    pub fn eo_shutdown() -> EinaBool;
    pub fn _eo_api_op_id_get(api_func: *const c_void)
     -> Eo_Op;
    pub fn _eo_call_resolve(func_name: *const c_char,
                            call: *mut Eo_Op_Call_Data,
                            callcache: *mut Eo_Call_Cache,
                            file: *const c_char,
                            line: c_int) -> EinaBool;
    pub fn _eo_do_start(obj: *const Eo, cur_klass: *const Eo_Class,
                        is_super: EinaBool,
                        eo_stack: *mut c_void) -> EinaBool;
    pub fn _eo_do_end(eo_stack: *mut c_void);
    pub fn _eo_add_end(eo_stack: *mut c_void) -> *mut Eo;
    pub fn _eo_stack_get() -> *mut c_void;
    pub fn eo_class_get(obj: *const Eo) -> *const Eo_Class;
    pub fn _eo_add_internal_start(file: *const c_char,
                                  line: c_int,
                                  klass_id: *const Eo_Class, parent: *mut Eo,
                                  _ref: EinaBool) -> *mut Eo;
    pub fn eo_data_get(obj: *const Eo, klass: *const Eo_Class)
     -> *mut c_void;
    pub fn eo_data_scope_get(obj: *const Eo, klass: *const Eo_Class)
     -> *mut c_void;
    pub fn eo_data_xref_internal(file: *const c_char,
                                 line: c_int, obj: *const Eo,
                                 klass: *const Eo_Class, ref_obj: *const Eo)
     -> *mut c_void;
    pub fn eo_data_xunref_internal(obj: *const Eo,
                                   data: *mut c_void,
                                   ref_obj: *const Eo);
    pub fn eo_ref(obj: *const Eo) -> *mut Eo;
    pub fn eo_unref(obj: *const Eo);
    pub fn eo_ref_get(obj: *const Eo) -> c_int;
    pub fn eo_del(obj: *const Eo);
    pub fn eo_xref_internal(file: *const c_char,
                            line: c_int, obj: *mut Eo,
                            ref_obj: *const Eo) -> *mut Eo;
    pub fn eo_xunref(obj: *mut Eo, ref_obj: *const Eo);
    pub fn eo_manual_free_set(obj: *mut Eo, manual_free: EinaBool);
    pub fn eo_manual_free(obj: *mut Eo) -> EinaBool;
    pub fn eo_destructed_is(obj: *const Eo) -> EinaBool;
    pub fn eo_abstract_class_class_get() -> *const Eo_Class;
    pub fn eo_base_legacy_only_event_description_get(_event_name: *const c_char)
     -> *const Eo_Event_Description;
}
