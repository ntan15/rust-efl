extern crate libc;
extern crate eina_sys;

use libc::*;
use eina_sys::*;

/* automatically generated by rust-bindgen */

pub enum EoOpaque { }
pub type Eo = EoOpaque;
pub type EoClass = Eo;
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EoOpType {
    EoOpTypeInvalid = -1,
    EoOpTypeRegular = 0,
    EoOpTypeClass = 1,
    EoOpTypeRegularOverride = 2,
    EoOpTypeClassOverride = 3,
}

pub type EoEventDescription2 = EoEventDescription;
pub type EoEventCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                 obj: *mut Eo,
                                                 desc: *const EoEventDescription2,
                                                 event_info: *mut c_void)
                                                 -> EinaBool>;
pub type EoBase = Eo;

#[repr(C)]
pub struct EoEventDescription {
    pub name: *const c_char,
    pub unfreezable: EinaBool,
    pub legacy_is: EinaBool,
}

#[repr(C)]
pub struct EoCallbackArrayItem {
    pub desc: *const EoEventDescription,
    pub func: EoEventCb,
}

#[repr(C)]
pub struct EoDbgInfo {
    pub name: *mut EinaStringshare,
    pub value: EinaValue,
}

pub type EoCallbackPriority = c_short;
pub type EoOp = c_uint;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EoClassType {
    EoClassTypeRegular = 0,
    EoClassTypeRegularNoInstant = 1,
    EoClassTypeInterface = 2,
    EoClassTypeMixin = 3,
}

#[repr(C)]
pub struct EoOpDescription {
    pub api_func: *mut c_void,
    pub func: *mut c_void,
    pub op_type: EoOpType,
}

#[repr(C)]
pub struct EoClassDescription {
    pub version: c_uint,
    pub name: *const c_char,
    pub _type: EoClassType,
    pub ops: Struct_Unnamed1,
    pub events: *mut *const EoEventDescription,
    pub data_size: size_t,
    pub class_constructor: Option<unsafe extern "C" fn(klass: *mut EoClass)>,
    pub class_destructor: Option<unsafe extern "C" fn(klass: *mut EoClass)>,
}

#[repr(C)]
pub struct Struct_Unnamed1 {
    pub descs: *const EoOpDescription,
    pub count: size_t,
}

#[repr(C)]
pub struct EoOpCallData {
    pub obj: *mut Eo,
    pub func: *mut c_void,
    pub data: *mut c_void,
}

#[repr(C)]
pub struct EoCallCacheIndex {
    pub klass: *const c_void,
}

#[repr(C)]
pub struct EoCallCacheEntry {
    pub func: *const c_void,
}

#[repr(C)]
pub struct EoCallCacheOff {
    pub off: c_int,
}

#[repr(C)]
pub struct EoCallCache {
    pub index: [EoCallCacheIndex; 1usize],
    pub entry: [EoCallCacheEntry; 1usize],
    pub off: [EoCallCacheOff; 1usize],
    pub op: EoOp,
}

pub type EoAbstractClass = Eo;
pub type EoKeyDataFreeFunc = Option<unsafe extern "C" fn(arg1: *mut c_void)>;

#[link(name = "eo")]
extern "C" {
    pub static mut _eo_class_creation_lock: EinaSpinlock;
    pub static _EO_BASE_EVENT_CALLBACK_ADD: EoEventDescription;
    pub static _EO_BASE_EVENT_CALLBACK_DEL: EoEventDescription;
    pub static _EO_BASE_EVENT_DEL: EoEventDescription;
    pub static mut EO_DBG_INFO_TYPE: *const EinaValueType;
}
#[link(name = "eo")]
extern "C" {
    pub fn eo_base_class_get() -> *const EoClass;
    pub fn eo_parent_set(parent: *mut EoBase);
    pub fn eo_parent_get() -> *mut EoBase;
    pub fn eo_event_global_freeze_count_get() -> c_int;
    pub fn eo_event_freeze_count_get() -> c_int;
    pub fn eo_finalized_get() -> EinaBool;
    pub fn eo_constructor() -> *mut EoBase;
    pub fn eo_destructor();
    pub fn eo_finalize() -> *mut EoBase;
    pub fn eo_wref_add(wref: *mut *mut EoBase);
    pub fn eo_wref_del(wref: *mut *mut EoBase);
    pub fn eo_key_data_set(key: *const c_char,
                           data: *const c_void);
    pub fn eo_key_data_get(key: *const c_char)
     -> *mut c_void;
    pub fn eo_key_data_del(key: *const c_char);
    pub fn eo_event_thaw();
    pub fn eo_event_freeze();
    pub fn eo_event_global_thaw();
    pub fn eo_event_global_freeze();
    pub fn eo_event_callback_priority_add(desc: *const EoEventDescription,
                                          priority: EoCallbackPriority,
                                          cb: EoEventCb,
                                          data: *const c_void);
    pub fn eo_event_callback_del(desc: *const EoEventDescription,
                                 func: EoEventCb,
                                 user_data: *const c_void);
    pub fn eo_event_callback_array_priority_add(array: *const EoCallbackArrayItem,
                                                priority: EoCallbackPriority,
                                                data: *const c_void);
    pub fn eo_event_callback_array_del(array: *const EoCallbackArrayItem,
                                       user_data: *const c_void);
    pub fn eo_event_callback_call(desc: *const EoEventDescription,
                                  event_info: *mut c_void)
     -> EinaBool;
    pub fn eo_event_callback_forwarder_add(desc: *const EoEventDescription,
                                           new_obj: *mut EoBase);
    pub fn eo_event_callback_forwarder_del(desc: *const EoEventDescription,
                                           new_obj: *mut EoBase);
    pub fn eo_dbg_info_get(root_node: *mut EoDbgInfo);
    pub fn eo_children_iterator_new() -> *mut EinaIterator;
    pub fn eo_dbg_info_free(info: *mut EoDbgInfo);
    pub fn eo_class_new(desc: *const EoClassDescription,
                        parent: *const EoClass, ...) -> *const EoClass;
    pub fn eo_isa(obj: *const Eo, klass: *const EoClass) -> EinaBool;
    pub fn eo_class_name_get(klass: *const EoClass)
     -> *const c_char;
    pub fn eo_init() -> EinaBool;
    pub fn eo_shutdown() -> EinaBool;
    pub fn _eo_api_op_id_get(api_func: *const c_void)
     -> EoOp;
    pub fn _eo_call_resolve(func_name: *const c_char,
                            call: *mut EoOpCallData,
                            callcache: *mut EoCallCache,
                            file: *const c_char,
                            line: c_int) -> EinaBool;
    pub fn _eo_do_start(obj: *const Eo, cur_klass: *const EoClass,
                        is_super: EinaBool,
                        eo_stack: *mut c_void) -> EinaBool;
    pub fn _eo_do_end(eo_stack: *mut c_void);
    pub fn _eo_add_end(eo_stack: *mut c_void) -> *mut Eo;
    pub fn _eo_stack_get() -> *mut c_void;
    pub fn eo_class_get(obj: *const Eo) -> *const EoClass;
    pub fn _eo_add_internal_start(file: *const c_char,
                                  line: c_int,
                                  klass_id: *const EoClass, parent: *mut Eo,
                                  _ref: EinaBool) -> *mut Eo;
    pub fn eo_data_get(obj: *const Eo, klass: *const EoClass)
     -> *mut c_void;
    pub fn eo_data_scope_get(obj: *const Eo, klass: *const EoClass)
     -> *mut c_void;
    pub fn eo_data_xref_internal(file: *const c_char,
                                 line: c_int, obj: *const Eo,
                                 klass: *const EoClass, ref_obj: *const Eo)
     -> *mut c_void;
    pub fn eo_data_xunref_internal(obj: *const Eo,
                                   data: *mut c_void,
                                   ref_obj: *const Eo);
    pub fn eo_ref(obj: *const Eo) -> *mut Eo;
    pub fn eo_unref(obj: *const Eo);
    pub fn eo_ref_get(obj: *const Eo) -> c_int;
    pub fn eo_del(obj: *const Eo);
    pub fn eo_xref_internal(file: *const c_char,
                            line: c_int, obj: *mut Eo,
                            ref_obj: *const Eo) -> *mut Eo;
    pub fn eo_xunref(obj: *mut Eo, ref_obj: *const Eo);
    pub fn eo_manual_free_set(obj: *mut Eo, manual_free: EinaBool);
    pub fn eo_manual_free(obj: *mut Eo) -> EinaBool;
    pub fn eo_destructed_is(obj: *const Eo) -> EinaBool;
    pub fn eo_abstract_class_class_get() -> *const EoClass;
    pub fn eo_base_legacy_only_event_description_get(_event_name: *const c_char)
     -> *const EoEventDescription;
}
