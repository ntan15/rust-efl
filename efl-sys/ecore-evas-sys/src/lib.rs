#![allow(non_camel_case_types)]
extern crate libc;
extern crate evas_sys;
extern crate eina_sys;

use libc::*;
use evas_sys::*;
use eina_sys::*;

/* automatically generated by rust-bindgen */

pub type Ecore_X_Window = c_uint;
pub type Ecore_X_Pixmap = c_uint;
pub type Ecore_X_Atom = c_uint;
#[repr(C)]
pub struct Ecore_X_Icon {
    pub width: c_uint,
    pub height: c_uint,
    pub data: *mut c_uint,
}
pub enum Ecore_Direct_FB_Window { }
pub enum Ecore_Win32_Window { }
pub enum Ecore_WinCE_Window { }
pub enum Ecore_Cocoa_Window { }
pub enum Ecore_Evas { }
pub type EcoreEvasEventCb = Option<unsafe extern "C" fn(ee: *mut Ecore_Evas)>;
pub enum Ecore_Wl_Window { }
pub enum Ecore_Getopt { }
pub enum Ecore_Getopt_Desc { }
pub enum Ecore_Union_Getopt_Value { }
pub type Ecore_Window = uintptr_t;
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreEvasEngineType {
    EcoreEvasEngineSoftwareBuffer = 0,
    EcoreEvasEngineSoftwareXlib = 1,
    EcoreEvasEngineXrenderX11 = 2,
    EcoreEvasEngineOpenglX11 = 3,
    EcoreEvasEngineSoftwareXcb = 4,
    EcoreEvasEngineXrenderXcb = 5,
    EcoreEvasEngineSoftwareGdi = 6,
    EcoreEvasEngineSoftwareDdraw = 7,
    EcoreEvasEngineDirect3d = 8,
    EcoreEvasEngineOpenglGlew = 9,
    EcoreEvasEngineOpenglCocoa = 10,
    EcoreEvasEngineSoftwareSdl = 11,
    EcoreEvasEngineDirectfb = 12,
    EcoreEvasEngineSoftwareFb = 13,
    EcoreEvasEngineSoftware8X11 = 14,
    EcoreEvasEngineSoftware16X11 = 15,
    EcoreEvasEngineSoftware16Ddraw = 16,
    EcoreEvasEngineSoftware16Wince = 17,
    EcoreEvasEngineOpenglSdl = 18,
    EcoreEvasEngineEws = 19,
    EcoreEvasEnginePsl1ght = 20,
    EcoreEvasEngineWaylandShm = 21,
    EcoreEvasEngineWaylandEgl = 22,
    EcoreEvasEngineDrm = 23,
    EcoreEvasEngineOpenglDrm = 24,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreEvasAvoidDamagaeType {
    EcoreEvasAvoidDamageNone = 0,
    EcoreEvasAvoidDamageExpose = 1,
    EcoreEvasAvoidDamageBuiltIn = 2,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreEvasObjectAssociateFlags {
    EcoreEvasObjectAssociateBase = 0,
    EcoreEvasObjectAssociateStack = 1,
    EcoreEvasObjectAssociateLayer = 2,
    EcoreEvasObjectAssociateDel = 4,
}

#[link(name = "ecore_evas")]
extern "C" {
    pub static mut ECORE_EVAS_EWS_EVENT_MANAGER_CHANGE: c_int;
    pub static mut ECORE_EVAS_EWS_EVENT_ADD: c_int;
    pub static mut ECORE_EVAS_EWS_EVENT_DEL: c_int;
    pub static mut ECORE_EVAS_EWS_EVENT_RESIZE: c_int;
    pub static mut ECORE_EVAS_EWS_EVENT_MOVE: c_int;
    pub static mut ECORE_EVAS_EWS_EVENT_SHOW: c_int;
    pub static mut ECORE_EVAS_EWS_EVENT_HIDE: c_int;
    pub static mut ECORE_EVAS_EWS_EVENT_FOCUS: c_int;
    pub static mut ECORE_EVAS_EWS_EVENT_UNFOCUS: c_int;
    pub static mut ECORE_EVAS_EWS_EVENT_RAISE: c_int;
    pub static mut ECORE_EVAS_EWS_EVENT_LOWER: c_int;
    pub static mut ECORE_EVAS_EWS_EVENT_ACTIVATE: c_int;
    pub static mut ECORE_EVAS_EWS_EVENT_ICONIFIED_CHANGE:
               c_int;
    pub static mut ECORE_EVAS_EWS_EVENT_MAXIMIZED_CHANGE:
               c_int;
    pub static mut ECORE_EVAS_EWS_EVENT_LAYER_CHANGE: c_int;
    pub static mut ECORE_EVAS_EWS_EVENT_FULLSCREEN_CHANGE:
               c_int;
    pub static mut ECORE_EVAS_EWS_EVENT_CONFIG_CHANGE: c_int;
    pub static mut ECORE_EVAS_EXTN_CLIENT_ADD: c_int;
    pub static mut ECORE_EVAS_EXTN_CLIENT_DEL: c_int;
}
#[link(name = "ecore_evas")]
extern "C" {
    pub fn ecore_evas_engine_type_supported_get(engine: EcoreEvasEngineType)
     -> c_int;
    pub fn ecore_evas_init() -> c_int;
    pub fn ecore_evas_shutdown() -> c_int;
    pub fn ecore_evas_app_comp_sync_set(do_sync: EinaBool);
    pub fn ecore_evas_app_comp_sync_get() -> EinaBool;
    pub fn ecore_evas_engines_get() -> *mut Eina_List;
    pub fn ecore_evas_engines_free(engines: *mut Eina_List);
    pub fn ecore_evas_new(engine_name: *const c_char,
                          x: c_int, y: c_int,
                          w: c_int, h: c_int,
                          extra_options: *const c_char)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_alpha_set(ee: *mut Ecore_Evas, alpha: EinaBool);
    pub fn ecore_evas_alpha_get(ee: *const Ecore_Evas) -> EinaBool;
    pub fn ecore_evas_transparent_set(ee: *mut Ecore_Evas,
                                      transparent: EinaBool);
    pub fn ecore_evas_transparent_get(ee: *const Ecore_Evas) -> EinaBool;
    pub fn ecore_evas_geometry_get(ee: *const Ecore_Evas,
                                   x: *mut c_int,
                                   y: *mut c_int,
                                   w: *mut c_int,
                                   h: *mut c_int);
    pub fn ecore_evas_request_geometry_get(ee: *const Ecore_Evas,
                                           x: *mut c_int,
                                           y: *mut c_int,
                                           w: *mut c_int,
                                           h: *mut c_int);
    pub fn ecore_evas_focus_set(ee: *mut Ecore_Evas, on: EinaBool);
    pub fn ecore_evas_focus_get(ee: *const Ecore_Evas) -> EinaBool;
    pub fn ecore_evas_iconified_set(ee: *mut Ecore_Evas, on: EinaBool);
    pub fn ecore_evas_iconified_get(ee: *const Ecore_Evas) -> EinaBool;
    pub fn ecore_evas_borderless_set(ee: *mut Ecore_Evas, on: EinaBool);
    pub fn ecore_evas_borderless_get(ee: *const Ecore_Evas) -> EinaBool;
    pub fn ecore_evas_fullscreen_set(ee: *mut Ecore_Evas, on: EinaBool);
    pub fn ecore_evas_fullscreen_get(ee: *const Ecore_Evas) -> EinaBool;
    pub fn ecore_evas_window_group_set(ee: *mut Ecore_Evas,
                                       ee_group: *const Ecore_Evas);
    pub fn ecore_evas_window_group_get(ee: *const Ecore_Evas)
     -> *const Ecore_Evas;
    pub fn ecore_evas_aspect_set(ee: *mut Ecore_Evas,
                                 aspect: c_double);
    pub fn ecore_evas_aspect_get(ee: *const Ecore_Evas)
     -> c_double;
    pub fn ecore_evas_urgent_set(ee: *mut Ecore_Evas, urgent: EinaBool);
    pub fn ecore_evas_urgent_get(ee: *const Ecore_Evas) -> EinaBool;
    pub fn ecore_evas_modal_set(ee: *mut Ecore_Evas, modal: EinaBool);
    pub fn ecore_evas_modal_get(ee: *const Ecore_Evas) -> EinaBool;
    pub fn ecore_evas_demand_attention_set(ee: *mut Ecore_Evas,
                                           demand: EinaBool);
    pub fn ecore_evas_demand_attention_get(ee: *const Ecore_Evas)
     -> EinaBool;
    pub fn ecore_evas_focus_skip_set(ee: *mut Ecore_Evas, skip: EinaBool);
    pub fn ecore_evas_focus_skip_get(ee: *const Ecore_Evas) -> EinaBool;
    pub fn ecore_evas_ignore_events_set(ee: *mut Ecore_Evas,
                                        ignore: EinaBool);
    pub fn ecore_evas_ignore_events_get(ee: *const Ecore_Evas) -> EinaBool;
    pub fn ecore_evas_visibility_get(ee: *const Ecore_Evas)
     -> c_int;
    pub fn ecore_evas_layer_set(ee: *mut Ecore_Evas,
                                layer: c_int);
    pub fn ecore_evas_layer_get(ee: *const Ecore_Evas)
     -> c_int;
    pub fn ecore_evas_maximized_set(ee: *mut Ecore_Evas, on: EinaBool);
    pub fn ecore_evas_maximized_get(ee: *const Ecore_Evas) -> EinaBool;
    pub fn ecore_evas_window_profile_supported_get(ee: *const Ecore_Evas)
     -> EinaBool;
    pub fn ecore_evas_window_profile_set(ee: *mut Ecore_Evas,
                                         profile:
                                             *const c_char);
    pub fn ecore_evas_window_profile_get(ee: *const Ecore_Evas)
     -> *const c_char;
    pub fn ecore_evas_window_available_profiles_set(ee: *mut Ecore_Evas,
                                                    profiles:
                                                        *mut *const c_char,
                                                    count:
                                                        c_uint);
    pub fn ecore_evas_window_available_profiles_get(ee: *mut Ecore_Evas,
                                                    profiles:
                                                        *mut *mut *mut c_char,
                                                    count:
                                                        *mut c_uint)
     -> EinaBool;
    pub fn ecore_evas_wm_rotation_supported_get(ee: *const Ecore_Evas)
     -> EinaBool;
    pub fn ecore_evas_wm_rotation_preferred_rotation_set(ee: *mut Ecore_Evas,
                                                         rotation:
                                                             c_int);
    pub fn ecore_evas_wm_rotation_preferred_rotation_get(ee:
                                                             *const Ecore_Evas)
     -> c_int;
    pub fn ecore_evas_wm_rotation_available_rotations_set(ee: *mut Ecore_Evas,
                                                          rotations:
                                                              *const c_int,
                                                          count:
                                                              c_uint);
    pub fn ecore_evas_wm_rotation_available_rotations_get(ee:
                                                              *const Ecore_Evas,
                                                          rotations:
                                                              *mut *mut c_int,
                                                          count:
                                                              *mut c_uint)
     -> EinaBool;
    pub fn ecore_evas_wm_rotation_manual_rotation_done_set(ee:
                                                               *mut Ecore_Evas,
                                                           set: EinaBool);
    pub fn ecore_evas_wm_rotation_manual_rotation_done_get(ee:
                                                               *const Ecore_Evas)
     -> EinaBool;
    pub fn ecore_evas_wm_rotation_manual_rotation_done(ee: *mut Ecore_Evas);
    pub fn ecore_evas_aux_hints_supported_get(ee: *const Ecore_Evas)
     -> *const Eina_List;
    pub fn ecore_evas_aux_hints_allowed_get(ee: *const Ecore_Evas)
     -> *mut Eina_List;
    pub fn ecore_evas_aux_hint_add(ee: *mut Ecore_Evas,
                                   hint: *const c_char,
                                   val: *const c_char)
     -> c_int;
    pub fn ecore_evas_aux_hint_del(ee: *mut Ecore_Evas,
                                   id: c_int) -> EinaBool;
    pub fn ecore_evas_aux_hint_val_set(ee: *mut Ecore_Evas,
                                       id: c_int,
                                       val: *const c_char)
     -> EinaBool;
    pub fn ecore_evas_aux_hint_val_get(ee: *const Ecore_Evas,
                                       id: c_int)
     -> *const c_char;
    pub fn ecore_evas_aux_hint_id_get(ee: *const Ecore_Evas,
                                      hint: *const c_char)
     -> c_int;
    pub fn ecore_evas_msg_parent_send(ee: *mut Ecore_Evas,
                                      msg_domain: c_int,
                                      msg_id: c_int,
                                      data: *mut c_void,
                                      size: c_int);
    pub fn ecore_evas_msg_send(ee: *mut Ecore_Evas,
                               msg_domain: c_int,
                               msg_id: c_int,
                               data: *mut c_void,
                               size: c_int);
    pub fn ecore_evas_callback_msg_parent_handle_set(ee: *mut Ecore_Evas,
                                                     func_parent_handle:
                                                         Option<unsafe extern "C" fn(ee:
                                                                                                        *mut Ecore_Evas,
                                                                                                    msg_domain:
                                                                                                        c_int,
                                                                                                    msg_id:
                                                                                                        c_int,
                                                                                                    data:
                                                                                                        *mut c_void,
                                                                                                    size:
                                                                                                        c_int)>);
    pub fn ecore_evas_callback_msg_handle_set(ee: *mut Ecore_Evas,
                                              func_handle:
                                                  Option<unsafe extern "C" fn(ee:
                                                                                                 *mut Ecore_Evas,
                                                                                             msg_domain:
                                                                                                 c_int,
                                                                                             msg_id:
                                                                                                 c_int,
                                                                                             data:
                                                                                                 *mut c_void,
                                                                                             size:
                                                                                                 c_int)>);
    pub fn ecore_evas_move(ee: *mut Ecore_Evas, x: c_int,
                           y: c_int);
    pub fn ecore_evas_resize(ee: *mut Ecore_Evas, w: c_int,
                             h: c_int);
    pub fn ecore_evas_move_resize(ee: *mut Ecore_Evas,
                                  x: c_int,
                                  y: c_int,
                                  w: c_int,
                                  h: c_int);
    pub fn ecore_evas_rotation_set(ee: *mut Ecore_Evas,
                                   rot: c_int);
    pub fn ecore_evas_rotation_with_resize_set(ee: *mut Ecore_Evas,
                                               rot: c_int);
    pub fn ecore_evas_rotation_get(ee: *const Ecore_Evas)
     -> c_int;
    pub fn ecore_evas_raise(ee: *mut Ecore_Evas);
    pub fn ecore_evas_lower(ee: *mut Ecore_Evas);
    pub fn ecore_evas_title_set(ee: *mut Ecore_Evas,
                                t: *const c_char);
    pub fn ecore_evas_title_get(ee: *const Ecore_Evas)
     -> *const c_char;
    pub fn ecore_evas_name_class_set(ee: *mut Ecore_Evas,
                                     n: *const c_char,
                                     c: *const c_char);
    pub fn ecore_evas_name_class_get(ee: *const Ecore_Evas,
                                     n: *mut *const c_char,
                                     c: *mut *const c_char);
    pub fn ecore_evas_window_get(ee: *const Ecore_Evas) -> Ecore_Window;
    pub fn ecore_evas_software_x11_new(disp_name:
                                           *const c_char,
                                       parent: Ecore_X_Window,
                                       x: c_int,
                                       y: c_int,
                                       w: c_int,
                                       h: c_int)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_software_x11_window_get(ee: *const Ecore_Evas)
     -> Ecore_X_Window;
    pub fn ecore_evas_software_x11_direct_resize_set(ee: *mut Ecore_Evas,
                                                     on: EinaBool);
    pub fn ecore_evas_software_x11_direct_resize_get(ee: *const Ecore_Evas)
     -> EinaBool;
    pub fn ecore_evas_software_x11_extra_event_window_add(ee: *mut Ecore_Evas,
                                                          win:
                                                              Ecore_X_Window);
    pub fn ecore_evas_software_x11_pixmap_new(disp_name:
                                                  *const c_char,
                                              parent: Ecore_X_Window,
                                              x: c_int,
                                              y: c_int,
                                              w: c_int,
                                              h: c_int)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_software_x11_pixmap_get(ee: *const Ecore_Evas)
     -> Ecore_X_Pixmap;
    pub fn ecore_evas_gl_x11_new(disp_name: *const c_char,
                                 parent: Ecore_X_Window,
                                 x: c_int,
                                 y: c_int,
                                 w: c_int,
                                 h: c_int) -> *mut Ecore_Evas;
    pub fn ecore_evas_gl_x11_options_new(disp_name:
                                             *const c_char,
                                         parent: Ecore_X_Window,
                                         x: c_int,
                                         y: c_int,
                                         w: c_int,
                                         h: c_int,
                                         opt: *const c_int)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_gl_x11_window_get(ee: *const Ecore_Evas)
     -> Ecore_X_Window;
    pub fn ecore_evas_gl_x11_direct_resize_set(ee: *mut Ecore_Evas,
                                               on: EinaBool);
    pub fn ecore_evas_gl_x11_direct_resize_get(ee: *const Ecore_Evas)
     -> EinaBool;
    pub fn ecore_evas_gl_x11_extra_event_window_add(ee: *mut Ecore_Evas,
                                                    win: Ecore_X_Window);
    pub fn ecore_evas_gl_x11_pre_post_swap_callback_set(ee: *const Ecore_Evas,
                                                        data:
                                                            *mut c_void,
                                                        pre_cb:
                                                            Option<unsafe extern "C" fn(data:
                                                                                                           *mut c_void,
                                                                                                       e:
                                                                                                           *mut Evas)>,
                                                        post_cb:
                                                            Option<unsafe extern "C" fn(data:
                                                                                                           *mut c_void,
                                                                                                       e:
                                                                                                           *mut Evas)>);
    pub fn ecore_evas_gl_x11_pixmap_new(disp_name:
                                            *const c_char,
                                        parent: Ecore_X_Window,
                                        x: c_int,
                                        y: c_int,
                                        w: c_int,
                                        h: c_int)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_gl_x11_pixmap_get(ee: *const Ecore_Evas)
     -> Ecore_X_Pixmap;
    pub fn ecore_evas_xrender_x11_new(disp_name:
                                          *const c_char,
                                      parent: Ecore_X_Window,
                                      x: c_int,
                                      y: c_int,
                                      w: c_int,
                                      h: c_int)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_xrender_x11_window_get(ee: *const Ecore_Evas)
     -> Ecore_X_Window;
    pub fn ecore_evas_xrender_x11_direct_resize_set(ee: *mut Ecore_Evas,
                                                    on: EinaBool);
    pub fn ecore_evas_xrender_x11_direct_resize_get(ee: *const Ecore_Evas)
     -> EinaBool;
    pub fn ecore_evas_xrender_x11_extra_event_window_add(ee: *mut Ecore_Evas,
                                                         win: Ecore_X_Window);
    pub fn ecore_evas_software_x11_8_new(disp_name:
                                             *const c_char,
                                         parent: Ecore_X_Window,
                                         x: c_int,
                                         y: c_int,
                                         w: c_int,
                                         h: c_int)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_software_x11_8_window_get(ee: *const Ecore_Evas)
     -> Ecore_X_Window;
    pub fn ecore_evas_software_x11_8_subwindow_get(ee: *const Ecore_Evas)
     -> Ecore_X_Window;
    pub fn ecore_evas_software_x11_8_direct_resize_set(ee: *mut Ecore_Evas,
                                                       on: EinaBool);
    pub fn ecore_evas_software_x11_8_direct_resize_get(ee: *const Ecore_Evas)
     -> EinaBool;
    pub fn ecore_evas_software_x11_8_extra_event_window_add(ee:
                                                                *mut Ecore_Evas,
                                                            win:
                                                                Ecore_X_Window);
    pub fn ecore_evas_software_x11_16_new(disp_name:
                                              *const c_char,
                                          parent: Ecore_X_Window,
                                          x: c_int,
                                          y: c_int,
                                          w: c_int,
                                          h: c_int)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_software_x11_16_window_get(ee: *const Ecore_Evas)
     -> Ecore_X_Window;
    pub fn ecore_evas_software_x11_16_direct_resize_set(ee: *mut Ecore_Evas,
                                                        on: EinaBool);
    pub fn ecore_evas_software_x11_16_direct_resize_get(ee: *const Ecore_Evas)
     -> EinaBool;
    pub fn ecore_evas_software_x11_16_extra_event_window_add(ee:
                                                                 *mut Ecore_Evas,
                                                             win:
                                                                 Ecore_X_Window);
    pub fn ecore_evas_fb_new(disp_name: *const c_char,
                             rotation: c_int,
                             w: c_int,
                             h: c_int) -> *mut Ecore_Evas;
    pub fn ecore_evas_directfb_new(disp_name: *const c_char,
                                   windowed: c_int,
                                   x: c_int,
                                   y: c_int,
                                   w: c_int,
                                   h: c_int)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_directfb_window_get(ee: *const Ecore_Evas)
     -> *mut Ecore_Direct_FB_Window;
    pub fn ecore_evas_wayland_shm_new(disp_name:
                                          *const c_char,
                                      parent: c_uint,
                                      x: c_int,
                                      y: c_int,
                                      w: c_int,
                                      h: c_int,
                                      frame: EinaBool) -> *mut Ecore_Evas;
    pub fn ecore_evas_wayland_egl_new(disp_name:
                                          *const c_char,
                                      parent: c_uint,
                                      x: c_int,
                                      y: c_int,
                                      w: c_int,
                                      h: c_int,
                                      frame: EinaBool) -> *mut Ecore_Evas;
    pub fn ecore_evas_wayland_resize(ee: *mut Ecore_Evas,
                                     location: c_int);
    pub fn ecore_evas_wayland_move(ee: *mut Ecore_Evas,
                                   x: c_int,
                                   y: c_int);
    pub fn ecore_evas_wayland_pointer_set(ee: *mut Ecore_Evas,
                                          hot_x: c_int,
                                          hot_y: c_int);
    pub fn ecore_evas_wayland_type_set(ee: *mut Ecore_Evas,
                                       _type: c_int);
    pub fn ecore_evas_wayland_window_get(ee: *const Ecore_Evas)
     -> *mut Ecore_Wl_Window;
    pub fn ecore_evas_drm_new(device: *const c_char,
                              parent: c_uint,
                              x: c_int,
                              y: c_int,
                              w: c_int,
                              h: c_int) -> *mut Ecore_Evas;
    pub fn ecore_evas_gl_drm_new(device: *const c_char,
                                 parent: c_uint,
                                 x: c_int,
                                 y: c_int,
                                 w: c_int,
                                 h: c_int) -> *mut Ecore_Evas;
    pub fn ecore_evas_buffer_new(w: c_int,
                                 h: c_int) -> *mut Ecore_Evas;
    pub fn ecore_evas_buffer_allocfunc_new(w: c_int,
                                           h: c_int,
                                           alloc_func:
                                               Option<unsafe extern "C" fn(data:
                                                                                              *mut c_void,
                                                                                          size:
                                                                                              c_int)
                                                                         ->
                                                                             *mut c_void>,
                                           free_func:
                                               Option<unsafe extern "C" fn(data:
                                                                                              *mut c_void,
                                                                                          pix:
                                                                                              *mut c_void)>,
                                           data:
                                               *const c_void)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_buffer_pixels_get(ee: *mut Ecore_Evas)
     -> *const c_void;
    pub fn ecore_evas_buffer_ecore_evas_parent_get(ee: *mut Ecore_Evas)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_ews_new(x: c_int,
                              y: c_int,
                              w: c_int,
                              h: c_int) -> *mut Ecore_Evas;
    pub fn ecore_evas_ews_backing_store_get(ee: *const Ecore_Evas)
     -> *mut Evas_Object;
    pub fn ecore_evas_ews_delete_request(ee: *mut Ecore_Evas);
    pub fn ecore_evas_object_image_new(ee_target: *mut Ecore_Evas)
     -> *mut Evas_Object;
    pub fn ecore_evas_object_ecore_evas_get(obj: *mut Evas_Object)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_object_evas_get(obj: *mut Evas_Object) -> *mut Evas;
    pub fn ecore_evas_software_gdi_new(parent: *mut Ecore_Win32_Window,
                                       x: c_int,
                                       y: c_int,
                                       width: c_int,
                                       height: c_int)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_software_ddraw_new(parent: *mut Ecore_Win32_Window,
                                         x: c_int,
                                         y: c_int,
                                         width: c_int,
                                         height: c_int)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_software_16_ddraw_new(parent: *mut Ecore_Win32_Window,
                                            x: c_int,
                                            y: c_int,
                                            width: c_int,
                                            height: c_int)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_direct3d_new(parent: *mut Ecore_Win32_Window,
                                   x: c_int,
                                   y: c_int,
                                   width: c_int,
                                   height: c_int)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_gl_glew_new(parent: *mut Ecore_Win32_Window,
                                  x: c_int,
                                  y: c_int,
                                  width: c_int,
                                  height: c_int)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_win32_window_get(ee: *const Ecore_Evas)
     -> *mut Ecore_Win32_Window;
    pub fn ecore_evas_sdl_new(name: *const c_char,
                              w: c_int,
                              h: c_int,
                              fullscreen: c_int,
                              hwsurface: c_int,
                              noframe: c_int,
                              alpha: c_int)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_sdl16_new(name: *const c_char,
                                w: c_int,
                                h: c_int,
                                fullscreen: c_int,
                                hwsurface: c_int,
                                noframe: c_int,
                                alpha: c_int)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_gl_sdl_new(name: *const c_char,
                                 w: c_int,
                                 h: c_int,
                                 fullscreen: c_int,
                                 noframe: c_int)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_software_wince_new(parent: *mut Ecore_WinCE_Window,
                                         x: c_int,
                                         y: c_int,
                                         width: c_int,
                                         height: c_int)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_software_wince_fb_new(parent: *mut Ecore_WinCE_Window,
                                            x: c_int,
                                            y: c_int,
                                            width: c_int,
                                            height: c_int)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_software_wince_gapi_new(parent: *mut Ecore_WinCE_Window,
                                              x: c_int,
                                              y: c_int,
                                              width: c_int,
                                              height: c_int)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_software_wince_ddraw_new(parent:
                                                   *mut Ecore_WinCE_Window,
                                               x: c_int,
                                               y: c_int,
                                               width: c_int,
                                               height: c_int)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_software_wince_gdi_new(parent: *mut Ecore_WinCE_Window,
                                             x: c_int,
                                             y: c_int,
                                             width: c_int,
                                             height: c_int)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_software_wince_window_get(ee: *const Ecore_Evas)
     -> *mut Ecore_WinCE_Window;
    pub fn ecore_evas_cocoa_new(parent: *mut Ecore_Cocoa_Window,
                                x: c_int,
                                y: c_int,
                                w: c_int,
                                h: c_int) -> *mut Ecore_Evas;
    pub fn ecore_evas_psl1ght_new(name: *const c_char,
                                  w: c_int,
                                  h: c_int)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_engine_name_get(ee: *const Ecore_Evas)
     -> *const c_char;
    pub fn ecore_evas_ecore_evas_get(e: *const Evas) -> *mut Ecore_Evas;
    pub fn ecore_evas_free(ee: *mut Ecore_Evas);
    pub fn ecore_evas_data_get(ee: *const Ecore_Evas,
                               key: *const c_char)
     -> *mut c_void;
    pub fn ecore_evas_data_set(ee: *mut Ecore_Evas,
                               key: *const c_char,
                               data: *const c_void);
    pub fn ecore_evas_callback_resize_set(ee: *mut Ecore_Evas,
                                          func: EcoreEvasEventCb);
    pub fn ecore_evas_callback_move_set(ee: *mut Ecore_Evas,
                                        func: EcoreEvasEventCb);
    pub fn ecore_evas_callback_show_set(ee: *mut Ecore_Evas,
                                        func: EcoreEvasEventCb);
    pub fn ecore_evas_callback_hide_set(ee: *mut Ecore_Evas,
                                        func: EcoreEvasEventCb);
    pub fn ecore_evas_callback_delete_request_set(ee: *mut Ecore_Evas,
                                                  func: EcoreEvasEventCb);
    pub fn ecore_evas_callback_destroy_set(ee: *mut Ecore_Evas,
                                           func: EcoreEvasEventCb);
    pub fn ecore_evas_callback_focus_in_set(ee: *mut Ecore_Evas,
                                            func: EcoreEvasEventCb);
    pub fn ecore_evas_callback_focus_out_set(ee: *mut Ecore_Evas,
                                             func: EcoreEvasEventCb);
    pub fn ecore_evas_callback_sticky_set(ee: *mut Ecore_Evas,
                                          func: EcoreEvasEventCb);
    pub fn ecore_evas_callback_unsticky_set(ee: *mut Ecore_Evas,
                                            func: EcoreEvasEventCb);
    pub fn ecore_evas_callback_mouse_in_set(ee: *mut Ecore_Evas,
                                            func: EcoreEvasEventCb);
    pub fn ecore_evas_callback_mouse_out_set(ee: *mut Ecore_Evas,
                                             func: EcoreEvasEventCb);
    pub fn ecore_evas_callback_pre_render_set(ee: *mut Ecore_Evas,
                                              func: EcoreEvasEventCb);
    pub fn ecore_evas_callback_post_render_set(ee: *mut Ecore_Evas,
                                               func: EcoreEvasEventCb);
    pub fn ecore_evas_callback_pre_free_set(ee: *mut Ecore_Evas,
                                            func: EcoreEvasEventCb);
    pub fn ecore_evas_callback_state_change_set(ee: *mut Ecore_Evas,
                                                func: EcoreEvasEventCb);
    pub fn ecore_evas_get(ee: *const Ecore_Evas) -> *mut Evas;
    pub fn ecore_evas_managed_move(ee: *mut Ecore_Evas,
                                   x: c_int,
                                   y: c_int);
    pub fn ecore_evas_shaped_set(ee: *mut Ecore_Evas, shaped: EinaBool);
    pub fn ecore_evas_shaped_get(ee: *const Ecore_Evas) -> EinaBool;
    pub fn ecore_evas_show(ee: *mut Ecore_Evas);
    pub fn ecore_evas_hide(ee: *mut Ecore_Evas);
    pub fn ecore_evas_activate(ee: *mut Ecore_Evas);
    pub fn ecore_evas_size_min_set(ee: *mut Ecore_Evas,
                                   w: c_int,
                                   h: c_int);
    pub fn ecore_evas_size_min_get(ee: *const Ecore_Evas,
                                   w: *mut c_int,
                                   h: *mut c_int);
    pub fn ecore_evas_size_max_set(ee: *mut Ecore_Evas,
                                   w: c_int,
                                   h: c_int);
    pub fn ecore_evas_size_max_get(ee: *const Ecore_Evas,
                                   w: *mut c_int,
                                   h: *mut c_int);
    pub fn ecore_evas_size_base_set(ee: *mut Ecore_Evas,
                                    w: c_int,
                                    h: c_int);
    pub fn ecore_evas_size_base_get(ee: *const Ecore_Evas,
                                    w: *mut c_int,
                                    h: *mut c_int);
    pub fn ecore_evas_size_step_set(ee: *mut Ecore_Evas,
                                    w: c_int,
                                    h: c_int);
    pub fn ecore_evas_size_step_get(ee: *const Ecore_Evas,
                                    w: *mut c_int,
                                    h: *mut c_int);
    pub fn ecore_evas_cursor_set(ee: *mut Ecore_Evas,
                                 file: *const c_char,
                                 layer: c_int,
                                 hot_x: c_int,
                                 hot_y: c_int);
    pub fn ecore_evas_cursor_get(ee: *const Ecore_Evas,
                                 obj: *mut *mut Evas_Object,
                                 layer: *mut c_int,
                                 hot_x: *mut c_int,
                                 hot_y: *mut c_int);
    pub fn ecore_evas_object_cursor_set(ee: *mut Ecore_Evas,
                                        obj: *mut Evas_Object,
                                        layer: c_int,
                                        hot_x: c_int,
                                        hot_y: c_int);
    pub fn ecore_evas_cursor_unset(ee: *mut Ecore_Evas) -> *mut Evas_Object;
    pub fn ecore_evas_override_set(ee: *mut Ecore_Evas, on: EinaBool);
    pub fn ecore_evas_override_get(ee: *const Ecore_Evas) -> EinaBool;
    pub fn ecore_evas_avoid_damage_set(ee: *mut Ecore_Evas,
                                       on: EcoreEvasAvoidDamagaeType);
    pub fn ecore_evas_avoid_damage_get(ee: *const Ecore_Evas)
     -> EcoreEvasAvoidDamagaeType;
    pub fn ecore_evas_withdrawn_set(ee: *mut Ecore_Evas,
                                    withdrawn: EinaBool);
    pub fn ecore_evas_withdrawn_get(ee: *const Ecore_Evas) -> EinaBool;
    pub fn ecore_evas_sticky_set(ee: *mut Ecore_Evas, sticky: EinaBool);
    pub fn ecore_evas_sticky_get(ee: *const Ecore_Evas) -> EinaBool;
    pub fn ecore_evas_manual_render_set(ee: *mut Ecore_Evas,
                                        manual_render: EinaBool);
    pub fn ecore_evas_manual_render_get(ee: *const Ecore_Evas) -> EinaBool;
    pub fn ecore_evas_input_event_register(ee: *mut Ecore_Evas);
    pub fn ecore_evas_input_event_unregister(ee: *mut Ecore_Evas);
    pub fn ecore_evas_manual_render(ee: *mut Ecore_Evas);
    pub fn ecore_evas_comp_sync_set(ee: *mut Ecore_Evas, do_sync: EinaBool);
    pub fn ecore_evas_comp_sync_get(ee: *const Ecore_Evas) -> EinaBool;
    pub fn ecore_evas_screen_geometry_get(ee: *const Ecore_Evas,
                                          x: *mut c_int,
                                          y: *mut c_int,
                                          w: *mut c_int,
                                          h: *mut c_int);
    pub fn ecore_evas_screen_dpi_get(ee: *const Ecore_Evas,
                                     xdpi: *mut c_int,
                                     ydpi: *mut c_int);
    pub fn ecore_evas_draw_frame_set(ee: *mut Ecore_Evas,
                                     draw_frame: EinaBool);
    pub fn ecore_evas_draw_frame_get(ee: *const Ecore_Evas) -> EinaBool;
    pub fn ecore_evas_object_associate(ee: *mut Ecore_Evas,
                                       obj: *mut Evas_Object,
                                       flags:
                                           EcoreEvasObjectAssociateFlags)
     -> EinaBool;
    pub fn ecore_evas_object_dissociate(ee: *mut Ecore_Evas,
                                        obj: *mut Evas_Object) -> EinaBool;
    pub fn ecore_evas_object_associate_get(ee: *const Ecore_Evas)
     -> *mut Evas_Object;
    pub fn ecore_getopt_callback_ecore_evas_list_engines(parser:
                                                             *const Ecore_Getopt,
                                                         desc:
                                                             *const Ecore_Getopt_Desc,
                                                         str:
                                                             *const c_char,
                                                         data:
                                                             *mut c_void,
                                                         storage:
                                                             *mut Ecore_Union_Getopt_Value)
     -> c_uchar;
    pub fn ecore_evas_ecore_evas_list_get() -> *mut Eina_List;
    pub fn ecore_evas_sub_ecore_evas_list_get(ee: *const Ecore_Evas)
     -> *mut Eina_List;
    pub fn ecore_evas_x11_leader_set(ee: *mut Ecore_Evas,
                                     win: Ecore_X_Window);
    pub fn ecore_evas_x11_leader_get(ee: *mut Ecore_Evas) -> Ecore_X_Window;
    pub fn ecore_evas_x11_leader_default_set(ee: *mut Ecore_Evas);
    pub fn ecore_evas_x11_shape_input_rectangle_set(ee: *mut Ecore_Evas,
                                                    x: c_int,
                                                    y: c_int,
                                                    w: c_int,
                                                    h: c_int);
    pub fn ecore_evas_x11_shape_input_rectangle_add(ee: *mut Ecore_Evas,
                                                    x: c_int,
                                                    y: c_int,
                                                    w: c_int,
                                                    h: c_int);
    pub fn ecore_evas_x11_shape_input_rectangle_subtract(ee: *mut Ecore_Evas,
                                                         x:
                                                             c_int,
                                                         y:
                                                             c_int,
                                                         w:
                                                             c_int,
                                                         h:
                                                             c_int);
    pub fn ecore_evas_x11_shape_input_empty(ee: *mut Ecore_Evas);
    pub fn ecore_evas_x11_shape_input_reset(ee: *mut Ecore_Evas);
    pub fn ecore_evas_x11_shape_input_apply(ee: *mut Ecore_Evas);
    pub fn ecore_evas_ews_engine_set(engine: *const c_char,
                                     options: *const c_char)
     -> EinaBool;
    pub fn ecore_evas_ews_setup(x: c_int,
                                y: c_int,
                                w: c_int,
                                h: c_int) -> EinaBool;
    pub fn ecore_evas_ews_ecore_evas_get() -> *mut Ecore_Evas;
    pub fn ecore_evas_ews_evas_get() -> *mut Evas;
    pub fn ecore_evas_ews_background_get() -> *mut Evas_Object;
    pub fn ecore_evas_ews_background_set(o: *mut Evas_Object);
    pub fn ecore_evas_ews_children_get() -> *const Eina_List;
    pub fn ecore_evas_ews_manager_set(manager: *const c_void);
    pub fn ecore_evas_ews_manager_get() -> *const c_void;
    pub fn ecore_evas_extn_socket_new(w: c_int,
                                      h: c_int)
     -> *mut Ecore_Evas;
    pub fn ecore_evas_extn_socket_listen(ee: *mut Ecore_Evas,
                                         svcname:
                                             *const c_char,
                                         svcnum: c_int,
                                         svcsys: EinaBool) -> EinaBool;
    pub fn ecore_evas_extn_socket_events_block_set(ee: *mut Ecore_Evas,
                                                   events_block: EinaBool);
    pub fn ecore_evas_extn_socket_events_block_get(ee: *mut Ecore_Evas)
     -> EinaBool;
    pub fn ecore_evas_extn_plug_object_data_lock(obj: *mut Evas_Object);
    pub fn ecore_evas_extn_plug_object_data_unlock(obj: *mut Evas_Object);
    pub fn ecore_evas_extn_plug_new(ee_target: *mut Ecore_Evas)
     -> *mut Evas_Object;
    pub fn ecore_evas_extn_plug_connect(obj: *mut Evas_Object,
                                        svcname:
                                            *const c_char,
                                        svcnum: c_int,
                                        svcsys: EinaBool) -> EinaBool;
    pub fn ecore_evas_pointer_xy_get(ee: *const Ecore_Evas,
                                     x: *mut EvasCoord, y: *mut EvasCoord);
    pub fn ecore_evas_pointer_warp(ee: *const Ecore_Evas, x: EvasCoord,
                                   y: EvasCoord) -> EinaBool;
    pub fn ecore_evas_pixmap_visual_get(ee: *const Ecore_Evas)
     -> *mut c_void;
    pub fn ecore_evas_pixmap_colormap_get(ee: *const Ecore_Evas)
     -> c_ulong;
    pub fn ecore_evas_pixmap_depth_get(ee: *const Ecore_Evas)
     -> c_int;
}
#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
    }
}
