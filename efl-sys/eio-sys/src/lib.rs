extern crate libc;
extern crate eina_sys;
extern crate eet_sys;

use libc::*;
use eina_sys::*;
use eet_sys::*;
/* automatically generated by rust-bindgen */

#[repr(C)]
pub struct EioVersion {
    pub major: c_int,
    pub minor: c_int,
    pub micro: c_int,
    pub revision: c_int,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EioFileOp {
    EIO_FILE_COPY = 0,
    EIO_FILE_MOVE = 1,
    EIO_DIR_COPY = 2,
    EIO_DIR_MOVE = 3,
    EIO_UNLINK = 4,
    EIO_FILE_GETPWNAM = 5,
    EIO_FILE_GETGRNAM = 6,
}
pub enum EioFile { }
pub type EioFilterCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                   handler: *mut EioFile,
                                                   file: *const c_char)
                              -> EinaBool>;
pub type EioMainCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                 handler: *mut EioFile,
                                                 file: *const c_char)>;
pub type EioFilterDirectCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                         handler: *mut EioFile,
                                                         info: *const EinaFileDirectInfo)
                              -> EinaBool>;
pub type EioFilterDirCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                      handler: *mut EioFile,
                                                      info: *mut EinaFileDirectInfo)
                              -> EinaBool>;
pub type EioMainDirectCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                       handler: *mut EioFile,
                                                       info: *const EinaFileDirectInfo)>;
pub type EioStatCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                 handler: *mut EioFile,
                                                 stat: *const EinaStat)>;
pub type EioProgressCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                     handler: *mut EioFile,
                                                     info: *const EioProgress)>;
pub type EioEetOpenCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                    handler: *mut EioFile,
                                                    file: *mut EetFile)>;
pub type EioOpenCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                 handler: *mut EioFile,
                                                 file: *mut EinaFile)>;
pub type EioFilterMapCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                      handler: *mut EioFile,
                                                      map: *mut c_void,
                                                      length: size_t) -> EinaBool>;
pub type EioMapCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                handler: *mut EioFile,
                                                map: *mut c_void,
                                                length: size_t)>;
pub type EioDoneDataCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                     handler: *mut EioFile,
                                                     read_data: *const c_char,
                                                     size: c_uint)>;
pub type EioDoneStringCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                       handler: *mut EioFile,
                                                       xattr_string: *const c_char)>;
pub type EioDoneDoubleCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                       handler: *mut EioFile,
                                                       xattr_double: c_double)>;
pub type EioDoneIntCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                    handler: *mut EioFile,
                                                    i: c_int)>;
pub type EioDoneEreadCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                      handler: *mut EioFile,
                                                      decoded: *mut c_void)>;
pub type EioDoneReadCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                     handler: *mut EioFile,
                                                     read_data: *mut c_void,
                                                     size: c_uint)>;
pub type EioDoneCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                 handler: *mut EioFile)>;
pub type EioErrorCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                  handler: *mut EioFile,
                                                  error: c_int)>;
pub type EioEetErrorCb = Option<unsafe extern "C" fn(data: *mut c_void,
                                                     handler: *mut EioFile,
                                                     err: EetError)>;
#[repr(C)]
pub struct EioProgress {
    pub op: EioFileOp,
    pub current: c_longlong,
    pub max: c_longlong,
    pub percent: c_float,
    pub source: *const c_char,
    pub dest: *const c_char,
}
pub enum EioMonitor { }
#[repr(C)]
pub struct EioMonitorError {
    pub monitor: *mut EioMonitor,
    pub error: c_int,
}
#[repr(C)]
pub struct EioMonitorEvent {
    pub monitor: *mut EioMonitor,
    pub filename: *const c_char,
}

#[link(name = "eio")]
extern "C" {
    pub static mut eio_version: *mut EioVersion;
    pub static mut EIO_MONITOR_FILE_CREATED: c_int;
    pub static mut EIO_MONITOR_FILE_DELETED: c_int;
    pub static mut EIO_MONITOR_FILE_MODIFIED: c_int;
    pub static mut EIO_MONITOR_FILE_CLOSED: c_int;
    pub static mut EIO_MONITOR_DIRECTORY_CREATED: c_int;
    pub static mut EIO_MONITOR_DIRECTORY_DELETED: c_int;
    pub static mut EIO_MONITOR_DIRECTORY_MODIFIED: c_int;
    pub static mut EIO_MONITOR_DIRECTORY_CLOSED: c_int;
    pub static mut EIO_MONITOR_SELF_RENAME: c_int;
    pub static mut EIO_MONITOR_SELF_DELETED: c_int;
    pub static mut EIO_MONITOR_ERROR: c_int;
}
#[link(name = "eio")]
extern "C" {
    pub fn eio_file_ls(dir: *const c_char,
                       filter_cb: EioFilterCb, main_cb: EioMainCb,
                       done_cb: EioDoneCb, error_cb: EioErrorCb,
                       data: *const c_void) -> *mut EioFile;
    pub fn eio_file_direct_ls(dir: *const c_char,
                              filter_cb: EioFilterDirectCb,
                              main_cb: EioMainDirectCb,
                              done_cb: EioDoneCb, error_cb: EioErrorCb,
                              data: *const c_void)
     -> *mut EioFile;
    pub fn eio_file_stat_ls(dir: *const c_char,
                            filter_cb: EioFilterDirectCb,
                            main_cb: EioMainDirectCb, done_cb: EioDoneCb,
                            error_cb: EioErrorCb,
                            data: *const c_void)
     -> *mut EioFile;
    pub fn eio_dir_stat_ls(dir: *const c_char,
                           filter_cb: EioFilterDirectCb,
                           main_cb: EioMainDirectCb, done_cb: EioDoneCb,
                           error_cb: EioErrorCb,
                           data: *const c_void)
     -> *mut EioFile;
    pub fn eio_dir_direct_ls(dir: *const c_char,
                             filter_cb: EioFilterDirCb,
                             main_cb: EioMainDirectCb,
                             done_cb: EioDoneCb, error_cb: EioErrorCb,
                             data: *const c_void)
     -> *mut EioFile;
    pub fn eio_file_direct_stat(path: *const c_char,
                                done_cb: EioStatCb, error_cb: EioErrorCb,
                                data: *const c_void)
     -> *mut EioFile;
    pub fn eio_file_chmod(path: *const c_char, mode: mode_t,
                          done_cb: EioDoneCb, error_cb: EioErrorCb,
                          data: *const c_void)
     -> *mut EioFile;
    pub fn eio_file_chown(path: *const c_char,
                          user: *const c_char,
                          group: *const c_char,
                          done_cb: EioDoneCb, error_cb: EioErrorCb,
                          data: *const c_void)
     -> *mut EioFile;
    pub fn eio_file_unlink(path: *const c_char,
                           done_cb: EioDoneCb, error_cb: EioErrorCb,
                           data: *const c_void)
     -> *mut EioFile;
    pub fn eio_file_mkdir(path: *const c_char, mode: mode_t,
                          done_cb: EioDoneCb, error_cb: EioErrorCb,
                          data: *const c_void)
     -> *mut EioFile;
    pub fn eio_file_move(source: *const c_char,
                         dest: *const c_char,
                         progress_cb: EioProgressCb, done_cb: EioDoneCb,
                         error_cb: EioErrorCb,
                         data: *const c_void)
     -> *mut EioFile;
    pub fn eio_file_copy(source: *const c_char,
                         dest: *const c_char,
                         progress_cb: EioProgressCb, done_cb: EioDoneCb,
                         error_cb: EioErrorCb,
                         data: *const c_void)
     -> *mut EioFile;
    pub fn eio_dir_move(source: *const c_char,
                        dest: *const c_char,
                        filter_cb: EioFilterDirectCb,
                        progress_cb: EioProgressCb, done_cb: EioDoneCb,
                        error_cb: EioErrorCb,
                        data: *const c_void) -> *mut EioFile;
    pub fn eio_dir_copy(source: *const c_char,
                        dest: *const c_char,
                        filter_cb: EioFilterDirectCb,
                        progress_cb: EioProgressCb, done_cb: EioDoneCb,
                        error_cb: EioErrorCb,
                        data: *const c_void) -> *mut EioFile;
    pub fn eio_dir_unlink(path: *const c_char,
                          filter_cb: EioFilterDirectCb,
                          progress_cb: EioProgressCb, done_cb: EioDoneCb,
                          error_cb: EioErrorCb,
                          data: *const c_void)
     -> *mut EioFile;
    pub fn eio_file_xattr(path: *const c_char,
                          filter_cb: EioFilterCb, main_cb: EioMainCb,
                          done_cb: EioDoneCb, error_cb: EioErrorCb,
                          data: *const c_void)
     -> *mut EioFile;
    pub fn eio_file_xattr_int_set(path: *const c_char,
                                  attribute: *const c_char,
                                  xattr_int: c_int,
                                  flags: EinaXattrFlags,
                                  done_cb: EioDoneCb,
                                  error_cb: EioErrorCb,
                                  data: *const c_void)
     -> *mut EioFile;
    pub fn eio_file_xattr_double_set(path: *const c_char,
                                     attribute: *const c_char,
                                     xattr_double: c_double,
                                     flags: EinaXattrFlags,
                                     done_cb: EioDoneCb,
                                     error_cb: EioErrorCb,
                                     data: *const c_void)
     -> *mut EioFile;
    pub fn eio_file_xattr_string_set(path: *const c_char,
                                     attribute: *const c_char,
                                     xattr_string:
                                         *const c_char,
                                     flags: EinaXattrFlags,
                                     done_cb: EioDoneCb,
                                     error_cb: EioErrorCb,
                                     data: *const c_void)
     -> *mut EioFile;
    pub fn eio_file_xattr_set(path: *const c_char,
                              attribute: *const c_char,
                              xattr_data: *const c_char,
                              xattr_size: c_uint,
                              flags: EinaXattrFlags, done_cb: EioDoneCb,
                              error_cb: EioErrorCb,
                              data: *const c_void)
     -> *mut EioFile;
    pub fn eio_file_xattr_get(path: *const c_char,
                              attribute: *const c_char,
                              done_cb: EioDoneDataCb,
                              error_cb: EioErrorCb,
                              data: *const c_void)
     -> *mut EioFile;
    pub fn eio_file_xattr_int_get(path: *const c_char,
                                  attribute: *const c_char,
                                  done_cb: EioDoneIntCb,
                                  error_cb: EioErrorCb,
                                  data: *const c_void)
     -> *mut EioFile;
    pub fn eio_file_xattr_double_get(path: *const c_char,
                                     attribute: *const c_char,
                                     done_cb: EioDoneDoubleCb,
                                     error_cb: EioErrorCb,
                                     data: *const c_void)
     -> *mut EioFile;
    pub fn eio_file_xattr_string_get(path: *const c_char,
                                     attribute: *const c_char,
                                     done_cb: EioDoneStringCb,
                                     error_cb: EioErrorCb,
                                     data: *const c_void)
     -> *mut EioFile;
    pub fn eio_init() -> c_int;
    pub fn eio_shutdown() -> c_int;
    pub fn eio_memory_burst_limit_set(limit: size_t);
    pub fn eio_memory_burst_limit_get() -> size_t;
    pub fn eio_file_container_get(ls: *mut EioFile)
     -> *mut c_void;
    pub fn eio_file_cancel(ls: *mut EioFile) -> EinaBool;
    pub fn eio_file_check(ls: *mut EioFile) -> EinaBool;
    pub fn eio_file_associate_add(ls: *mut EioFile,
                                  key: *const c_char,
                                  data: *const c_void,
                                  free_cb: EinaFreeCb) -> EinaBool;
    pub fn eio_file_associate_direct_add(ls: *mut EioFile,
                                         key: *const c_char,
                                         data: *const c_void,
                                         free_cb: EinaFreeCb) -> EinaBool;
    pub fn eio_file_associate_find(ls: *mut EioFile,
                                   key: *const c_char)
     -> *mut c_void;
    pub fn eio_file_open(name: *const c_char,
                         shared: EinaBool, open_cb: EioOpenCb,
                         error_cb: EioErrorCb,
                         data: *const c_void)
     -> *mut EioFile;
    pub fn eio_file_close(f: *mut EinaFile, done_cb: EioDoneCb,
                          error_cb: EioErrorCb,
                          data: *const c_void)
     -> *mut EioFile;
    pub fn eio_file_map_all(f: *mut EinaFile, rule: EinaFilePopulate,
                            filter_cb: EioFilterMapCb, map_cb: EioMapCb,
                            error_cb: EioErrorCb,
                            data: *const c_void)
     -> *mut EioFile;
    pub fn eio_file_map_new(f: *mut EinaFile, rule: EinaFilePopulate,
                            offset: c_ulong,
                            length: c_ulong,
                            filter_cb: EioFilterMapCb, map_cb: EioMapCb,
                            error_cb: EioErrorCb,
                            data: *const c_void)
     -> *mut EioFile;
    pub fn eio_eet_open(filename: *const c_char,
                        mode: EetFileMode, eet_cb: EioEetOpenCb,
                        error_cb: EioErrorCb,
                        data: *const c_void) -> *mut EioFile;
    pub fn eio_eet_close(ef: *mut EetFile, done_cb: EioDoneCb,
                         error_cb: EioEetErrorCb,
                         data: *const c_void)
     -> *mut EioFile;
    pub fn eio_eet_sync(ef: *mut EetFile, done_cb: EioDoneCb,
                        error_cb: EioEetErrorCb,
                        data: *const c_void) -> *mut EioFile;
    pub fn eio_eet_data_write_cipher(ef: *mut EetFile,
                                     edd: *mut EetDataDescriptor,
                                     name: *const c_char,
                                     cipher_key:
                                         *const c_char,
                                     write_data: *mut c_void,
                                     compress: c_int,
                                     done_cb: EioDoneIntCb,
                                     error_cb: EioErrorCb,
                                     user_data: *const c_void)
     -> *mut EioFile;
    pub fn eio_eet_data_read_cipher(ef: *mut EetFile,
                                    edd: *mut EetDataDescriptor,
                                    name: *const c_char,
                                    cipher_key: *const c_char,
                                    done_cb: EioDoneEreadCb,
                                    error_cb: EioErrorCb,
                                    data: *const c_void)
     -> *mut EioFile;
    pub fn eio_eet_data_image_write_cipher(ef: *mut EetFile,
                                           name:
                                               *const c_char,
                                           cipher_key:
                                               *const c_char,
                                           write_data:
                                               *mut c_void,
                                           w: c_uint,
                                           h: c_uint,
                                           alpha: c_int,
                                           compress: c_int,
                                           quality: c_int,
                                           lossy: c_int,
                                           done_cb: EioDoneIntCb,
                                           error_cb: EioErrorCb,
                                           user_data:
                                               *const c_void)
     -> *mut EioFile;
    pub fn eio_eet_read_direct(ef: *mut EetFile,
                               name: *const c_char,
                               done_cb: EioDoneDataCb,
                               error_cb: EioErrorCb,
                               data: *const c_void)
     -> *mut EioFile;
    pub fn eio_eet_read_cipher(ef: *mut EetFile,
                               name: *const c_char,
                               cipher_key: *const c_char,
                               done_cb: EioDoneReadCb,
                               error_cb: EioErrorCb,
                               data: *const c_void)
     -> *mut EioFile;
    pub fn eio_eet_write_cipher(ef: *mut EetFile,
                                name: *const c_char,
                                write_data: *mut c_void,
                                size: c_int,
                                compress: c_int,
                                cipher_key: *const c_char,
                                done_cb: EioDoneIntCb,
                                error_cb: EioErrorCb,
                                user_data: *const c_void)
     -> *mut EioFile;
    pub fn eio_monitor_add(path: *const c_char)
     -> *mut EioMonitor;
    pub fn eio_monitor_stringshared_add(path: *const c_char)
     -> *mut EioMonitor;
    pub fn eio_monitor_del(monitor: *mut EioMonitor);
    pub fn eio_monitor_path_get(monitor: *mut EioMonitor)
     -> *const c_char;
}
