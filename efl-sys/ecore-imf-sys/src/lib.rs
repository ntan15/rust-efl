extern crate libc;
extern crate eina_sys;

use libc::*;
use eina_sys::*;

/* automatically generated by rust-bindgen */

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreImfInputPanelEvent {
    ECORE_IMF_INPUT_PANEL_STATE_EVENT = 0,
    ECORE_IMF_INPUT_PANEL_LANGUAGE_EVENT = 1,
    ECORE_IMF_INPUT_PANEL_SHIFT_MODE_EVENT = 2,
    ECORE_IMF_INPUT_PANEL_GEOMETRY_EVENT = 3,
    ECORE_IMF_CANDIDATE_PANEL_STATE_EVENT = 4,
    ECORE_IMF_CANDIDATE_PANEL_GEOMETRY_EVENT = 5,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreImfInputPanelState {
    ECORE_IMF_INPUT_PANEL_STATE_SHOW = 0,
    ECORE_IMF_INPUT_PANEL_STATE_HIDE = 1,
    ECORE_IMF_INPUT_PANEL_STATE_WILL_SHOW = 2,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreImfInputPanelShiftMode {
    ECORE_IMF_INPUT_PANEL_SHIFT_MODE_OFF = 0,
    ECORE_IMF_INPUT_PANEL_SHIFT_MODE_ON = 1,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreImfCandidatePanelState {
    ECORE_IMF_CANDIDATE_PANEL_SHOW = 0,
    ECORE_IMF_CANDIDATE_PANEL_HIDE = 1,
}
pub type EcoreImfEvent = EcoreUnionImfEvent;
pub enum EcoreImfContext { }
pub type EcoreImfEventCb =
    Option<unsafe extern "C" fn(data: *mut c_void,
                                ctx: *mut EcoreImfContext,
                                event_info: *mut c_void)>;
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreImfCallbackType {
    ECORE_IMF_CALLBACK_PREEDIT_START = 0,
    ECORE_IMF_CALLBACK_PREEDIT_END = 1,
    ECORE_IMF_CALLBACK_PREEDIT_CHANGED = 2,
    ECORE_IMF_CALLBACK_COMMIT = 3,
    ECORE_IMF_CALLBACK_DELETE_SURROUNDING = 4,
    ECORE_IMF_CALLBACK_SELECTION_SET = 5,
    ECORE_IMF_CALLBACK_PRIVATE_COMMAND_SEND = 6,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreImfEventType {
    ECORE_IMF_EVENT_MOUSE_DOWN = 0,
    ECORE_IMF_EVENT_MOUSE_UP = 1,
    ECORE_IMF_EVENT_MOUSE_IN = 2,
    ECORE_IMF_EVENT_MOUSE_OUT = 3,
    ECORE_IMF_EVENT_MOUSE_MOVE = 4,
    ECORE_IMF_EVENT_MOUSE_WHEEL = 5,
    ECORE_IMF_EVENT_KEY_DOWN = 6,
    ECORE_IMF_EVENT_KEY_UP = 7,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreImfKeyboardModifiers {
    ECORE_IMF_KEYBOARD_MODIFIER_NONE = 0,
    ECORE_IMF_KEYBOARD_MODIFIER_CTRL = 1,
    ECORE_IMF_KEYBOARD_MODIFIER_ALT = 2,
    ECORE_IMF_KEYBOARD_MODIFIER_SHIFT = 4,
    ECORE_IMF_KEYBOARD_MODIFIER_WIN = 8,
    ECORE_IMF_KEYBOARD_MODIFIER_ALTGR = 16,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreImfKeyboardLocks {
    ECORE_IMF_KEYBOARD_LOCK_NONE = 0,
    ECORE_IMF_KEYBOARD_LOCK_NUM = 1,
    ECORE_IMF_KEYBOARD_LOCK_CAPS = 2,
    ECORE_IMF_KEYBOARD_LOCK_SCROLL = 4,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreImfMouseFlags {
    ECORE_IMF_MOUSE_NONE = 0,
    ECORE_IMF_MOUSE_DOUBLE_CLICK = 1,
    ECORE_IMF_MOUSE_TRIPLE_CLICK = 2,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreImfInputMode {
    ECORE_IMF_INPUT_MODE_ALPHA = 1,
    ECORE_IMF_INPUT_MODE_NUMERIC = 2,
    ECORE_IMF_INPUT_MODE_SPECIAL = 4,
    ECORE_IMF_INPUT_MODE_HEXA = 8,
    ECORE_IMF_INPUT_MODE_TELE = 16,
    ECORE_IMF_INPUT_MODE_FULL = 7,
    ECORE_IMF_INPUT_MODE_INVISIBLE = 536870912,
    ECORE_IMF_INPUT_MODE_AUTOCAP = 1073741824,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreImfPreeditType {
    ECORE_IMF_PREEDIT_TYPE_NONE = 0,
    ECORE_IMF_PREEDIT_TYPE_SUB1 = 1,
    ECORE_IMF_PREEDIT_TYPE_SUB2 = 2,
    ECORE_IMF_PREEDIT_TYPE_SUB3 = 3,
    ECORE_IMF_PREEDIT_TYPE_SUB4 = 4,
    ECORE_IMF_PREEDIT_TYPE_SUB5 = 5,
    ECORE_IMF_PREEDIT_TYPE_SUB6 = 6,
    ECORE_IMF_PREEDIT_TYPE_SUB7 = 7,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreImfAutocapitalType {
    ECORE_IMF_AUTOCAPITAL_TYPE_NONE = 0,
    ECORE_IMF_AUTOCAPITAL_TYPE_WORD = 1,
    ECORE_IMF_AUTOCAPITAL_TYPE_SENTENCE = 2,
    ECORE_IMF_AUTOCAPITAL_TYPE_ALLCHARACTER = 3,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreImfInputPanelLayout {
    ECORE_IMF_INPUT_PANEL_LAYOUT_NORMAL = 0,
    ECORE_IMF_INPUT_PANEL_LAYOUT_NUMBER = 1,
    ECORE_IMF_INPUT_PANEL_LAYOUT_EMAIL = 2,
    ECORE_IMF_INPUT_PANEL_LAYOUT_URL = 3,
    ECORE_IMF_INPUT_PANEL_LAYOUT_PHONENUMBER = 4,
    ECORE_IMF_INPUT_PANEL_LAYOUT_IP = 5,
    ECORE_IMF_INPUT_PANEL_LAYOUT_MONTH = 6,
    ECORE_IMF_INPUT_PANEL_LAYOUT_NUMBERONLY = 7,
    ECORE_IMF_INPUT_PANEL_LAYOUT_INVALID = 8,
    ECORE_IMF_INPUT_PANEL_LAYOUT_HEX = 9,
    ECORE_IMF_INPUT_PANEL_LAYOUT_TERMINAL = 10,
    ECORE_IMF_INPUT_PANEL_LAYOUT_PASSWORD = 11,
    ECORE_IMF_INPUT_PANEL_LAYOUT_DATETIME = 12,
    ECORE_IMF_INPUT_PANEL_LAYOUT_EMOTICON = 13,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreImfInputPanelLang {
    ECORE_IMF_INPUT_PANEL_LANG_AUTOMATIC = 0,
    ECORE_IMF_INPUT_PANEL_LANG_ALPHABET = 1,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreImfInputPanelReturnKeyType {
    ECORE_IMF_INPUT_PANEL_RETURN_KEY_TYPE_DEFAULT = 0,
    ECORE_IMF_INPUT_PANEL_RETURN_KEY_TYPE_DONE = 1,
    ECORE_IMF_INPUT_PANEL_RETURN_KEY_TYPE_GO = 2,
    ECORE_IMF_INPUT_PANEL_RETURN_KEY_TYPE_JOIN = 3,
    ECORE_IMF_INPUT_PANEL_RETURN_KEY_TYPE_LOGIN = 4,
    ECORE_IMF_INPUT_PANEL_RETURN_KEY_TYPE_NEXT = 5,
    ECORE_IMF_INPUT_PANEL_RETURN_KEY_TYPE_SEARCH = 6,
    ECORE_IMF_INPUT_PANEL_RETURN_KEY_TYPE_SEND = 7,
    ECORE_IMF_INPUT_PANEL_RETURN_KEY_TYPE_SIGNIN = 8,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreImfInputHints {
    ECORE_IMF_INPUT_HINT_NONE = 0,
    ECORE_IMF_INPUT_HINT_AUTO_COMPLETE = 1,
    ECORE_IMF_INPUT_HINT_SENSITIVE_DATA = 2,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreAnonEnum7 {
    ECORE_IMF_INPUT_PANEL_LAYOUT_NORMAL_VARIATION_NORMAL = 0,
    ECORE_IMF_INPUT_PANEL_LAYOUT_NORMAL_VARIATION_FILENAME = 1,
    ECORE_IMF_INPUT_PANEL_LAYOUT_NORMAL_VARIATION_PERSON_NAME = 2,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreAnonEnum8 {
    ECORE_IMF_INPUT_PANEL_LAYOUT_NUMBERONLY_VARIATION_NORMAL = 0,
    ECORE_IMF_INPUT_PANEL_LAYOUT_NUMBERONLY_VARIATION_SIGNED = 1,
    ECORE_IMF_INPUT_PANEL_LAYOUT_NUMBERONLY_VARIATION_DECIMAL = 2,
    ECORE_IMF_INPUT_PANEL_LAYOUT_NUMBERONLY_VARIATION_SIGNED_AND_DECIMAL = 3,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreAnonEnum9 {
    ECORE_IMF_INPUT_PANEL_LAYOUT_PASSWORD_VARIATION_NORMAL = 0,
    ECORE_IMF_INPUT_PANEL_LAYOUT_PASSWORD_VARIATION_NUMBERONLY = 1,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreImfBidiDirction {
    ECORE_IMF_BIDI_DIRECTION_NEUTRAL = 0,
    ECORE_IMF_BIDI_DIRECTION_LTR = 1,
    ECORE_IMF_BIDI_DIRECTION_RTL = 2,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreImfDeviceClass {
    ECORE_IMF_DEVICE_CLASS_NONE = 0,
    ECORE_IMF_DEVICE_CLASS_SEAT = 1,
    ECORE_IMF_DEVICE_CLASS_KEYBOARD = 2,
    ECORE_IMF_DEVICE_CLASS_MOUSE = 3,
    ECORE_IMF_DEVICE_CLASS_TOUCH = 4,
    ECORE_IMF_DEVICE_CLASS_PEN = 5,
    ECORE_IMF_DEVICE_CLASS_POINTER = 6,
    ECORE_IMF_DEVICE_CLASS_GAMEPAD = 7,
}
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum EcoreImfDeviceSubclass {
    ECORE_IMF_DEVICE_SUBCLASS_NONE = 0,
    ECORE_IMF_DEVICE_SUBCLASS_FINGER = 1,
    ECORE_IMF_DEVICE_SUBCLASS_FINGERNAIL = 2,
    ECORE_IMF_DEVICE_SUBCLASS_KNUCKLE = 3,
    ECORE_IMF_DEVICE_SUBCLASS_PALM = 4,
    ECORE_IMF_DEVICE_SUBCLASS_HAND_SIZE = 5,
    ECORE_IMF_DEVICE_SUBCLASS_HAND_FLAT = 6,
    ECORE_IMF_DEVICE_SUBCLASS_PEN_TIP = 7,
    ECORE_IMF_DEVICE_SUBCLASS_TRACKPAD = 8,
    ECORE_IMF_DEVICE_SUBCLASS_TRACKPOINT = 9,
    ECORE_IMF_DEVICE_SUBCLASS_TRACKBALL = 10,
}
#[repr(C)]
pub struct EcoreImfEventPreeditStart {
    pub ctx: *mut EcoreImfContext,
}
#[repr(C)]
pub struct EcoreImfEventPreeditEnd {
    pub ctx: *mut EcoreImfContext,
}
#[repr(C)]
pub struct EcoreImfEventPreeditChanged {
    pub ctx: *mut EcoreImfContext,
}
#[repr(C)]
pub struct EcoreImfEventCommit {
    pub ctx: *mut EcoreImfContext,
    pub _str: *mut c_char,
}
#[repr(C)]
pub struct EcoreImfEventDeleteSurrounding {
    pub ctx: *mut EcoreImfContext,
    pub offset: c_int,
    pub n_chars: c_int,
}
#[repr(C)]
pub struct EcoreImfEventSelection {
    pub ctx: *mut EcoreImfContext,
    pub start: c_int,
    pub end: c_int,
}
#[repr(C)]
pub struct EcoreImfEventMouseDown {
    pub button: c_int,
    pub output: Struct_Unnamed21,
    pub canvas: Struct_Unnamed22,
    pub modifiers: EcoreImfKeyboardModifiers,
    pub locks: EcoreImfKeyboardLocks,
    pub flags: EcoreImfMouseFlags,
    pub timestamp: c_uint,
}
#[repr(C)]
pub struct Struct_Unnamed21 {
    pub x: c_int,
    pub y: c_int,
}
#[repr(C)]
pub struct Struct_Unnamed22 {
    pub x: c_int,
    pub y: c_int,
}
#[repr(C)]
pub struct EcoreImfEventMouseUp {
    pub button: c_int,
    pub output: Struct_Unnamed23,
    pub canvas: Struct_Unnamed24,
    pub modifiers: EcoreImfKeyboardModifiers,
    pub locks: EcoreImfKeyboardLocks,
    pub flags: EcoreImfMouseFlags,
    pub timestamp: c_uint,
}
#[repr(C)]
pub struct Struct_Unnamed23 {
    pub x: c_int,
    pub y: c_int,
}
#[repr(C)]
pub struct Struct_Unnamed24 {
    pub x: c_int,
    pub y: c_int,
}
#[repr(C)]
pub struct EcoreImfEventMouseIn {
    pub buttons: c_int,
    pub output: EcoreStructUnnamed25,
    pub canvas: EcoreStructUnnamed26,
    pub modifiers: EcoreImfKeyboardModifiers,
    pub locks: EcoreImfKeyboardLocks,
    pub timestamp: c_uint,
}
#[repr(C)]
pub struct EcoreStructUnnamed25 {
    pub x: c_int,
    pub y: c_int,
}
#[repr(C)]
pub struct EcoreStructUnnamed26 {
    pub x: c_int,
    pub y: c_int,
}
#[repr(C)]
pub struct EcoreImfEventMouseOut {
    pub buttons: c_int,
    pub output: EcoreStructUnnamed27,
    pub canvas: EcoreStructUnnamed28,
    pub modifiers: EcoreImfKeyboardModifiers,
    pub locks: EcoreImfKeyboardLocks,
    pub timestamp: c_uint,
}
#[repr(C)]
pub struct EcoreStructUnnamed27 {
    pub x: c_int,
    pub y: c_int,
}
#[repr(C)]
pub struct EcoreStructUnnamed28 {
    pub x: c_int,
    pub y: c_int,
}
#[repr(C)]
pub struct EcoreImfEventMouseMove {
    pub buttons: c_int,
    pub cur: EcoreStructUnnamed29,
    pub prev: EcoreStructUnnamed29,
    pub modifiers: EcoreImfKeyboardModifiers,
    pub locks: EcoreImfKeyboardLocks,
    pub timestamp: c_uint,
}
#[repr(C)]
pub struct EcoreStructUnnamed29 {
    pub output: EcoreStructUnnamed30,
    pub canvas: EcoreStructUnnamed31,
}
#[repr(C)]
pub struct EcoreStructUnnamed30 {
    pub x: c_int,
    pub y: c_int,
}
#[repr(C)]
pub struct EcoreStructUnnamed31 {
    pub x: c_int,
    pub y: c_int,
}
#[repr(C)]
pub struct EcoreImfEventMouseWheel {
    pub direction: c_int,
    pub z: c_int,
    pub output: EcoreStructUnnamed32,
    pub canvas: EcoreStructUnnamed33,
    pub modifiers: EcoreImfKeyboardModifiers,
    pub locks: EcoreImfKeyboardLocks,
    pub timestamp: c_uint,
}
#[repr(C)]
pub struct EcoreStructUnnamed32 {
    pub x: c_int,
    pub y: c_int,
}
#[repr(C)]
pub struct EcoreStructUnnamed33 {
    pub x: c_int,
    pub y: c_int,
}
#[repr(C)]
pub struct EcoreImfEventKeyDown {
    pub keyname: *const c_char,
    pub modifiers: EcoreImfKeyboardModifiers,
    pub locks: EcoreImfKeyboardLocks,
    pub key: *const c_char,
    pub string: *const c_char,
    pub compose: *const c_char,
    pub timestamp: c_uint,
    pub dev_name: *const c_char,
    pub dev_class: EcoreImfDeviceClass,
    pub dev_subclass: EcoreImfDeviceSubclass,
}
#[repr(C)]
pub struct EcoreImfEventKeyUp {
    pub keyname: *const c_char,
    pub modifiers: EcoreImfKeyboardModifiers,
    pub locks: EcoreImfKeyboardLocks,
    pub key: *const c_char,
    pub string: *const c_char,
    pub compose: *const c_char,
    pub timestamp: c_uint,
    pub dev_name: *const c_char,
    pub dev_class: EcoreImfDeviceClass,
    pub dev_subclass: EcoreImfDeviceSubclass,
}
#[repr(C)]
pub struct EcoreUnionImfEvent {
    pub _bindgen_data_: [u64; 8usize],
}
impl EcoreUnionImfEvent {
    pub unsafe fn mouse_down(&mut self) -> *mut EcoreImfEventMouseDown {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mouse_up(&mut self) -> *mut EcoreImfEventMouseUp {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mouse_in(&mut self) -> *mut EcoreImfEventMouseIn {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mouse_out(&mut self) -> *mut EcoreImfEventMouseOut {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mouse_move(&mut self) -> *mut EcoreImfEventMouseMove {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mouse_wheel(&mut self) -> *mut EcoreImfEventMouseWheel {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn key_down(&mut self) -> *mut EcoreImfEventKeyDown {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn key_up(&mut self) -> *mut EcoreImfEventKeyUp {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
#[repr(C)]
pub struct EcoreImfPreeditAttr {
    pub preedit_type: EcoreImfPreeditType,
    pub start_index: c_uint,
    pub end_index: c_uint,
}
#[repr(C)]
pub struct EcoreImfContextClass {
    pub add: Option<unsafe extern "C" fn(ctx:
                                                            *mut EcoreImfContext)>,
    pub del: Option<unsafe extern "C" fn(ctx:
                                                            *mut EcoreImfContext)>,
    pub client_window_set: Option<unsafe extern "C" fn(ctx:
                                                                          *mut EcoreImfContext,
                                                                      window:
                                                                          *mut c_void)>,
    pub client_canvas_set: Option<unsafe extern "C" fn(ctx:
                                                                          *mut EcoreImfContext,
                                                                      canvas:
                                                                          *mut c_void)>,
    pub show: Option<unsafe extern "C" fn(ctx:
                                                             *mut EcoreImfContext)>,
    pub hide: Option<unsafe extern "C" fn(ctx:
                                                             *mut EcoreImfContext)>,
    pub preedit_string_get: Option<unsafe extern "C" fn(ctx:
                                                                           *mut EcoreImfContext,
                                                                       str:
                                                                           *mut *mut c_char,
                                                                       cursor_pos:
                                                                           *mut c_int)>,
    pub focus_in: Option<unsafe extern "C" fn(ctx:
                                                                 *mut EcoreImfContext)>,
    pub focus_out: Option<unsafe extern "C" fn(ctx:
                                                                  *mut EcoreImfContext)>,
    pub reset: Option<unsafe extern "C" fn(ctx:
                                                              *mut EcoreImfContext)>,
    pub cursor_position_set: Option<unsafe extern "C" fn(ctx:
                                                                            *mut EcoreImfContext,
                                                                        cursor_pos:
                                                                            c_int)>,
    pub use_preedit_set: Option<unsafe extern "C" fn(ctx:
                                                                        *mut EcoreImfContext,
                                                                    use_preedit:
                                                                        EinaBool)>,
    pub input_mode_set: Option<unsafe extern "C" fn(ctx:
                                                                       *mut EcoreImfContext,
                                                                   input_mode:
                                                                       EcoreImfInputMode)>,
    pub filter_event: Option<unsafe extern "C" fn(ctx:
                                                                     *mut EcoreImfContext,
                                                                 _type:
                                                                     EcoreImfEventType,
                                                                 event:
                                                                     *mut EcoreImfEvent)
                                                -> EinaBool>,
    pub preedit_string_with_attributes_get: Option<unsafe extern "C" fn(ctx:
                                                                                           *mut EcoreImfContext,
                                                                                       str:
                                                                                           *mut *mut c_char,
                                                                                       attrs:
                                                                                           *mut *mut EinaList,
                                                                                       cursor_pos:
                                                                                           *mut c_int)>,
    pub prediction_allow_set: Option<unsafe extern "C" fn(ctx:
                                                                             *mut EcoreImfContext,
                                                                         prediction:
                                                                             EinaBool)>,
    pub autocapital_type_set: Option<unsafe extern "C" fn(ctx:
                                                                             *mut EcoreImfContext,
                                                                         autocapital_type:
                                                                             EcoreImfAutocapitalType)>,
    pub control_panel_show: Option<unsafe extern "C" fn(ctx:
                                                                           *mut EcoreImfContext)>,
    pub control_panel_hide: Option<unsafe extern "C" fn(ctx:
                                                                           *mut EcoreImfContext)>,
    pub input_panel_layout_set: Option<unsafe extern "C" fn(ctx:
                                                                               *mut EcoreImfContext,
                                                                           layout:
                                                                               EcoreImfInputPanelLayout)>,
    pub input_panel_layout_get: Option<unsafe extern "C" fn(ctx:
                                                                               *mut EcoreImfContext)
                                                          ->
                                                              EcoreImfInputPanelLayout>,
    pub input_panel_language_set: Option<unsafe extern "C" fn(ctx:
                                                                                 *mut EcoreImfContext,
                                                                             lang:
                                                                                 EcoreImfInputPanelLang)>,
    pub input_panel_language_get: Option<unsafe extern "C" fn(ctx:
                                                                                 *mut EcoreImfContext)
                                                            ->
                                                                EcoreImfInputPanelLang>,
    pub cursor_location_set: Option<unsafe extern "C" fn(ctx:
                                                                            *mut EcoreImfContext,
                                                                        x:
                                                                            c_int,
                                                                        y:
                                                                            c_int,
                                                                        w:
                                                                            c_int,
                                                                        h:
                                                                            c_int)>,
    pub input_panel_imdata_set: Option<unsafe extern "C" fn(ctx:
                                                                               *mut EcoreImfContext,
                                                                           data:
                                                                               *const c_void,
                                                                           len:
                                                                               c_int)>,
    pub input_panel_imdata_get: Option<unsafe extern "C" fn(ctx:
                                                                               *mut EcoreImfContext,
                                                                           data:
                                                                               *mut c_void,
                                                                           len:
                                                                               *mut c_int)>,
    pub input_panel_return_key_type_set: Option<unsafe extern "C" fn(ctx:
                                                                                        *mut EcoreImfContext,
                                                                                    return_key_type:
                                                                                        EcoreImfInputPanelReturnKeyType)>,
    pub input_panel_return_key_disabled_set: Option<unsafe extern "C" fn(ctx:
                                                                                            *mut EcoreImfContext,
                                                                                        disabled:
                                                                                            EinaBool)>,
    pub input_panel_caps_lock_mode_set: Option<unsafe extern "C" fn(ctx:
                                                                                       *mut EcoreImfContext,
                                                                                   mode:
                                                                                       EinaBool)>,
    pub input_panel_geometry_get: Option<unsafe extern "C" fn(ctx:
                                                                                 *mut EcoreImfContext,
                                                                             x:
                                                                                 *mut c_int,
                                                                             y:
                                                                                 *mut c_int,
                                                                             w:
                                                                                 *mut c_int,
                                                                             h:
                                                                                 *mut c_int)>,
    pub input_panel_state_get: Option<unsafe extern "C" fn(ctx:
                                                                              *mut EcoreImfContext)
                                                         ->
                                                             EcoreImfInputPanelState>,
    pub input_panel_event_callback_add: Option<unsafe extern "C" fn(ctx:
                                                                                       *mut EcoreImfContext,
                                                                                   _type:
                                                                                       EcoreImfInputPanelEvent,
                                                                                   func:
                                                                                       Option<unsafe extern "C" fn(data:
                                                                                                                                      *mut c_void,
                                                                                                                                  ctx:
                                                                                                                                      *mut EcoreImfContext,
                                                                                                                                  value:
                                                                                                                                      c_int)>,
                                                                                   data:
                                                                                       *mut c_void)>,
    pub input_panel_event_callback_del: Option<unsafe extern "C" fn(ctx:
                                                                                       *mut EcoreImfContext,
                                                                                   _type:
                                                                                       EcoreImfInputPanelEvent,
                                                                                   func:
                                                                                       Option<unsafe extern "C" fn(data:
                                                                                                                                      *mut c_void,
                                                                                                                                  ctx:
                                                                                                                                      *mut EcoreImfContext,
                                                                                                                                  value:
                                                                                                                                      c_int)>)>,
    pub input_panel_language_locale_get: Option<unsafe extern "C" fn(ctx:
                                                                                        *mut EcoreImfContext,
                                                                                    lang:
                                                                                        *mut *mut c_char)>,
    pub candidate_panel_geometry_get: Option<unsafe extern "C" fn(ctx:
                                                                                     *mut EcoreImfContext,
                                                                                 x:
                                                                                     *mut c_int,
                                                                                 y:
                                                                                     *mut c_int,
                                                                                 w:
                                                                                     *mut c_int,
                                                                                 h:
                                                                                     *mut c_int)>,
    pub input_hint_set: Option<unsafe extern "C" fn(ctx:
                                                                       *mut EcoreImfContext,
                                                                   input_hints:
                                                                       EcoreImfInputHints)>,
    pub bidi_direction_set: Option<unsafe extern "C" fn(ctx:
                                                                           *mut EcoreImfContext,
                                                                       direction:
                                                                           EcoreImfBidiDirction)>,
}
#[repr(C)]
pub struct EcoreImfContextInfo {
    pub id: *const c_char,
    pub description: *const c_char,
    pub default_locales: *const c_char,
    pub canvas_type: *const c_char,
    pub canvas_required: c_int,
}

#[link(name = "ecore_imf")]
extern "C" {
    pub static mut ECORE_IMF_EVENT_PREEDIT_START: c_int;
    pub static mut ECORE_IMF_EVENT_PREEDIT_END: c_int;
    pub static mut ECORE_IMF_EVENT_PREEDIT_CHANGED: c_int;
    pub static mut ECORE_IMF_EVENT_COMMIT: c_int;
    pub static mut ECORE_IMF_EVENT_DELETE_SURROUNDING: c_int;
}
#[link(name = "ecore_imf")]
extern "C" {
    pub fn ecore_imf_init() -> c_int;
    pub fn ecore_imf_shutdown() -> c_int;
    pub fn ecore_imf_module_register(info: *const EcoreImfContextInfo,
                                     imf_module_create:
                                         Option<extern "C" fn()
                                                                   ->
                                                                       *mut EcoreImfContext>,
                                     imf_module_exit:
                                         Option<extern "C" fn()
                                                                   ->
                                                                       *mut EcoreImfContext>);
    pub fn ecore_imf_input_panel_hide() -> EinaBool;
    pub fn ecore_imf_context_available_ids_get() -> *mut EinaList;
    pub fn ecore_imf_context_available_ids_by_canvas_type_get(canvas_type:
                                                                  *const c_char)
     -> *mut EinaList;
    pub fn ecore_imf_context_default_id_get()
     -> *const c_char;
    pub fn ecore_imf_context_default_id_by_canvas_type_get(canvas_type:
                                                               *const c_char)
     -> *const c_char;
    pub fn ecore_imf_context_info_by_id_get(id: *const c_char)
     -> *const EcoreImfContextInfo;
    pub fn ecore_imf_context_add(id: *const c_char)
     -> *mut EcoreImfContext;
    pub fn ecore_imf_context_info_get(ctx: *mut EcoreImfContext)
     -> *const EcoreImfContextInfo;
    pub fn ecore_imf_context_del(ctx: *mut EcoreImfContext);
    pub fn ecore_imf_context_client_window_set(ctx: *mut EcoreImfContext,
                                               window:
                                                   *mut c_void);
    pub fn ecore_imf_context_client_window_get(ctx: *mut EcoreImfContext)
     -> *mut c_void;
    pub fn ecore_imf_context_client_canvas_set(ctx: *mut EcoreImfContext,
                                               canvas:
                                                   *mut c_void);
    pub fn ecore_imf_context_client_canvas_get(ctx: *mut EcoreImfContext)
     -> *mut c_void;
    pub fn ecore_imf_context_show(ctx: *mut EcoreImfContext);
    pub fn ecore_imf_context_hide(ctx: *mut EcoreImfContext);
    pub fn ecore_imf_context_preedit_string_get(ctx: *mut EcoreImfContext,
                                                str:
                                                    *mut *mut c_char,
                                                cursor_pos:
                                                    *mut c_int);
    pub fn ecore_imf_context_preedit_string_with_attributes_get(ctx:
                                                                    *mut EcoreImfContext,
                                                                str:
                                                                    *mut *mut c_char,
                                                                attrs:
                                                                    *mut *mut EinaList,
                                                                cursor_pos:
                                                                    *mut c_int);
    pub fn ecore_imf_context_focus_in(ctx: *mut EcoreImfContext);
    pub fn ecore_imf_context_focus_out(ctx: *mut EcoreImfContext);
    pub fn ecore_imf_context_reset(ctx: *mut EcoreImfContext);
    pub fn ecore_imf_context_cursor_position_set(ctx: *mut EcoreImfContext,
                                                 cursor_pos:
                                                     c_int);
    pub fn ecore_imf_context_cursor_location_set(ctx: *mut EcoreImfContext,
                                                 x: c_int,
                                                 y: c_int,
                                                 w: c_int,
                                                 h: c_int);
    pub fn ecore_imf_context_use_preedit_set(ctx: *mut EcoreImfContext,
                                             use_preedit: EinaBool);
    pub fn ecore_imf_context_retrieve_surrounding_callback_set(ctx:
                                                                   *mut EcoreImfContext,
                                                               func:
                                                                   Option<unsafe extern "C" fn(data:
                                                                                                                  *mut c_void,
                                                                                                              ctx:
                                                                                                                  *mut EcoreImfContext,
                                                                                                              text:
                                                                                                                  *mut *mut c_char,
                                                                                                              cursor_pos:
                                                                                                                  *mut c_int)
                                                                                             ->
                                                                                                 EinaBool>,
                                                               data:
                                                                   *const c_void);
    pub fn ecore_imf_context_retrieve_selection_callback_set(ctx:
                                                                 *mut EcoreImfContext,
                                                             func:
                                                                 Option<unsafe extern "C" fn(data:
                                                                                                                *mut c_void,
                                                                                                            ctx:
                                                                                                                *mut EcoreImfContext,
                                                                                                            text:
                                                                                                                *mut *mut c_char)
                                                                                           ->
                                                                                               EinaBool>,
                                                             data:
                                                                 *const c_void);
    pub fn ecore_imf_context_input_mode_set(ctx: *mut EcoreImfContext,
                                            input_mode: EcoreImfInputMode);
    pub fn ecore_imf_context_input_mode_get(ctx: *mut EcoreImfContext)
     -> EcoreImfInputMode;
    pub fn ecore_imf_context_filter_event(ctx: *mut EcoreImfContext,
                                          _type: EcoreImfEventType,
                                          event: *mut EcoreImfEvent)
     -> EinaBool;
    pub fn ecore_imf_context_new(ctxc: *const EcoreImfContextClass)
     -> *mut EcoreImfContext;
    pub fn ecore_imf_context_data_set(ctx: *mut EcoreImfContext,
                                      data: *mut c_void);
    pub fn ecore_imf_context_data_get(ctx: *mut EcoreImfContext)
     -> *mut c_void;
    pub fn ecore_imf_context_surrounding_get(ctx: *mut EcoreImfContext,
                                             text:
                                                 *mut *mut c_char,
                                             cursor_pos:
                                                 *mut c_int)
     -> EinaBool;
    pub fn ecore_imf_context_selection_get(ctx: *mut EcoreImfContext,
                                           text:
                                               *mut *mut c_char)
     -> EinaBool;
    pub fn ecore_imf_context_preedit_start_event_add(ctx:
                                                         *mut EcoreImfContext);
    pub fn ecore_imf_context_preedit_end_event_add(ctx:
                                                       *mut EcoreImfContext);
    pub fn ecore_imf_context_preedit_changed_event_add(ctx:
                                                           *mut EcoreImfContext);
    pub fn ecore_imf_context_commit_event_add(ctx: *mut EcoreImfContext,
                                              str:
                                                  *const c_char);
    pub fn ecore_imf_context_delete_surrounding_event_add(ctx:
                                                              *mut EcoreImfContext,
                                                          offset:
                                                              c_int,
                                                          n_chars:
                                                              c_int);
    pub fn ecore_imf_context_event_callback_add(ctx: *mut EcoreImfContext,
                                                _type:
                                                    EcoreImfCallbackType,
                                                func: EcoreImfEventCb,
                                                data:
                                                    *const c_void);
    pub fn ecore_imf_context_event_callback_del(ctx: *mut EcoreImfContext,
                                                _type:
                                                    EcoreImfCallbackType,
                                                func: EcoreImfEventCb)
     -> *mut c_void;
    pub fn ecore_imf_context_event_callback_call(ctx: *mut EcoreImfContext,
                                                 _type:
                                                     EcoreImfCallbackType,
                                                 event_info:
                                                     *mut c_void);
    pub fn ecore_imf_context_prediction_allow_set(ctx: *mut EcoreImfContext,
                                                  prediction: EinaBool);
    pub fn ecore_imf_context_prediction_allow_get(ctx: *mut EcoreImfContext)
     -> EinaBool;
    pub fn ecore_imf_context_autocapital_type_set(ctx: *mut EcoreImfContext,
                                                  autocapital_type:
                                                      EcoreImfAutocapitalType);
    pub fn ecore_imf_context_autocapital_type_get(ctx: *mut EcoreImfContext)
     -> EcoreImfAutocapitalType;
    pub fn ecore_imf_context_input_hint_set(ctx: *mut EcoreImfContext,
                                            hints: EcoreImfInputHints);
    pub fn ecore_imf_context_input_hint_get(ctx: *mut EcoreImfContext)
     -> EcoreImfInputHints;
    pub fn ecore_imf_context_control_panel_show(ctx: *mut EcoreImfContext);
    pub fn ecore_imf_context_control_panel_hide(ctx: *mut EcoreImfContext);
    pub fn ecore_imf_context_input_panel_show(ctx: *mut EcoreImfContext);
    pub fn ecore_imf_context_input_panel_hide(ctx: *mut EcoreImfContext);
    pub fn ecore_imf_context_input_panel_layout_set(ctx:
                                                        *mut EcoreImfContext,
                                                    layout:
                                                        EcoreImfInputPanelLayout);
    pub fn ecore_imf_context_input_panel_layout_get(ctx:
                                                        *mut EcoreImfContext)
     -> EcoreImfInputPanelLayout;
    pub fn ecore_imf_context_input_panel_layout_variation_set(ctx:
                                                                  *mut EcoreImfContext,
                                                              variation:
                                                                  c_int);
    pub fn ecore_imf_context_input_panel_layout_variation_get(ctx:
                                                                  *mut EcoreImfContext)
     -> c_int;
    pub fn ecore_imf_context_input_panel_language_set(ctx:
                                                          *mut EcoreImfContext,
                                                      lang:
                                                          EcoreImfInputPanelLang);
    pub fn ecore_imf_context_input_panel_language_get(ctx:
                                                          *mut EcoreImfContext)
     -> EcoreImfInputPanelLang;
    pub fn ecore_imf_context_input_panel_enabled_set(ctx:
                                                         *mut EcoreImfContext,
                                                     enabled: EinaBool);
    pub fn ecore_imf_context_input_panel_enabled_get(ctx:
                                                         *mut EcoreImfContext)
     -> EinaBool;
    pub fn ecore_imf_context_input_panel_imdata_set(ctx:
                                                        *mut EcoreImfContext,
                                                    data:
                                                        *const c_void,
                                                    len:
                                                        c_int);
    pub fn ecore_imf_context_input_panel_imdata_get(ctx:
                                                        *mut EcoreImfContext,
                                                    data:
                                                        *mut c_void,
                                                    len:
                                                        *mut c_int);
    pub fn ecore_imf_context_input_panel_return_key_type_set(ctx:
                                                                 *mut EcoreImfContext,
                                                             return_key_type:
                                                                 EcoreImfInputPanelReturnKeyType);
    pub fn ecore_imf_context_input_panel_return_key_type_get(ctx:
                                                                 *mut EcoreImfContext)
     -> EcoreImfInputPanelReturnKeyType;
    pub fn ecore_imf_context_input_panel_return_key_disabled_set(ctx:
                                                                     *mut EcoreImfContext,
                                                                 disabled:
                                                                     EinaBool);
    pub fn ecore_imf_context_input_panel_return_key_disabled_get(ctx:
                                                                     *mut EcoreImfContext)
     -> EinaBool;
    pub fn ecore_imf_context_input_panel_caps_lock_mode_set(ctx:
                                                                *mut EcoreImfContext,
                                                            mode: EinaBool);
    pub fn ecore_imf_context_input_panel_caps_lock_mode_get(ctx:
                                                                *mut EcoreImfContext)
     -> EinaBool;
    pub fn ecore_imf_context_input_panel_geometry_get(ctx:
                                                          *mut EcoreImfContext,
                                                      x:
                                                          *mut c_int,
                                                      y:
                                                          *mut c_int,
                                                      w:
                                                          *mut c_int,
                                                      h:
                                                          *mut c_int);
    pub fn ecore_imf_context_input_panel_state_get(ctx:
                                                       *mut EcoreImfContext)
     -> EcoreImfInputPanelState;
    pub fn ecore_imf_context_input_panel_event_callback_add(ctx:
                                                                *mut EcoreImfContext,
                                                            _type:
                                                                EcoreImfInputPanelEvent,
                                                            func:
                                                                Option<unsafe extern "C" fn(data:
                                                                                                               *mut c_void,
                                                                                                           ctx:
                                                                                                               *mut EcoreImfContext,
                                                                                                           value:
                                                                                                               c_int)>,
                                                            data:
                                                                *const c_void);
    pub fn ecore_imf_context_input_panel_event_callback_del(ctx:
                                                                *mut EcoreImfContext,
                                                            _type:
                                                                EcoreImfInputPanelEvent,
                                                            func:
                                                                Option<unsafe extern "C" fn(data:
                                                                                                               *mut c_void,
                                                                                                           ctx:
                                                                                                               *mut EcoreImfContext,
                                                                                                           value:
                                                                                                               c_int)>);
    pub fn ecore_imf_context_input_panel_event_callback_call(ctx:
                                                                 *mut EcoreImfContext,
                                                             _type:
                                                                 EcoreImfInputPanelEvent,
                                                             value:
                                                                 c_int);
    pub fn ecore_imf_context_input_panel_event_callback_clear(ctx:
                                                                  *mut EcoreImfContext);
    pub fn ecore_imf_context_input_panel_language_locale_get(ctx:
                                                                 *mut EcoreImfContext,
                                                             lang:
                                                                 *mut *mut c_char);
    pub fn ecore_imf_context_candidate_panel_geometry_get(ctx:
                                                              *mut EcoreImfContext,
                                                          x:
                                                              *mut c_int,
                                                          y:
                                                              *mut c_int,
                                                          w:
                                                              *mut c_int,
                                                          h:
                                                              *mut c_int);
    pub fn ecore_imf_context_input_panel_show_on_demand_set(ctx:
                                                                *mut EcoreImfContext,
                                                            ondemand:
                                                                EinaBool);
    pub fn ecore_imf_context_input_panel_show_on_demand_get(ctx:
                                                                *mut EcoreImfContext)
     -> EinaBool;
    pub fn ecore_imf_context_bidi_direction_set(ctx: *mut EcoreImfContext,
                                                direction:
                                                    EcoreImfBidiDirction);
    pub fn ecore_imf_context_bidi_direction_get(ctx: *mut EcoreImfContext)
     -> EcoreImfBidiDirction;
}
